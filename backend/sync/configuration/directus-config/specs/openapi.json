{
  "openapi": "3.0.1",
  "info": {
    "title": "Dynamic API Specification",
    "description": "This is a dynamically generated API specification for all endpoints existing on the current project.",
    "version": "11.3.5"
  },
  "servers": [
    {
      "url": "https://test.rocket-meals.de/rocket-meals/api",
      "description": "Your current Directus instance."
    }
  ],
  "paths": {
    "/assets/{id}": {
      "get": {
        "tags": [
          "Assets"
        ],
        "operationId": "getAsset",
        "summary": "Get an Asset",
        "description": "Image typed files can be dynamically resized and transformed to fit any need.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "query",
            "description": "The key of the asset size configured in settings.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transforms",
            "in": "query",
            "description": "A JSON array of image transformations",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "download",
            "in": "query",
            "description": "Download the asset to your computer",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Retrieve a Temporary Access Token",
        "description": "Retrieve a Temporary Access Token",
        "tags": [
          "Authentication"
        ],
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "admin@example.com",
                    "description": "Email address of the user you're retrieving the access token for."
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of the user.",
                    "format": "password",
                    "example": "password"
                  },
                  "mode": {
                    "type": "string",
                    "enum": [
                      "json",
                      "cookie",
                      "session"
                    ],
                    "default": "json",
                    "description": "Whether to retrieve the refresh token in the JSON response, or in a httpOnly cookie."
                  },
                  "otp": {
                    "type": "string",
                    "description": "The user's one-time-password (if MFA is enabled)."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful authentification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "access_token": {
                          "type": "string",
                          "example": "eyJhbGciOiJI..."
                        },
                        "expires": {
                          "type": "integer",
                          "example": 900
                        },
                        "refresh_token": {
                          "type": "string",
                          "example": "yuOJkjdPXMd..."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "summary": "Refresh Token",
        "description": "Refresh a Temporary Access Token.",
        "tags": [
          "Authentication"
        ],
        "operationId": "refresh",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refresh_token": {
                    "type": "string",
                    "example": "eyJ0eXAiOiJKV...",
                    "description": "JWT access token you want to refresh. This token can't be expired."
                  },
                  "mode": {
                    "type": "string",
                    "enum": [
                      "json",
                      "cookie",
                      "session"
                    ],
                    "default": "json",
                    "description": "Whether to submit and retrieve the refresh token in the JSON response, or in a httpOnly cookie."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "access_token": {
                          "type": "string",
                          "example": "eyJhbGciOiJI..."
                        },
                        "expires": {
                          "type": "integer",
                          "example": 900
                        },
                        "refresh_token": {
                          "type": "string",
                          "example": "Gy-caJMpmGTA..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "Log Out",
        "description": "Log Out",
        "tags": [
          "Authentication"
        ],
        "operationId": "logout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refresh_token": {
                    "type": "string",
                    "example": "eyJ0eXAiOiJKV...",
                    "description": "The refresh token to invalidate. If you have the refresh token in a cookie through /auth/login, you don't have to submit it here."
                  },
                  "mode": {
                    "type": "string",
                    "enum": [
                      "json",
                      "cookie",
                      "session"
                    ],
                    "description": "Whether the refresh token is submitted in the JSON response, or in a httpOnly cookie."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request successful"
          }
        }
      }
    },
    "/auth/password/request": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "operationId": "passwordRequest",
        "summary": "Request a Password Reset",
        "description": "Request a reset password email to be send.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "admin@example.com",
                    "description": "Email address of the user you're requesting a reset for."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/auth/password/reset": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "operationId": "passwordReset",
        "summary": "Reset a Password",
        "description": "The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "password"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "eyJ0eXAiOiJKV1Qi...",
                    "description": "One-time use JWT token that is used to verify the user."
                  },
                  "password": {
                    "type": "string",
                    "example": "password",
                    "format": "password",
                    "description": "New password for the user."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/auth/oauth": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "operationId": "oauth",
        "summary": "List OAuth Providers",
        "description": "List configured OAuth providers.",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "public": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "example": [
                        "github",
                        "facebook"
                      ],
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/auth/oauth/{provider}": {
      "get": {
        "summary": "Authenticated using an OAuth provider",
        "description": "Start OAuth flow using the specified provider",
        "tags": [
          "Authentication"
        ],
        "operationId": "oauthProvider",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "Key of the activated OAuth provider.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect",
            "in": "query",
            "required": false,
            "description": "Where to redirect on successful login.<br/>If set the authentication details are set inside cookies otherwise a JSON is returned.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "public": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/schema/snapshot": {
      "get": {
        "summary": "Retrieve Schema Snapshot",
        "description": "Retrieve the current schema. This endpoint is only available to admin users.",
        "operationId": "schemaSnapshot",
        "parameters": [
          {
            "$ref": "#/components/parameters/Export"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Schema"
                    }
                  }
                }
              },
              "text/yaml": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "tags": [
          "Schema"
        ]
      }
    },
    "/schema/apply": {
      "post": {
        "summary": "Apply Schema Difference",
        "description": "Update the instance's schema by passing the diff previously retrieved via `/schema/diff` endpoint in the JSON request body or a JSON/YAML file. This endpoint is only available to admin users.",
        "operationId": "schemaApply",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Diff"
                  }
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful request"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "tags": [
          "Schema"
        ]
      }
    },
    "/schema/diff": {
      "post": {
        "summary": "Retrieve Schema Difference",
        "description": "Compare the current instance's schema against the schema snapshot in JSON request body or a JSON/YAML file and retrieve the difference. This endpoint is only available to admin users.",
        "operationId": "schemaDiff",
        "parameters": [
          {
            "name": "force",
            "description": "Bypass version and database vendor restrictions.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Schema"
                  }
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Diff"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No schema difference."
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "tags": [
          "Schema"
        ]
      }
    },
    "/server/info": {
      "get": {
        "summary": "System Info",
        "description": "Perform a system status check and return the options.",
        "operationId": "serverInfo",
        "parameters": [
          {
            "description": "The first time you create a project, the provided token will be saved and required for subsequent project installs. It can also be found and configured in `/config/__api.json` on your server.",
            "in": "query",
            "name": "super_admin_token",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Server"
        ]
      }
    },
    "/server/ping": {
      "get": {
        "summary": "Ping",
        "description": "Ping, pong. Ping.. pong.",
        "operationId": "ping",
        "responses": {
          "200": {
            "content": {
              "application/text": {
                "schema": {
                  "type": "string",
                  "pattern": "pong",
                  "example": "pong"
                }
              }
            },
            "description": "Successful request"
          }
        },
        "tags": [
          "Server"
        ]
      }
    },
    "/utils/hash/generate": {
      "post": {
        "summary": "Hash a string",
        "description": "Generate a hash for a given string.",
        "operationId": "hash-generate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "string": {
                    "description": "String to hash.",
                    "type": "string"
                  }
                },
                "required": [
                  "string"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "string",
                      "example": "$argon2i$v=19$m=4096,t=3,p=1$pOyIa/zmRAjCVLb2f7kOyg$DasoO6LzMM+6iKfzCDq6JbsYsZWLSm33p7i9NxL9mDc"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          }
        },
        "tags": [
          "Utilities"
        ]
      }
    },
    "/utils/hash/verify": {
      "post": {
        "summary": "Hash a string",
        "description": "Generate a hash for a given string.",
        "operationId": "hash-verify",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "string": {
                    "description": "String to hash.",
                    "type": "string"
                  },
                  "hash": {
                    "description": "Hash you want to verify against.",
                    "type": "string"
                  }
                },
                "required": [
                  "string",
                  "hash"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "boolean",
                      "example": true
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          }
        },
        "tags": [
          "Utilities"
        ]
      }
    },
    "/utils/sort/{collection}": {
      "post": {
        "summary": "Sort Items",
        "description": "Re-sort items in collection based on start and to value of item",
        "operationId": "sort",
        "parameters": [
          {
            "description": "Collection identifier",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "item": {
                    "description": "Primary key of item to move",
                    "type": "number"
                  },
                  "to": {
                    "description": "Primary key of item where to move the current item to",
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request"
          }
        },
        "tags": [
          "Utilities"
        ]
      }
    },
    "/utils/import/{collection}": {
      "post": {
        "summary": "Import Items",
        "description": "Import multiple records from a JSON or CSV file into a collection.",
        "operationId": "import",
        "parameters": [
          {
            "description": "Collection identifier",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request"
          }
        },
        "tags": [
          "Utilities"
        ]
      }
    },
    "/utils/export/{collection}": {
      "post": {
        "summary": "Export Items",
        "description": "Export a larger data set to a file in the File Library",
        "operationId": "export",
        "parameters": [
          {
            "description": "Collection identifier",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "format": {
                    "description": "What file format to save the export to. One of csv, xml, json",
                    "type": "string",
                    "enum": [
                      "csv",
                      "xml",
                      "json"
                    ]
                  },
                  "query": {
                    "$ref": "#/components/schemas/Query"
                  },
                  "file": {
                    "$ref": "#/components/schemas/Files"
                  }
                },
                "required": [
                  "format",
                  "query",
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request"
          }
        },
        "tags": [
          "Utilities"
        ]
      }
    },
    "/utils/cache/clear": {
      "post": {
        "summary": "Clear Cache",
        "description": "Resets both the data and schema cache of Directus.",
        "operationId": "clear-cache",
        "responses": {
          "200": {
            "description": "Successful request"
          }
        },
        "tags": [
          "Utilities"
        ]
      }
    },
    "/utils/random/string": {
      "get": {
        "summary": "Get a Random String",
        "description": "Returns a random string of given length.",
        "operationId": "random",
        "parameters": [
          {
            "description": "Length of the random string.",
            "in": "query",
            "name": "length",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "string",
                      "example": "1>M3+4oh.S"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          }
        },
        "tags": [
          "Utilities"
        ]
      }
    },
    "/items/app_elements": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new app_elements item.",
        "tags": [
          "Items",
          "ItemsAppElements"
        ],
        "operationId": "createItemsAppElements",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsAppElements"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsAppElements"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsAppElements"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the app_elements items.",
        "tags": [
          "Items",
          "ItemsAppElements"
        ],
        "operationId": "readItemsAppElements",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsAppElements"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple app_elements items at the same time.",
        "tags": [
          "Items",
          "ItemsAppElements"
        ],
        "operationId": "updateItemsAppElements",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsAppElements"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsAppElements"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsAppElements"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing app_elements items.",
        "tags": [
          "Items",
          "ItemsAppElements"
        ],
        "operationId": "deleteItemsAppElements",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/app_elements/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single app_elements item by unique identifier.",
        "tags": [
          "Items",
          "ItemsAppElements"
        ],
        "operationId": "readSingleItemsAppElements",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsAppElements"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing app_elements item.",
        "tags": [
          "Items",
          "ItemsAppElements"
        ],
        "operationId": "updateSingleItemsAppElements",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsAppElements"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsAppElements"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing app_elements item.",
        "tags": [
          "Items",
          "ItemsAppElements"
        ],
        "operationId": "deleteSingleItemsAppElements",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/app_settings": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new app_settings item.",
        "tags": [
          "Items",
          "ItemsAppSettings"
        ],
        "operationId": "createItemsAppSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsAppSettings"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsAppSettings"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsAppSettings"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the app_settings items.",
        "tags": [
          "Items",
          "ItemsAppSettings"
        ],
        "operationId": "readItemsAppSettings",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsAppSettings"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple app_settings items at the same time.",
        "tags": [
          "Items",
          "ItemsAppSettings"
        ],
        "operationId": "updateItemsAppSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsAppSettings"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsAppSettings"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsAppSettings"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing app_settings items.",
        "tags": [
          "Items",
          "ItemsAppSettings"
        ],
        "operationId": "deleteItemsAppSettings",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/app_settings/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single app_settings item by unique identifier.",
        "tags": [
          "Items",
          "ItemsAppSettings"
        ],
        "operationId": "readSingleItemsAppSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsAppSettings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing app_settings item.",
        "tags": [
          "Items",
          "ItemsAppSettings"
        ],
        "operationId": "updateSingleItemsAppSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsAppSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsAppSettings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing app_settings item.",
        "tags": [
          "Items",
          "ItemsAppSettings"
        ],
        "operationId": "deleteSingleItemsAppSettings",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/app_settings_housing_translations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new app_settings_housing_translations item.",
        "tags": [
          "Items",
          "ItemsAppSettingsHousingTranslations"
        ],
        "operationId": "createItemsAppSettingsHousingTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsAppSettingsHousingTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsAppSettingsHousingTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsAppSettingsHousingTranslations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the app_settings_housing_translations items.",
        "tags": [
          "Items",
          "ItemsAppSettingsHousingTranslations"
        ],
        "operationId": "readItemsAppSettingsHousingTranslations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsAppSettingsHousingTranslations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple app_settings_housing_translations items at the same time.",
        "tags": [
          "Items",
          "ItemsAppSettingsHousingTranslations"
        ],
        "operationId": "updateItemsAppSettingsHousingTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsAppSettingsHousingTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsAppSettingsHousingTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsAppSettingsHousingTranslations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing app_settings_housing_translations items.",
        "tags": [
          "Items",
          "ItemsAppSettingsHousingTranslations"
        ],
        "operationId": "deleteItemsAppSettingsHousingTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/app_settings_housing_translations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single app_settings_housing_translations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsAppSettingsHousingTranslations"
        ],
        "operationId": "readSingleItemsAppSettingsHousingTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsAppSettingsHousingTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing app_settings_housing_translations item.",
        "tags": [
          "Items",
          "ItemsAppSettingsHousingTranslations"
        ],
        "operationId": "updateSingleItemsAppSettingsHousingTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsAppSettingsHousingTranslations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsAppSettingsHousingTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing app_settings_housing_translations item.",
        "tags": [
          "Items",
          "ItemsAppSettingsHousingTranslations"
        ],
        "operationId": "deleteSingleItemsAppSettingsHousingTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/app_settings_login_screen_translations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new app_settings_login_screen_translations item.",
        "tags": [
          "Items",
          "ItemsAppSettingsLoginScreenTranslations"
        ],
        "operationId": "createItemsAppSettingsLoginScreenTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsAppSettingsLoginScreenTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsAppSettingsLoginScreenTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsAppSettingsLoginScreenTranslations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the app_settings_login_screen_translations items.",
        "tags": [
          "Items",
          "ItemsAppSettingsLoginScreenTranslations"
        ],
        "operationId": "readItemsAppSettingsLoginScreenTranslations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsAppSettingsLoginScreenTranslations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple app_settings_login_screen_translations items at the same time.",
        "tags": [
          "Items",
          "ItemsAppSettingsLoginScreenTranslations"
        ],
        "operationId": "updateItemsAppSettingsLoginScreenTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsAppSettingsLoginScreenTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsAppSettingsLoginScreenTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsAppSettingsLoginScreenTranslations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing app_settings_login_screen_translations items.",
        "tags": [
          "Items",
          "ItemsAppSettingsLoginScreenTranslations"
        ],
        "operationId": "deleteItemsAppSettingsLoginScreenTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/app_settings_login_screen_translations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single app_settings_login_screen_translations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsAppSettingsLoginScreenTranslations"
        ],
        "operationId": "readSingleItemsAppSettingsLoginScreenTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsAppSettingsLoginScreenTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing app_settings_login_screen_translations item.",
        "tags": [
          "Items",
          "ItemsAppSettingsLoginScreenTranslations"
        ],
        "operationId": "updateSingleItemsAppSettingsLoginScreenTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsAppSettingsLoginScreenTranslations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsAppSettingsLoginScreenTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing app_settings_login_screen_translations item.",
        "tags": [
          "Items",
          "ItemsAppSettingsLoginScreenTranslations"
        ],
        "operationId": "deleteSingleItemsAppSettingsLoginScreenTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/buildings_attributes": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new buildings_attributes item.",
        "tags": [
          "Items",
          "ItemsBuildingsAttributes"
        ],
        "operationId": "createItemsBuildingsAttributes",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBuildingsAttributes"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBuildingsAttributes"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsBuildingsAttributes"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the buildings_attributes items.",
        "tags": [
          "Items",
          "ItemsBuildingsAttributes"
        ],
        "operationId": "readItemsBuildingsAttributes",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBuildingsAttributes"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple buildings_attributes items at the same time.",
        "tags": [
          "Items",
          "ItemsBuildingsAttributes"
        ],
        "operationId": "updateItemsBuildingsAttributes",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBuildingsAttributes"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBuildingsAttributes"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsBuildingsAttributes"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing buildings_attributes items.",
        "tags": [
          "Items",
          "ItemsBuildingsAttributes"
        ],
        "operationId": "deleteItemsBuildingsAttributes",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/buildings_attributes/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single buildings_attributes item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBuildingsAttributes"
        ],
        "operationId": "readSingleItemsBuildingsAttributes",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBuildingsAttributes"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing buildings_attributes item.",
        "tags": [
          "Items",
          "ItemsBuildingsAttributes"
        ],
        "operationId": "updateSingleItemsBuildingsAttributes",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsBuildingsAttributes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBuildingsAttributes"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing buildings_attributes item.",
        "tags": [
          "Items",
          "ItemsBuildingsAttributes"
        ],
        "operationId": "deleteSingleItemsBuildingsAttributes",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/buildings_businesshours": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new buildings_businesshours item.",
        "tags": [
          "Items",
          "ItemsBuildingsBusinesshours"
        ],
        "operationId": "createItemsBuildingsBusinesshours",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBuildingsBusinesshours"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBuildingsBusinesshours"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsBuildingsBusinesshours"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the buildings_businesshours items.",
        "tags": [
          "Items",
          "ItemsBuildingsBusinesshours"
        ],
        "operationId": "readItemsBuildingsBusinesshours",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBuildingsBusinesshours"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple buildings_businesshours items at the same time.",
        "tags": [
          "Items",
          "ItemsBuildingsBusinesshours"
        ],
        "operationId": "updateItemsBuildingsBusinesshours",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBuildingsBusinesshours"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBuildingsBusinesshours"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsBuildingsBusinesshours"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing buildings_businesshours items.",
        "tags": [
          "Items",
          "ItemsBuildingsBusinesshours"
        ],
        "operationId": "deleteItemsBuildingsBusinesshours",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/buildings_businesshours/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single buildings_businesshours item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBuildingsBusinesshours"
        ],
        "operationId": "readSingleItemsBuildingsBusinesshours",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBuildingsBusinesshours"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing buildings_businesshours item.",
        "tags": [
          "Items",
          "ItemsBuildingsBusinesshours"
        ],
        "operationId": "updateSingleItemsBuildingsBusinesshours",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsBuildingsBusinesshours"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBuildingsBusinesshours"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing buildings_businesshours item.",
        "tags": [
          "Items",
          "ItemsBuildingsBusinesshours"
        ],
        "operationId": "deleteSingleItemsBuildingsBusinesshours",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/auto_translation_settings": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new auto_translation_settings item.",
        "tags": [
          "Items",
          "ItemsAutoTranslationSettings"
        ],
        "operationId": "createItemsAutoTranslationSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsAutoTranslationSettings"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsAutoTranslationSettings"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsAutoTranslationSettings"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the auto_translation_settings items.",
        "tags": [
          "Items",
          "ItemsAutoTranslationSettings"
        ],
        "operationId": "readItemsAutoTranslationSettings",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsAutoTranslationSettings"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple auto_translation_settings items at the same time.",
        "tags": [
          "Items",
          "ItemsAutoTranslationSettings"
        ],
        "operationId": "updateItemsAutoTranslationSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsAutoTranslationSettings"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsAutoTranslationSettings"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsAutoTranslationSettings"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing auto_translation_settings items.",
        "tags": [
          "Items",
          "ItemsAutoTranslationSettings"
        ],
        "operationId": "deleteItemsAutoTranslationSettings",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/auto_translation_settings/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single auto_translation_settings item by unique identifier.",
        "tags": [
          "Items",
          "ItemsAutoTranslationSettings"
        ],
        "operationId": "readSingleItemsAutoTranslationSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsAutoTranslationSettings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing auto_translation_settings item.",
        "tags": [
          "Items",
          "ItemsAutoTranslationSettings"
        ],
        "operationId": "updateSingleItemsAutoTranslationSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsAutoTranslationSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsAutoTranslationSettings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing auto_translation_settings item.",
        "tags": [
          "Items",
          "ItemsAutoTranslationSettings"
        ],
        "operationId": "deleteSingleItemsAutoTranslationSettings",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/app_feedbacks": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new app_feedbacks item.",
        "tags": [
          "Items",
          "ItemsAppFeedbacks"
        ],
        "operationId": "createItemsAppFeedbacks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsAppFeedbacks"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsAppFeedbacks"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsAppFeedbacks"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the app_feedbacks items.",
        "tags": [
          "Items",
          "ItemsAppFeedbacks"
        ],
        "operationId": "readItemsAppFeedbacks",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsAppFeedbacks"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple app_feedbacks items at the same time.",
        "tags": [
          "Items",
          "ItemsAppFeedbacks"
        ],
        "operationId": "updateItemsAppFeedbacks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsAppFeedbacks"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsAppFeedbacks"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsAppFeedbacks"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing app_feedbacks items.",
        "tags": [
          "Items",
          "ItemsAppFeedbacks"
        ],
        "operationId": "deleteItemsAppFeedbacks",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/app_feedbacks/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single app_feedbacks item by unique identifier.",
        "tags": [
          "Items",
          "ItemsAppFeedbacks"
        ],
        "operationId": "readSingleItemsAppFeedbacks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsAppFeedbacks"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing app_feedbacks item.",
        "tags": [
          "Items",
          "ItemsAppFeedbacks"
        ],
        "operationId": "updateSingleItemsAppFeedbacks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsAppFeedbacks"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsAppFeedbacks"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing app_feedbacks item.",
        "tags": [
          "Items",
          "ItemsAppFeedbacks"
        ],
        "operationId": "deleteSingleItemsAppFeedbacks",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/businesshours_groups": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new businesshours_groups item.",
        "tags": [
          "Items",
          "ItemsBusinesshoursGroups"
        ],
        "operationId": "createItemsBusinesshoursGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBusinesshoursGroups"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBusinesshoursGroups"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsBusinesshoursGroups"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the businesshours_groups items.",
        "tags": [
          "Items",
          "ItemsBusinesshoursGroups"
        ],
        "operationId": "readItemsBusinesshoursGroups",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBusinesshoursGroups"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple businesshours_groups items at the same time.",
        "tags": [
          "Items",
          "ItemsBusinesshoursGroups"
        ],
        "operationId": "updateItemsBusinesshoursGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBusinesshoursGroups"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBusinesshoursGroups"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsBusinesshoursGroups"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing businesshours_groups items.",
        "tags": [
          "Items",
          "ItemsBusinesshoursGroups"
        ],
        "operationId": "deleteItemsBusinesshoursGroups",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/businesshours_groups/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single businesshours_groups item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBusinesshoursGroups"
        ],
        "operationId": "readSingleItemsBusinesshoursGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBusinesshoursGroups"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing businesshours_groups item.",
        "tags": [
          "Items",
          "ItemsBusinesshoursGroups"
        ],
        "operationId": "updateSingleItemsBusinesshoursGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsBusinesshoursGroups"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBusinesshoursGroups"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing businesshours_groups item.",
        "tags": [
          "Items",
          "ItemsBusinesshoursGroups"
        ],
        "operationId": "deleteSingleItemsBusinesshoursGroups",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/businesshours_groups_translations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new businesshours_groups_translations item.",
        "tags": [
          "Items",
          "ItemsBusinesshoursGroupsTranslations"
        ],
        "operationId": "createItemsBusinesshoursGroupsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBusinesshoursGroupsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBusinesshoursGroupsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsBusinesshoursGroupsTranslations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the businesshours_groups_translations items.",
        "tags": [
          "Items",
          "ItemsBusinesshoursGroupsTranslations"
        ],
        "operationId": "readItemsBusinesshoursGroupsTranslations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBusinesshoursGroupsTranslations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple businesshours_groups_translations items at the same time.",
        "tags": [
          "Items",
          "ItemsBusinesshoursGroupsTranslations"
        ],
        "operationId": "updateItemsBusinesshoursGroupsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBusinesshoursGroupsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBusinesshoursGroupsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsBusinesshoursGroupsTranslations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing businesshours_groups_translations items.",
        "tags": [
          "Items",
          "ItemsBusinesshoursGroupsTranslations"
        ],
        "operationId": "deleteItemsBusinesshoursGroupsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/businesshours_groups_translations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single businesshours_groups_translations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBusinesshoursGroupsTranslations"
        ],
        "operationId": "readSingleItemsBusinesshoursGroupsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBusinesshoursGroupsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing businesshours_groups_translations item.",
        "tags": [
          "Items",
          "ItemsBusinesshoursGroupsTranslations"
        ],
        "operationId": "updateSingleItemsBusinesshoursGroupsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsBusinesshoursGroupsTranslations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBusinesshoursGroupsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing businesshours_groups_translations item.",
        "tags": [
          "Items",
          "ItemsBusinesshoursGroupsTranslations"
        ],
        "operationId": "deleteSingleItemsBusinesshoursGroupsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/canteen_food_feedback_report_schedules_canteens": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new canteen_food_feedback_report_schedules_canteens item.",
        "tags": [
          "Items",
          "ItemsCanteenFoodFeedbackReportSchedulesCanteens"
        ],
        "operationId": "createItemsCanteenFoodFeedbackReportSchedulesCanteens",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedulesCanteens"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedulesCanteens"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedulesCanteens"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the canteen_food_feedback_report_schedules_canteens items.",
        "tags": [
          "Items",
          "ItemsCanteenFoodFeedbackReportSchedulesCanteens"
        ],
        "operationId": "readItemsCanteenFoodFeedbackReportSchedulesCanteens",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedulesCanteens"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple canteen_food_feedback_report_schedules_canteens items at the same time.",
        "tags": [
          "Items",
          "ItemsCanteenFoodFeedbackReportSchedulesCanteens"
        ],
        "operationId": "updateItemsCanteenFoodFeedbackReportSchedulesCanteens",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedulesCanteens"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedulesCanteens"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedulesCanteens"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing canteen_food_feedback_report_schedules_canteens items.",
        "tags": [
          "Items",
          "ItemsCanteenFoodFeedbackReportSchedulesCanteens"
        ],
        "operationId": "deleteItemsCanteenFoodFeedbackReportSchedulesCanteens",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/canteen_food_feedback_report_schedules_canteens/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single canteen_food_feedback_report_schedules_canteens item by unique identifier.",
        "tags": [
          "Items",
          "ItemsCanteenFoodFeedbackReportSchedulesCanteens"
        ],
        "operationId": "readSingleItemsCanteenFoodFeedbackReportSchedulesCanteens",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedulesCanteens"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing canteen_food_feedback_report_schedules_canteens item.",
        "tags": [
          "Items",
          "ItemsCanteenFoodFeedbackReportSchedulesCanteens"
        ],
        "operationId": "updateSingleItemsCanteenFoodFeedbackReportSchedulesCanteens",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedulesCanteens"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedulesCanteens"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing canteen_food_feedback_report_schedules_canteens item.",
        "tags": [
          "Items",
          "ItemsCanteenFoodFeedbackReportSchedulesCanteens"
        ],
        "operationId": "deleteSingleItemsCanteenFoodFeedbackReportSchedulesCanteens",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/businesshours": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new businesshours item.",
        "tags": [
          "Items",
          "ItemsBusinesshours"
        ],
        "operationId": "createItemsBusinesshours",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBusinesshours"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBusinesshours"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsBusinesshours"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the businesshours items.",
        "tags": [
          "Items",
          "ItemsBusinesshours"
        ],
        "operationId": "readItemsBusinesshours",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBusinesshours"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple businesshours items at the same time.",
        "tags": [
          "Items",
          "ItemsBusinesshours"
        ],
        "operationId": "updateItemsBusinesshours",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBusinesshours"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBusinesshours"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsBusinesshours"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing businesshours items.",
        "tags": [
          "Items",
          "ItemsBusinesshours"
        ],
        "operationId": "deleteItemsBusinesshours",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/businesshours/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single businesshours item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBusinesshours"
        ],
        "operationId": "readSingleItemsBusinesshours",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBusinesshours"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing businesshours item.",
        "tags": [
          "Items",
          "ItemsBusinesshours"
        ],
        "operationId": "updateSingleItemsBusinesshours",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsBusinesshours"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBusinesshours"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing businesshours item.",
        "tags": [
          "Items",
          "ItemsBusinesshours"
        ],
        "operationId": "deleteSingleItemsBusinesshours",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/buildings_translations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new buildings_translations item.",
        "tags": [
          "Items",
          "ItemsBuildingsTranslations"
        ],
        "operationId": "createItemsBuildingsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBuildingsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBuildingsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsBuildingsTranslations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the buildings_translations items.",
        "tags": [
          "Items",
          "ItemsBuildingsTranslations"
        ],
        "operationId": "readItemsBuildingsTranslations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBuildingsTranslations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple buildings_translations items at the same time.",
        "tags": [
          "Items",
          "ItemsBuildingsTranslations"
        ],
        "operationId": "updateItemsBuildingsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBuildingsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBuildingsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsBuildingsTranslations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing buildings_translations items.",
        "tags": [
          "Items",
          "ItemsBuildingsTranslations"
        ],
        "operationId": "deleteItemsBuildingsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/buildings_translations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single buildings_translations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBuildingsTranslations"
        ],
        "operationId": "readSingleItemsBuildingsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBuildingsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing buildings_translations item.",
        "tags": [
          "Items",
          "ItemsBuildingsTranslations"
        ],
        "operationId": "updateSingleItemsBuildingsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsBuildingsTranslations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBuildingsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing buildings_translations item.",
        "tags": [
          "Items",
          "ItemsBuildingsTranslations"
        ],
        "operationId": "deleteSingleItemsBuildingsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/canteen_food_feedback_report_schedules": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new canteen_food_feedback_report_schedules item.",
        "tags": [
          "Items",
          "ItemsCanteenFoodFeedbackReportSchedules"
        ],
        "operationId": "createItemsCanteenFoodFeedbackReportSchedules",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedules"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedules"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedules"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the canteen_food_feedback_report_schedules items.",
        "tags": [
          "Items",
          "ItemsCanteenFoodFeedbackReportSchedules"
        ],
        "operationId": "readItemsCanteenFoodFeedbackReportSchedules",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedules"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple canteen_food_feedback_report_schedules items at the same time.",
        "tags": [
          "Items",
          "ItemsCanteenFoodFeedbackReportSchedules"
        ],
        "operationId": "updateItemsCanteenFoodFeedbackReportSchedules",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedules"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedules"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedules"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing canteen_food_feedback_report_schedules items.",
        "tags": [
          "Items",
          "ItemsCanteenFoodFeedbackReportSchedules"
        ],
        "operationId": "deleteItemsCanteenFoodFeedbackReportSchedules",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/canteen_food_feedback_report_schedules/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single canteen_food_feedback_report_schedules item by unique identifier.",
        "tags": [
          "Items",
          "ItemsCanteenFoodFeedbackReportSchedules"
        ],
        "operationId": "readSingleItemsCanteenFoodFeedbackReportSchedules",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedules"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing canteen_food_feedback_report_schedules item.",
        "tags": [
          "Items",
          "ItemsCanteenFoodFeedbackReportSchedules"
        ],
        "operationId": "updateSingleItemsCanteenFoodFeedbackReportSchedules",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedules"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedules"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing canteen_food_feedback_report_schedules item.",
        "tags": [
          "Items",
          "ItemsCanteenFoodFeedbackReportSchedules"
        ],
        "operationId": "deleteSingleItemsCanteenFoodFeedbackReportSchedules",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/canteen_food_feedback_report_schedules_report_recipients": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new canteen_food_feedback_report_schedules_report_recipients item.",
        "tags": [
          "Items",
          "ItemsCanteenFoodFeedbackReportSchedulesReportRecipients"
        ],
        "operationId": "createItemsCanteenFoodFeedbackReportSchedulesReportRecipients",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedulesReportRecipients"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedulesReportRecipients"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedulesReportRecipients"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the canteen_food_feedback_report_schedules_report_recipients items.",
        "tags": [
          "Items",
          "ItemsCanteenFoodFeedbackReportSchedulesReportRecipients"
        ],
        "operationId": "readItemsCanteenFoodFeedbackReportSchedulesReportRecipients",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedulesReportRecipients"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple canteen_food_feedback_report_schedules_report_recipients items at the same time.",
        "tags": [
          "Items",
          "ItemsCanteenFoodFeedbackReportSchedulesReportRecipients"
        ],
        "operationId": "updateItemsCanteenFoodFeedbackReportSchedulesReportRecipients",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedulesReportRecipients"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedulesReportRecipients"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedulesReportRecipients"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing canteen_food_feedback_report_schedules_report_recipients items.",
        "tags": [
          "Items",
          "ItemsCanteenFoodFeedbackReportSchedulesReportRecipients"
        ],
        "operationId": "deleteItemsCanteenFoodFeedbackReportSchedulesReportRecipients",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/canteen_food_feedback_report_schedules_report_recipients/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single canteen_food_feedback_report_schedules_report_recipients item by unique identifier.",
        "tags": [
          "Items",
          "ItemsCanteenFoodFeedbackReportSchedulesReportRecipients"
        ],
        "operationId": "readSingleItemsCanteenFoodFeedbackReportSchedulesReportRecipients",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedulesReportRecipients"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing canteen_food_feedback_report_schedules_report_recipients item.",
        "tags": [
          "Items",
          "ItemsCanteenFoodFeedbackReportSchedulesReportRecipients"
        ],
        "operationId": "updateSingleItemsCanteenFoodFeedbackReportSchedulesReportRecipients",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedulesReportRecipients"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedulesReportRecipients"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing canteen_food_feedback_report_schedules_report_recipients item.",
        "tags": [
          "Items",
          "ItemsCanteenFoodFeedbackReportSchedulesReportRecipients"
        ],
        "operationId": "deleteSingleItemsCanteenFoodFeedbackReportSchedulesReportRecipients",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/canteens_feedbacks_labels_translations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new canteens_feedbacks_labels_translations item.",
        "tags": [
          "Items",
          "ItemsCanteensFeedbacksLabelsTranslations"
        ],
        "operationId": "createItemsCanteensFeedbacksLabelsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabelsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabelsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabelsTranslations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the canteens_feedbacks_labels_translations items.",
        "tags": [
          "Items",
          "ItemsCanteensFeedbacksLabelsTranslations"
        ],
        "operationId": "readItemsCanteensFeedbacksLabelsTranslations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabelsTranslations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple canteens_feedbacks_labels_translations items at the same time.",
        "tags": [
          "Items",
          "ItemsCanteensFeedbacksLabelsTranslations"
        ],
        "operationId": "updateItemsCanteensFeedbacksLabelsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabelsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabelsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabelsTranslations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing canteens_feedbacks_labels_translations items.",
        "tags": [
          "Items",
          "ItemsCanteensFeedbacksLabelsTranslations"
        ],
        "operationId": "deleteItemsCanteensFeedbacksLabelsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/canteens_feedbacks_labels_translations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single canteens_feedbacks_labels_translations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsCanteensFeedbacksLabelsTranslations"
        ],
        "operationId": "readSingleItemsCanteensFeedbacksLabelsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabelsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing canteens_feedbacks_labels_translations item.",
        "tags": [
          "Items",
          "ItemsCanteensFeedbacksLabelsTranslations"
        ],
        "operationId": "updateSingleItemsCanteensFeedbacksLabelsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabelsTranslations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabelsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing canteens_feedbacks_labels_translations item.",
        "tags": [
          "Items",
          "ItemsCanteensFeedbacksLabelsTranslations"
        ],
        "operationId": "deleteSingleItemsCanteensFeedbacksLabelsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/canteens_foodservice_hours": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new canteens_foodservice_hours item.",
        "tags": [
          "Items",
          "ItemsCanteensFoodserviceHours"
        ],
        "operationId": "createItemsCanteensFoodserviceHours",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCanteensFoodserviceHours"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCanteensFoodserviceHours"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCanteensFoodserviceHours"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the canteens_foodservice_hours items.",
        "tags": [
          "Items",
          "ItemsCanteensFoodserviceHours"
        ],
        "operationId": "readItemsCanteensFoodserviceHours",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsCanteensFoodserviceHours"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple canteens_foodservice_hours items at the same time.",
        "tags": [
          "Items",
          "ItemsCanteensFoodserviceHours"
        ],
        "operationId": "updateItemsCanteensFoodserviceHours",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCanteensFoodserviceHours"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCanteensFoodserviceHours"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCanteensFoodserviceHours"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing canteens_foodservice_hours items.",
        "tags": [
          "Items",
          "ItemsCanteensFoodserviceHours"
        ],
        "operationId": "deleteItemsCanteensFoodserviceHours",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/canteens_foodservice_hours/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single canteens_foodservice_hours item by unique identifier.",
        "tags": [
          "Items",
          "ItemsCanteensFoodserviceHours"
        ],
        "operationId": "readSingleItemsCanteensFoodserviceHours",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCanteensFoodserviceHours"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing canteens_foodservice_hours item.",
        "tags": [
          "Items",
          "ItemsCanteensFoodserviceHours"
        ],
        "operationId": "updateSingleItemsCanteensFoodserviceHours",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsCanteensFoodserviceHours"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCanteensFoodserviceHours"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing canteens_foodservice_hours item.",
        "tags": [
          "Items",
          "ItemsCanteensFoodserviceHours"
        ],
        "operationId": "deleteSingleItemsCanteensFoodserviceHours",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/cashregisters_transactions": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new cashregisters_transactions item.",
        "tags": [
          "Items",
          "ItemsCashregistersTransactions"
        ],
        "operationId": "createItemsCashregistersTransactions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCashregistersTransactions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCashregistersTransactions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCashregistersTransactions"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the cashregisters_transactions items.",
        "tags": [
          "Items",
          "ItemsCashregistersTransactions"
        ],
        "operationId": "readItemsCashregistersTransactions",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsCashregistersTransactions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple cashregisters_transactions items at the same time.",
        "tags": [
          "Items",
          "ItemsCashregistersTransactions"
        ],
        "operationId": "updateItemsCashregistersTransactions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCashregistersTransactions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCashregistersTransactions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCashregistersTransactions"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing cashregisters_transactions items.",
        "tags": [
          "Items",
          "ItemsCashregistersTransactions"
        ],
        "operationId": "deleteItemsCashregistersTransactions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/cashregisters_transactions/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single cashregisters_transactions item by unique identifier.",
        "tags": [
          "Items",
          "ItemsCashregistersTransactions"
        ],
        "operationId": "readSingleItemsCashregistersTransactions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCashregistersTransactions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing cashregisters_transactions item.",
        "tags": [
          "Items",
          "ItemsCashregistersTransactions"
        ],
        "operationId": "updateSingleItemsCashregistersTransactions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsCashregistersTransactions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCashregistersTransactions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing cashregisters_transactions item.",
        "tags": [
          "Items",
          "ItemsCashregistersTransactions"
        ],
        "operationId": "deleteSingleItemsCashregistersTransactions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/collectible_events": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new collectible_events item.",
        "tags": [
          "Items",
          "ItemsCollectibleEvents"
        ],
        "operationId": "createItemsCollectibleEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCollectibleEvents"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCollectibleEvents"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCollectibleEvents"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the collectible_events items.",
        "tags": [
          "Items",
          "ItemsCollectibleEvents"
        ],
        "operationId": "readItemsCollectibleEvents",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsCollectibleEvents"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple collectible_events items at the same time.",
        "tags": [
          "Items",
          "ItemsCollectibleEvents"
        ],
        "operationId": "updateItemsCollectibleEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCollectibleEvents"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCollectibleEvents"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCollectibleEvents"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing collectible_events items.",
        "tags": [
          "Items",
          "ItemsCollectibleEvents"
        ],
        "operationId": "deleteItemsCollectibleEvents",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/collectible_events/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single collectible_events item by unique identifier.",
        "tags": [
          "Items",
          "ItemsCollectibleEvents"
        ],
        "operationId": "readSingleItemsCollectibleEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCollectibleEvents"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing collectible_events item.",
        "tags": [
          "Items",
          "ItemsCollectibleEvents"
        ],
        "operationId": "updateSingleItemsCollectibleEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsCollectibleEvents"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCollectibleEvents"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing collectible_events item.",
        "tags": [
          "Items",
          "ItemsCollectibleEvents"
        ],
        "operationId": "deleteSingleItemsCollectibleEvents",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/collectible_events_translations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new collectible_events_translations item.",
        "tags": [
          "Items",
          "ItemsCollectibleEventsTranslations"
        ],
        "operationId": "createItemsCollectibleEventsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCollectibleEventsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCollectibleEventsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCollectibleEventsTranslations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the collectible_events_translations items.",
        "tags": [
          "Items",
          "ItemsCollectibleEventsTranslations"
        ],
        "operationId": "readItemsCollectibleEventsTranslations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsCollectibleEventsTranslations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple collectible_events_translations items at the same time.",
        "tags": [
          "Items",
          "ItemsCollectibleEventsTranslations"
        ],
        "operationId": "updateItemsCollectibleEventsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCollectibleEventsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCollectibleEventsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCollectibleEventsTranslations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing collectible_events_translations items.",
        "tags": [
          "Items",
          "ItemsCollectibleEventsTranslations"
        ],
        "operationId": "deleteItemsCollectibleEventsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/collectible_events_translations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single collectible_events_translations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsCollectibleEventsTranslations"
        ],
        "operationId": "readSingleItemsCollectibleEventsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCollectibleEventsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing collectible_events_translations item.",
        "tags": [
          "Items",
          "ItemsCollectibleEventsTranslations"
        ],
        "operationId": "updateSingleItemsCollectibleEventsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsCollectibleEventsTranslations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCollectibleEventsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing collectible_events_translations item.",
        "tags": [
          "Items",
          "ItemsCollectibleEventsTranslations"
        ],
        "operationId": "deleteSingleItemsCollectibleEventsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/collections_dates_last_update": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new collections_dates_last_update item.",
        "tags": [
          "Items",
          "ItemsCollectionsDatesLastUpdate"
        ],
        "operationId": "createItemsCollectionsDatesLastUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCollectionsDatesLastUpdate"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCollectionsDatesLastUpdate"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCollectionsDatesLastUpdate"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the collections_dates_last_update items.",
        "tags": [
          "Items",
          "ItemsCollectionsDatesLastUpdate"
        ],
        "operationId": "readItemsCollectionsDatesLastUpdate",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsCollectionsDatesLastUpdate"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple collections_dates_last_update items at the same time.",
        "tags": [
          "Items",
          "ItemsCollectionsDatesLastUpdate"
        ],
        "operationId": "updateItemsCollectionsDatesLastUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCollectionsDatesLastUpdate"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCollectionsDatesLastUpdate"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCollectionsDatesLastUpdate"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing collections_dates_last_update items.",
        "tags": [
          "Items",
          "ItemsCollectionsDatesLastUpdate"
        ],
        "operationId": "deleteItemsCollectionsDatesLastUpdate",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/collections_dates_last_update/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single collections_dates_last_update item by unique identifier.",
        "tags": [
          "Items",
          "ItemsCollectionsDatesLastUpdate"
        ],
        "operationId": "readSingleItemsCollectionsDatesLastUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCollectionsDatesLastUpdate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing collections_dates_last_update item.",
        "tags": [
          "Items",
          "ItemsCollectionsDatesLastUpdate"
        ],
        "operationId": "updateSingleItemsCollectionsDatesLastUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsCollectionsDatesLastUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCollectionsDatesLastUpdate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing collections_dates_last_update item.",
        "tags": [
          "Items",
          "ItemsCollectionsDatesLastUpdate"
        ],
        "operationId": "deleteSingleItemsCollectionsDatesLastUpdate",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/devices": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new devices item.",
        "tags": [
          "Items",
          "ItemsDevices"
        ],
        "operationId": "createItemsDevices",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsDevices"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsDevices"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsDevices"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the devices items.",
        "tags": [
          "Items",
          "ItemsDevices"
        ],
        "operationId": "readItemsDevices",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsDevices"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple devices items at the same time.",
        "tags": [
          "Items",
          "ItemsDevices"
        ],
        "operationId": "updateItemsDevices",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsDevices"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsDevices"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsDevices"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing devices items.",
        "tags": [
          "Items",
          "ItemsDevices"
        ],
        "operationId": "deleteItemsDevices",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/devices/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single devices item by unique identifier.",
        "tags": [
          "Items",
          "ItemsDevices"
        ],
        "operationId": "readSingleItemsDevices",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsDevices"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing devices item.",
        "tags": [
          "Items",
          "ItemsDevices"
        ],
        "operationId": "updateSingleItemsDevices",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsDevices"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsDevices"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing devices item.",
        "tags": [
          "Items",
          "ItemsDevices"
        ],
        "operationId": "deleteSingleItemsDevices",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/activity": {
      "get": {
        "operationId": "getActivities",
        "summary": "List Activity Actions",
        "description": "Returns a list of activity actions.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Activity"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Activity"
        ]
      }
    },
    "/activity/{id}": {
      "get": {
        "summary": "Retrieve an Activity Action",
        "description": "Retrieves the details of an existing activity action. Provide the primary key of the activity action and Directus will return the corresponding information.",
        "operationId": "getActivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Activity"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Activity"
        ]
      }
    },
    "/items/canteens_feedbacks_labels_entries": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new canteens_feedbacks_labels_entries item.",
        "tags": [
          "Items",
          "ItemsCanteensFeedbacksLabelsEntries"
        ],
        "operationId": "createItemsCanteensFeedbacksLabelsEntries",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabelsEntries"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabelsEntries"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabelsEntries"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the canteens_feedbacks_labels_entries items.",
        "tags": [
          "Items",
          "ItemsCanteensFeedbacksLabelsEntries"
        ],
        "operationId": "readItemsCanteensFeedbacksLabelsEntries",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabelsEntries"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple canteens_feedbacks_labels_entries items at the same time.",
        "tags": [
          "Items",
          "ItemsCanteensFeedbacksLabelsEntries"
        ],
        "operationId": "updateItemsCanteensFeedbacksLabelsEntries",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabelsEntries"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabelsEntries"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabelsEntries"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing canteens_feedbacks_labels_entries items.",
        "tags": [
          "Items",
          "ItemsCanteensFeedbacksLabelsEntries"
        ],
        "operationId": "deleteItemsCanteensFeedbacksLabelsEntries",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/canteens_feedbacks_labels_entries/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single canteens_feedbacks_labels_entries item by unique identifier.",
        "tags": [
          "Items",
          "ItemsCanteensFeedbacksLabelsEntries"
        ],
        "operationId": "readSingleItemsCanteensFeedbacksLabelsEntries",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabelsEntries"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing canteens_feedbacks_labels_entries item.",
        "tags": [
          "Items",
          "ItemsCanteensFeedbacksLabelsEntries"
        ],
        "operationId": "updateSingleItemsCanteensFeedbacksLabelsEntries",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabelsEntries"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabelsEntries"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing canteens_feedbacks_labels_entries item.",
        "tags": [
          "Items",
          "ItemsCanteensFeedbacksLabelsEntries"
        ],
        "operationId": "deleteSingleItemsCanteensFeedbacksLabelsEntries",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/canteens_feedbacks_labels": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new canteens_feedbacks_labels item.",
        "tags": [
          "Items",
          "ItemsCanteensFeedbacksLabels"
        ],
        "operationId": "createItemsCanteensFeedbacksLabels",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabels"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabels"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabels"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the canteens_feedbacks_labels items.",
        "tags": [
          "Items",
          "ItemsCanteensFeedbacksLabels"
        ],
        "operationId": "readItemsCanteensFeedbacksLabels",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabels"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple canteens_feedbacks_labels items at the same time.",
        "tags": [
          "Items",
          "ItemsCanteensFeedbacksLabels"
        ],
        "operationId": "updateItemsCanteensFeedbacksLabels",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabels"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabels"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabels"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing canteens_feedbacks_labels items.",
        "tags": [
          "Items",
          "ItemsCanteensFeedbacksLabels"
        ],
        "operationId": "deleteItemsCanteensFeedbacksLabels",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/canteens_feedbacks_labels/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single canteens_feedbacks_labels item by unique identifier.",
        "tags": [
          "Items",
          "ItemsCanteensFeedbacksLabels"
        ],
        "operationId": "readSingleItemsCanteensFeedbacksLabels",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabels"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing canteens_feedbacks_labels item.",
        "tags": [
          "Items",
          "ItemsCanteensFeedbacksLabels"
        ],
        "operationId": "updateSingleItemsCanteensFeedbacksLabels",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabels"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabels"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing canteens_feedbacks_labels item.",
        "tags": [
          "Items",
          "ItemsCanteensFeedbacksLabels"
        ],
        "operationId": "deleteSingleItemsCanteensFeedbacksLabels",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/canteens_foodservice_hours_during_semester_break": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new canteens_foodservice_hours_during_semester_break item.",
        "tags": [
          "Items",
          "ItemsCanteensFoodserviceHoursDuringSemesterBreak"
        ],
        "operationId": "createItemsCanteensFoodserviceHoursDuringSemesterBreak",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCanteensFoodserviceHoursDuringSemesterBreak"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCanteensFoodserviceHoursDuringSemesterBreak"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCanteensFoodserviceHoursDuringSemesterBreak"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the canteens_foodservice_hours_during_semester_break items.",
        "tags": [
          "Items",
          "ItemsCanteensFoodserviceHoursDuringSemesterBreak"
        ],
        "operationId": "readItemsCanteensFoodserviceHoursDuringSemesterBreak",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsCanteensFoodserviceHoursDuringSemesterBreak"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple canteens_foodservice_hours_during_semester_break items at the same time.",
        "tags": [
          "Items",
          "ItemsCanteensFoodserviceHoursDuringSemesterBreak"
        ],
        "operationId": "updateItemsCanteensFoodserviceHoursDuringSemesterBreak",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCanteensFoodserviceHoursDuringSemesterBreak"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCanteensFoodserviceHoursDuringSemesterBreak"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCanteensFoodserviceHoursDuringSemesterBreak"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing canteens_foodservice_hours_during_semester_break items.",
        "tags": [
          "Items",
          "ItemsCanteensFoodserviceHoursDuringSemesterBreak"
        ],
        "operationId": "deleteItemsCanteensFoodserviceHoursDuringSemesterBreak",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/canteens_foodservice_hours_during_semester_break/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single canteens_foodservice_hours_during_semester_break item by unique identifier.",
        "tags": [
          "Items",
          "ItemsCanteensFoodserviceHoursDuringSemesterBreak"
        ],
        "operationId": "readSingleItemsCanteensFoodserviceHoursDuringSemesterBreak",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCanteensFoodserviceHoursDuringSemesterBreak"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing canteens_foodservice_hours_during_semester_break item.",
        "tags": [
          "Items",
          "ItemsCanteensFoodserviceHoursDuringSemesterBreak"
        ],
        "operationId": "updateSingleItemsCanteensFoodserviceHoursDuringSemesterBreak",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsCanteensFoodserviceHoursDuringSemesterBreak"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCanteensFoodserviceHoursDuringSemesterBreak"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing canteens_foodservice_hours_during_semester_break item.",
        "tags": [
          "Items",
          "ItemsCanteensFoodserviceHoursDuringSemesterBreak"
        ],
        "operationId": "deleteSingleItemsCanteensFoodserviceHoursDuringSemesterBreak",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/cashregisters": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new cashregisters item.",
        "tags": [
          "Items",
          "ItemsCashregisters"
        ],
        "operationId": "createItemsCashregisters",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCashregisters"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCashregisters"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCashregisters"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the cashregisters items.",
        "tags": [
          "Items",
          "ItemsCashregisters"
        ],
        "operationId": "readItemsCashregisters",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsCashregisters"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple cashregisters items at the same time.",
        "tags": [
          "Items",
          "ItemsCashregisters"
        ],
        "operationId": "updateItemsCashregisters",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCashregisters"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCashregisters"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCashregisters"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing cashregisters items.",
        "tags": [
          "Items",
          "ItemsCashregisters"
        ],
        "operationId": "deleteItemsCashregisters",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/cashregisters/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single cashregisters item by unique identifier.",
        "tags": [
          "Items",
          "ItemsCashregisters"
        ],
        "operationId": "readSingleItemsCashregisters",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCashregisters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing cashregisters item.",
        "tags": [
          "Items",
          "ItemsCashregisters"
        ],
        "operationId": "updateSingleItemsCashregisters",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsCashregisters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCashregisters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing cashregisters item.",
        "tags": [
          "Items",
          "ItemsCashregisters"
        ],
        "operationId": "deleteSingleItemsCashregisters",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/comments": {
      "get": {
        "tags": [
          "Comments"
        ],
        "operationId": "getComments",
        "summary": "List Comments",
        "description": "List the comments.",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Comments"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "tags": [
          "Comments"
        ],
        "operationId": "createComment",
        "summary": "Create a Comment",
        "description": "Create a new comment.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "collection",
                  "item",
                  "comment"
                ],
                "properties": {
                  "collection": {
                    "type": "string",
                    "description": "Which collection this collection comment is for.",
                    "example": "projects"
                  },
                  "item": {
                    "type": "string",
                    "example": "81dfa7e0-56d2-471f-b96a-1cf8a62bdf28"
                  },
                  "comment": {
                    "type": "string",
                    "example": "A new comment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Comments"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Comments",
        "description": "Update multiple comments at the same time.",
        "tags": [
          "Comments"
        ],
        "operationId": "updateComments",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "data": {
                    "type": "object",
                    "required": [
                      "collection"
                    ],
                    "properties": {
                      "collection": {
                        "type": "string",
                        "description": "Which collection this collection comment is for.",
                        "example": "projects"
                      },
                      "item": {
                        "type": "string",
                        "example": "81dfa7e0-56d2-471f-b96a-1cf8a62bdf28"
                      },
                      "comment": {
                        "type": "string",
                        "example": "A new comment"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Comments"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Comments",
        "description": "Delete multiple existing comments.",
        "tags": [
          "Comments"
        ],
        "operationId": "deleteComments",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/comments/{id}": {
      "get": {
        "tags": [
          "Comments"
        ],
        "operationId": "getComment",
        "summary": "Retrieve a Comment",
        "description": "Retrieve a single comment by unique identifier.",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Comments"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "tags": [
          "Comments"
        ],
        "operationId": "updateComment",
        "summary": "Update a Comment",
        "description": "Update an existing comment.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "collection"
                ],
                "properties": {
                  "collection": {
                    "type": "string",
                    "description": "Which collection this comment is for.",
                    "example": "projects"
                  },
                  "item": {
                    "type": "string",
                    "example": "81dfa7e0-56d2-471f-b96a-1cf8a62bdf28"
                  },
                  "comment": {
                    "type": "string",
                    "example": "An updated comment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Comments"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "tags": [
          "Comments"
        ],
        "operationId": "deleteComment",
        "summary": "Delete a Comment",
        "description": "Delete an existing comment.",
        "security": [
          {
            "Auth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/folders": {
      "get": {
        "summary": "List Folders",
        "description": "List the folders.",
        "operationId": "getFolders",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Folders"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Folders"
        ]
      },
      "post": {
        "summary": "Create a Folder",
        "description": "Create a new folder.",
        "operationId": "createFolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Amsterdam",
                    "description": "Name of the folder."
                  },
                  "parent": {
                    "description": "Unique identifier of the parent folder. This allows for nested folders.",
                    "type": "integer"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Folders"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Folders"
        ]
      },
      "patch": {
        "summary": "Update Multiple Folders",
        "description": "Update multiple folders at the same time.",
        "tags": [
          "Folders"
        ],
        "operationId": "updateFolders",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "Amsterdam",
                        "description": "Name of the folder."
                      },
                      "parent": {
                        "description": "Unique identifier of the parent folder. This allows for nested folders.",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "name"
                    ]
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Folders"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Folders",
        "description": "Delete multiple existing folders.",
        "tags": [
          "Folders"
        ],
        "operationId": "deleteFolders",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/folders/{id}": {
      "get": {
        "summary": "Retrieve a Folder",
        "description": "Retrieve a single folder by unique identifier.",
        "operationId": "getFolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Folders"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Folders"
        ]
      },
      "patch": {
        "summary": "Update a Folder",
        "description": "Update an existing folder",
        "operationId": "updateFolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the folder. Can't be null or empty."
                  },
                  "parent": {
                    "type": "integer",
                    "example": 3,
                    "description": "Unique identifier of the parent folder. This allows for nested folders."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Folders"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Folders"
        ]
      },
      "delete": {
        "summary": "Delete a Folder",
        "description": "Delete an existing folder",
        "operationId": "deleteFolder",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/extensions": {
      "get": {
        "summary": "List Extensions",
        "description": "List the installed extensions and their configuration in the project.",
        "operationId": "listExtensions",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Extensions"
                      }
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "tags": [
          "Extensions"
        ]
      }
    },
    "/extensions/{name}": {
      "patch": {
        "summary": "Update an Extension",
        "description": "Update an existing extension.",
        "operationId": "updateExtensions",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "meta": {
                    "type": "object",
                    "description": "Directus metadata for the extension. Where the configuration for the extension in the current project is stored.",
                    "properties": {
                      "enabled": {
                        "description": "Whether or not the extension is enabled.",
                        "example": true,
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Extensions"
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Extensions"
        ]
      }
    },
    "/extensions/{bundle}/{name}": {
      "patch": {
        "summary": "Update an Extension",
        "description": "Update an existing extension.",
        "operationId": "updateExtensionBundle",
        "parameters": [
          {
            "in": "path",
            "name": "bundle",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "meta": {
                    "type": "object",
                    "description": "Directus metadata for the extension. Where the configuration for the extension in the current project is stored.",
                    "properties": {
                      "enabled": {
                        "description": "Whether or not the extension is enabled.",
                        "example": true,
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Extensions"
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Extensions"
        ]
      }
    },
    "/fields": {
      "get": {
        "summary": "List All Fields",
        "description": "Returns a list of the fields available in the project.",
        "operationId": "getFields",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Sort"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Fields"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Fields"
        ]
      }
    },
    "/fields/{collection}": {
      "get": {
        "summary": "List Fields in Collection",
        "description": "Returns a list of the fields available in the given collection.",
        "operationId": "getCollectionFields",
        "parameters": [
          {
            "description": "Unique identifier of the collection the item resides in.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Sort"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Fields"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Fields"
        ]
      },
      "post": {
        "summary": "Create Field in Collection",
        "description": "Create a new field in a given collection.",
        "operationId": "createField",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "field",
                  "datatype",
                  "type",
                  "length"
                ],
                "type": "object",
                "properties": {
                  "field": {
                    "description": "Unique name of the field. Field name is unique within the collection.",
                    "example": "id",
                    "type": "string"
                  },
                  "type": {
                    "description": "Directus specific data type. Used to cast values in the API.",
                    "example": "integer",
                    "type": "string"
                  },
                  "schema": {
                    "description": "The schema info.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "The name of the field.",
                        "example": "title",
                        "type": "string"
                      },
                      "table": {
                        "description": "The collection of the field.",
                        "example": "posts",
                        "type": "string"
                      },
                      "type": {
                        "description": "The type of the field.",
                        "example": "string",
                        "type": "string"
                      },
                      "default_value": {
                        "description": "The default value of the field.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "max_length": {
                        "description": "The max length of the field.",
                        "example": null,
                        "type": "integer",
                        "nullable": true
                      },
                      "is_nullable": {
                        "description": "If the field is nullable.",
                        "example": false,
                        "type": "boolean"
                      },
                      "is_primary_key": {
                        "description": "If the field is primary key.",
                        "example": false,
                        "type": "boolean"
                      },
                      "has_auto_increment": {
                        "description": "If the field has auto increment.",
                        "example": false,
                        "type": "boolean"
                      },
                      "foreign_key_column": {
                        "description": "Related column from the foreign key constraint.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "foreign_key_table": {
                        "description": "Related table from the foreign key constraint.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "comment": {
                        "description": "Comment as saved in the database.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "schema": {
                        "description": "Database schema (pg only).",
                        "example": "public",
                        "type": "string"
                      },
                      "foreign_key_schema": {
                        "description": "Related schema from the foreign key constraint (pg only).",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      }
                    }
                  },
                  "meta": {
                    "description": "The meta info.",
                    "type": "object",
                    "nullable": true,
                    "properties": {
                      "id": {
                        "description": "Unique identifier for the field in the `directus_fields` collection.",
                        "example": 3,
                        "type": "integer"
                      },
                      "collection": {
                        "description": "Unique name of the collection this field is in.",
                        "example": "posts",
                        "type": "string"
                      },
                      "field": {
                        "description": "Unique name of the field. Field name is unique within the collection.",
                        "example": "title",
                        "type": "string"
                      },
                      "special": {
                        "description": "Transformation flag for field",
                        "example": null,
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "nullable": true
                      },
                      "system-interface": {
                        "description": "What interface is used in the admin app to edit the value for this field.",
                        "example": "primary-key",
                        "type": "string",
                        "nullable": true
                      },
                      "options": {
                        "description": "Options for the interface that's used. This format is based on the individual interface.",
                        "example": null,
                        "type": "object",
                        "nullable": true
                      },
                      "display": {
                        "description": "What display is used in the admin app to display the value for this field.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "display_options": {
                        "description": "Options for the display that's used. This format is based on the individual display.",
                        "example": null,
                        "type": "object",
                        "nullable": true
                      },
                      "locked": {
                        "description": "If the field can be altered by the end user. Directus system fields have this value set to `true`.",
                        "example": true,
                        "type": "boolean"
                      },
                      "readonly": {
                        "description": "Prevents the user from editing the value in the field.",
                        "example": false,
                        "type": "boolean"
                      },
                      "hidden": {
                        "description": "If this field should be hidden.",
                        "example": true,
                        "type": "boolean"
                      },
                      "sort": {
                        "description": "Sort order of this field on the edit page of the admin app.",
                        "example": 1,
                        "type": "integer",
                        "nullable": true
                      },
                      "width": {
                        "description": "Width of the field on the edit form.",
                        "example": null,
                        "type": "string",
                        "nullable": true,
                        "enum": [
                          "half",
                          "half-left",
                          "half-right",
                          "full",
                          "fill",
                          null
                        ]
                      },
                      "group": {
                        "description": "What field group this field is part of.",
                        "example": null,
                        "type": "integer",
                        "nullable": true
                      },
                      "translation": {
                        "description": "Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app.",
                        "example": null,
                        "type": "object",
                        "nullable": true
                      },
                      "note": {
                        "description": "A user provided note for the field. Will be rendered alongside the interface on the edit page.",
                        "example": "",
                        "type": "string",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Fields"
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Fields"
        ],
        "parameters": [
          {
            "description": "Unique identifier of the collection the item resides in.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/fields/{collection}/{id}": {
      "get": {
        "summary": "Retrieve a Field",
        "description": "Retrieves the details of a single field in a given collection.",
        "operationId": "getCollectionField",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Fields"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Fields"
        ],
        "parameters": [
          {
            "name": "collection",
            "in": "path",
            "description": "Unique identifier of the collection the item resides in.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the field.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      },
      "patch": {
        "summary": "Update a Field",
        "description": "Update an existing field.",
        "operationId": "updateField",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "field": {
                    "description": "Unique name of the field. Field name is unique within the collection.",
                    "example": "id",
                    "type": "string"
                  },
                  "type": {
                    "description": "Directus specific data type. Used to cast values in the API.",
                    "example": "integer",
                    "type": "string"
                  },
                  "schema": {
                    "description": "The schema info.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "The name of the field.",
                        "example": "title",
                        "type": "string"
                      },
                      "table": {
                        "description": "The collection of the field.",
                        "example": "posts",
                        "type": "string"
                      },
                      "type": {
                        "description": "The type of the field.",
                        "example": "string",
                        "type": "string"
                      },
                      "default_value": {
                        "description": "The default value of the field.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "max_length": {
                        "description": "The max length of the field.",
                        "example": null,
                        "type": "integer",
                        "nullable": true
                      },
                      "is_nullable": {
                        "description": "If the field is nullable.",
                        "example": false,
                        "type": "boolean"
                      },
                      "is_primary_key": {
                        "description": "If the field is primary key.",
                        "example": false,
                        "type": "boolean"
                      },
                      "has_auto_increment": {
                        "description": "If the field has auto increment.",
                        "example": false,
                        "type": "boolean"
                      },
                      "foreign_key_column": {
                        "description": "Related column from the foreign key constraint.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "foreign_key_table": {
                        "description": "Related table from the foreign key constraint.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "comment": {
                        "description": "Comment as saved in the database.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "schema": {
                        "description": "Database schema (pg only).",
                        "example": "public",
                        "type": "string"
                      },
                      "foreign_key_schema": {
                        "description": "Related schema from the foreign key constraint (pg only).",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      }
                    }
                  },
                  "meta": {
                    "description": "The meta info.",
                    "type": "object",
                    "nullable": true,
                    "properties": {
                      "id": {
                        "description": "Unique identifier for the field in the `directus_fields` collection.",
                        "example": 3,
                        "type": "integer"
                      },
                      "collection": {
                        "description": "Unique name of the collection this field is in.",
                        "example": "posts",
                        "type": "string"
                      },
                      "field": {
                        "description": "Unique name of the field. Field name is unique within the collection.",
                        "example": "title",
                        "type": "string"
                      },
                      "special": {
                        "description": "Transformation flag for field",
                        "example": null,
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "nullable": true
                      },
                      "system-interface": {
                        "description": "What interface is used in the admin app to edit the value for this field.",
                        "example": "primary-key",
                        "type": "string",
                        "nullable": true
                      },
                      "options": {
                        "description": "Options for the interface that's used. This format is based on the individual interface.",
                        "example": null,
                        "type": "object",
                        "nullable": true
                      },
                      "display": {
                        "description": "What display is used in the admin app to display the value for this field.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "display_options": {
                        "description": "Options for the display that's used. This format is based on the individual display.",
                        "example": null,
                        "type": "object",
                        "nullable": true
                      },
                      "locked": {
                        "description": "If the field can be altered by the end user. Directus system fields have this value set to `true`.",
                        "example": true,
                        "type": "boolean"
                      },
                      "readonly": {
                        "description": "Prevents the user from editing the value in the field.",
                        "example": false,
                        "type": "boolean"
                      },
                      "hidden": {
                        "description": "If this field should be hidden.",
                        "example": true,
                        "type": "boolean"
                      },
                      "sort": {
                        "description": "Sort order of this field on the edit page of the admin app.",
                        "example": 1,
                        "type": "integer",
                        "nullable": true
                      },
                      "width": {
                        "description": "Width of the field on the edit form.",
                        "example": null,
                        "type": "string",
                        "nullable": true,
                        "enum": [
                          "half",
                          "half-left",
                          "half-right",
                          "full",
                          "fill",
                          null
                        ]
                      },
                      "group": {
                        "description": "What field group this field is part of.",
                        "example": null,
                        "type": "integer",
                        "nullable": true
                      },
                      "translation": {
                        "description": "Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app.",
                        "example": null,
                        "type": "object",
                        "nullable": true
                      },
                      "note": {
                        "description": "A user provided note for the field. Will be rendered alongside the interface on the edit page.",
                        "example": "",
                        "type": "string",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Fields"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Fields"
        ],
        "parameters": [
          {
            "name": "collection",
            "in": "path",
            "description": "Unique identifier of the collection the item resides in.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the field.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      },
      "delete": {
        "summary": "Delete a Field",
        "description": "Delete an existing field.",
        "operationId": "deleteField",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Fields"
        ],
        "parameters": [
          {
            "name": "collection",
            "in": "path",
            "description": "Unique identifier of the collection the item resides in.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the field.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      }
    },
    "/operations": {
      "get": {
        "summary": "List Operations",
        "description": "Get all operations.",
        "operationId": "getOperations",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Operations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Operations"
        ]
      },
      "post": {
        "summary": "Create an Operation",
        "description": "Create a new operation.",
        "operationId": "createOperation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Operations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Operations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Operations"
        ]
      },
      "patch": {
        "summary": "Update Multiple Operations",
        "description": "Update multiple operations at the same time.",
        "tags": [
          "Operations"
        ],
        "operationId": "updateOperations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/Operations"
                      }
                    ]
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Operations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Operations",
        "description": "Delete multiple existing operations.",
        "tags": [
          "Operations"
        ],
        "operationId": "deleteOperations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/operations/{id}": {
      "get": {
        "summary": "Retrieve an Operation",
        "description": "Retrieve a single operation by unique identifier.",
        "operationId": "getOperation",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Operations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Operations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      },
      "patch": {
        "summary": "Update an Operation",
        "description": "Update an existing operation",
        "operationId": "updateOperation",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Operations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Operations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Operations"
        ]
      },
      "delete": {
        "summary": "Delete an Operation",
        "description": "Delete an existing operation",
        "operationId": "deleteOperation",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Operations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/permissions": {
      "get": {
        "summary": "List Permissions",
        "description": "List all permissions.",
        "operationId": "getPermissions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Permissions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Permissions"
        ]
      },
      "post": {
        "summary": "Create a Permission",
        "description": "Create a new permission.",
        "operationId": "createPermission",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "collection": {
                    "description": "What collection this permission applies to.",
                    "type": "string",
                    "example": "customers"
                  },
                  "comment": {
                    "description": "If the user can post comments.",
                    "type": "string",
                    "enum": [
                      "none",
                      "create",
                      "update",
                      "full"
                    ]
                  },
                  "create": {
                    "description": "If the user can create items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "full"
                    ]
                  },
                  "delete": {
                    "description": "If the user can update items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "mine",
                      "role",
                      "full"
                    ]
                  },
                  "explain": {
                    "description": "If the user is required to leave a comment explaining what was changed.",
                    "type": "string",
                    "enum": [
                      "none",
                      "create",
                      "update",
                      "always"
                    ]
                  },
                  "read": {
                    "description": "If the user can read items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "mine",
                      "role",
                      "full"
                    ]
                  },
                  "role": {
                    "description": "Unique identifier of the role this permission applies to.",
                    "type": "integer",
                    "example": 3
                  },
                  "read_field_blacklist": {
                    "description": "Explicitly denies read access for specific fields.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "featured_image"
                    ]
                  },
                  "status": {
                    "description": "What status this permission applies to.",
                    "type": "string"
                  },
                  "status_blacklist": {
                    "description": "Explicitly denies specific statuses to be used.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "update": {
                    "description": "If the user can update items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "mine",
                      "role",
                      "full"
                    ]
                  },
                  "write_field_blacklist": {
                    "description": "Explicitly denies write access for specific fields.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Permissions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Permissions"
        ]
      },
      "patch": {
        "summary": "Update Multiple Permissions",
        "description": "Update multiple permissions at the same time.",
        "tags": [
          "Permissions"
        ],
        "operationId": "updatePermissions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "data": {
                    "properties": {
                      "collection": {
                        "description": "What collection this permission applies to.",
                        "type": "string",
                        "example": "customers"
                      },
                      "comment": {
                        "description": "If the user can post comments.",
                        "type": "string",
                        "enum": [
                          "none",
                          "create",
                          "update",
                          "full"
                        ]
                      },
                      "create": {
                        "description": "If the user can create items.",
                        "type": "string",
                        "enum": [
                          "none",
                          "full"
                        ]
                      },
                      "delete": {
                        "description": "If the user can update items.",
                        "type": "string",
                        "enum": [
                          "none",
                          "mine",
                          "role",
                          "full"
                        ]
                      },
                      "explain": {
                        "description": "If the user is required to leave a comment explaining what was changed.",
                        "type": "string",
                        "enum": [
                          "none",
                          "create",
                          "update",
                          "always"
                        ]
                      },
                      "read": {
                        "description": "If the user can read items.",
                        "type": "string",
                        "enum": [
                          "none",
                          "mine",
                          "role",
                          "full"
                        ]
                      },
                      "role": {
                        "description": "Unique identifier of the role this permission applies to.",
                        "type": "integer",
                        "example": 3
                      },
                      "read_field_blacklist": {
                        "description": "Explicitly denies read access for specific fields.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "featured_image"
                        ]
                      },
                      "status": {
                        "description": "What status this permission applies to.",
                        "type": "string"
                      },
                      "status_blacklist": {
                        "description": "Explicitly denies specific statuses to be used.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "update": {
                        "description": "If the user can update items.",
                        "type": "string",
                        "enum": [
                          "none",
                          "mine",
                          "role",
                          "full"
                        ]
                      },
                      "write_field_blacklist": {
                        "description": "Explicitly denies write access for specific fields.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Permissions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Permissions",
        "description": "Delete multiple existing permissions.",
        "tags": [
          "Permissions"
        ],
        "operationId": "deletePermissions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/permissions/me": {
      "get": {
        "summary": "List My Permissions",
        "description": "List the permissions that apply to the current user.",
        "operationId": "getMyPermissions",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Permissions"
        ]
      }
    },
    "/permissions/{id}": {
      "get": {
        "summary": "Retrieve a Permission",
        "description": "Retrieve a single permissions object by unique identifier.",
        "operationId": "getPermission",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Permissions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Permissions"
        ]
      },
      "patch": {
        "summary": "Update a Permission",
        "description": "Update an existing permission",
        "operationId": "updatePermission",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "collection": {
                    "description": "What collection this permission applies to.",
                    "type": "object"
                  },
                  "comment": {
                    "description": "If the user can post comments. `full`.",
                    "type": "string",
                    "enum": [
                      "none",
                      "create",
                      "update"
                    ]
                  },
                  "create": {
                    "description": "If the user can create items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "full"
                    ]
                  },
                  "delete": {
                    "description": "If the user can update items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "mine",
                      "role",
                      "full"
                    ]
                  },
                  "explain": {
                    "description": "If the user is required to leave a comment explaining what was changed.",
                    "type": "string",
                    "enum": [
                      "none",
                      "create",
                      "update",
                      "always"
                    ]
                  },
                  "read": {
                    "description": "If the user can read items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "mine",
                      "role",
                      "full"
                    ]
                  },
                  "read_field_blacklist": {
                    "description": "Explicitly denies read access for specific fields.",
                    "type": "object"
                  },
                  "role": {
                    "description": "Unique identifier of the role this permission applies to.",
                    "type": "object"
                  },
                  "status": {
                    "description": "What status this permission applies to.",
                    "type": "object"
                  },
                  "status_blacklist": {
                    "description": "Explicitly denies specific statuses to be used.",
                    "type": "object"
                  },
                  "update": {
                    "description": "If the user can update items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "mine",
                      "role",
                      "full"
                    ]
                  },
                  "write_field_blacklist": {
                    "description": "Explicitly denies write access for specific fields.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Permissions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Permissions"
        ]
      },
      "delete": {
        "summary": "Delete a Permission",
        "description": "Delete an existing permission",
        "operationId": "deletePermission",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Permissions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ]
      }
    },
    "/collections": {
      "get": {
        "summary": "List Collections",
        "description": "Returns a list of the collections available in the project.",
        "operationId": "getCollections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Collections"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Collections"
        ]
      },
      "post": {
        "summary": "Create a Collection",
        "description": "Create a new collection in Directus.",
        "operationId": "createCollection",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "collection",
                  "fields"
                ],
                "properties": {
                  "collection": {
                    "type": "string",
                    "description": "Unique name of the collection.",
                    "example": "my_collection"
                  },
                  "fields": {
                    "type": "array",
                    "description": "The fields contained in this collection. See the fields reference for more information. Each individual field requires field, type, and interface to be provided.",
                    "items": {
                      "type": "object"
                    }
                  },
                  "icon": {
                    "description": "Name of a Google Material Design Icon that's assigned to this collection.",
                    "type": "string",
                    "example": "people",
                    "nullable": true
                  },
                  "note": {
                    "description": "A note describing the collection.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  },
                  "display_template": {
                    "description": "Text representation of how items from this collection are shown across the system.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  },
                  "hidden": {
                    "description": "Whether or not the collection is hidden from the navigation in the admin app.",
                    "type": "boolean",
                    "example": false
                  },
                  "singleton": {
                    "description": "Whether or not the collection is treated as a single object.",
                    "type": "boolean",
                    "example": false
                  },
                  "translation": {
                    "description": "Key value pairs of how to show this collection's name in different languages in the admin app.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  },
                  "versioning": {
                    "description": "Whether or not Content Versioning is enabled for this collection.",
                    "type": "boolean",
                    "example": false
                  },
                  "archive_field": {
                    "description": "What field holds the archive value.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  },
                  "archive_app_filter": {
                    "description": "What value to use for \"archived\" items.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  },
                  "archive_value": {
                    "description": "What value to use to \"unarchive\" items.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  },
                  "unarchive_value": {
                    "description": "Whether or not to show the \"archived\" filter.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  },
                  "sort_field": {
                    "description": "The sort field in the collection.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Collections"
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Collections"
        ]
      }
    },
    "/collections/{id}": {
      "get": {
        "summary": "Retrieve a Collection",
        "description": "Retrieves the details of a single collection.",
        "operationId": "getCollection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the collection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Collections"
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Collections"
        ]
      },
      "patch": {
        "summary": "Update a Collection",
        "description": "Update an existing collection.",
        "operationId": "updateCollection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the collection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "meta": {
                    "description": "Metadata of the collection.",
                    "type": "object",
                    "properties": {
                      "icon": {
                        "description": "Name of a Google Material Design Icon that's assigned to this collection.",
                        "type": "string",
                        "example": "people",
                        "nullable": true
                      },
                      "color": {
                        "description": "Choose the color for the icon assigned to this collection.",
                        "type": "string",
                        "example": "#6644ff",
                        "nullable": true
                      },
                      "note": {
                        "description": "A note describing the collection.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      },
                      "display_template": {
                        "description": "Text representation of how items from this collection are shown across the system.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      },
                      "hidden": {
                        "description": "Whether or not the collection is hidden from the navigation in the admin app.",
                        "type": "boolean",
                        "example": false
                      },
                      "singleton": {
                        "description": "Whether or not the collection is treated as a single object.",
                        "type": "boolean",
                        "example": false
                      },
                      "translation": {
                        "description": "Key value pairs of how to show this collection's name in different languages in the admin app.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      },
                      "versioning": {
                        "description": "Whether or not Content Versioning is enabled for this collection.",
                        "type": "boolean",
                        "example": false
                      },
                      "archive_field": {
                        "description": "What field holds the archive value.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      },
                      "archive_app_filter": {
                        "description": "What value to use for \"archived\" items.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      },
                      "archive_value": {
                        "description": "What value to use to \"unarchive\" items.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      },
                      "unarchive_value": {
                        "description": "Whether or not to show the \"archived\" filter.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      },
                      "sort_field": {
                        "description": "The sort field in the collection.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Collections"
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Collections"
        ]
      },
      "delete": {
        "summary": "Delete a Collection",
        "description": "Delete an existing collection. Warning: This will delete the whole collection, including the items within. Proceed with caution.",
        "operationId": "deleteCollection",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the collection.",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/files": {
      "get": {
        "summary": "List Files",
        "description": "List the files.",
        "tags": [
          "Files"
        ],
        "operationId": "getFiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Files"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "summary": "Create a File",
        "description": "Create a new file",
        "tags": [
          "Files"
        ],
        "operationId": "createFile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Files"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Files",
        "description": "Update multiple files at the same time.",
        "tags": [
          "Files"
        ],
        "operationId": "updateFiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Files"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Files",
        "description": "Delete multiple existing files.",
        "tags": [
          "Files"
        ],
        "operationId": "deleteFiles",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/files/{id}": {
      "get": {
        "summary": "Retrieve a Files",
        "description": "Retrieve a single file by unique identifier.",
        "tags": [
          "Files"
        ],
        "operationId": "getFile",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Files"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update a File",
        "description": "Update an existing file, and/or replace it's file contents.",
        "tags": [
          "Files"
        ],
        "operationId": "updateFile",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "title": {
                    "description": "Title for the file. Is extracted from the filename on upload, but can be edited by the user.",
                    "example": "User Avatar",
                    "type": "string"
                  },
                  "filename_download": {
                    "description": "Preferred filename when file is downloaded.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description for the file.",
                    "type": "string",
                    "nullable": true
                  },
                  "folder": {
                    "description": "Virtual folder where this file resides in.",
                    "example": null,
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/Folders"
                      }
                    ],
                    "nullable": true
                  },
                  "tags": {
                    "description": "Tags for the file. Is automatically populated based on Exif data for images.",
                    "type": "array",
                    "nullable": true,
                    "items": {
                      "type": "string"
                    }
                  },
                  "file": {
                    "description": "File contents.",
                    "format": "binary"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "Title for the file. Is extracted from the filename on upload, but can be edited by the user.",
                    "example": "User Avatar",
                    "type": "string"
                  },
                  "filename_download": {
                    "description": "Preferred filename when file is downloaded.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description for the file.",
                    "type": "string",
                    "nullable": true
                  },
                  "folder": {
                    "description": "Virtual folder where this file resides in.",
                    "example": null,
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/Folders"
                      }
                    ],
                    "nullable": true
                  },
                  "tags": {
                    "description": "Tags for the file. Is automatically populated based on Exif data for images.",
                    "type": "array",
                    "nullable": true,
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Files"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete a File",
        "description": "Delete an existing file.",
        "tags": [
          "Files"
        ],
        "operationId": "deleteFile",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/flows": {
      "get": {
        "summary": "List Flows",
        "description": "Get all flows.",
        "operationId": "getFlows",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Flows"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Flows"
        ]
      },
      "post": {
        "summary": "Create a Flow",
        "description": "Create a new flow.",
        "operationId": "createFlow",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Flows"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Flows"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Flows"
        ]
      },
      "patch": {
        "summary": "Update Multiple Flows",
        "description": "Update multiple flows at the same time.",
        "tags": [
          "Flows"
        ],
        "operationId": "updateFlows",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/Flows"
                      }
                    ]
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Flows"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Flows",
        "description": "Delete multiple existing flows.",
        "tags": [
          "Flows"
        ],
        "operationId": "deleteFlows",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/flows/{id}": {
      "get": {
        "summary": "Retrieve a Flow",
        "description": "Retrieve a single flow by unique identifier.",
        "operationId": "getFlow",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Flows"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Flows"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      },
      "patch": {
        "summary": "Update a Flow",
        "description": "Update an existing flow",
        "operationId": "updateFlow",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Flows"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Flows"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Flows"
        ]
      },
      "delete": {
        "summary": "Delete a Flow",
        "description": "Delete an existing flow",
        "operationId": "deleteFlow",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Flows"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/relations": {
      "get": {
        "summary": "List Relations",
        "description": "List the relations.",
        "operationId": "getRelations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Relations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Relations"
        ]
      },
      "post": {
        "summary": "Create a Relation",
        "description": "Create a new relation.",
        "operationId": "createRelation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "collection_many": {
                    "description": "Collection that has the field that holds the foreign key.",
                    "type": "string",
                    "example": "articles"
                  },
                  "collection_one": {
                    "description": "Collection on the _one_ side of the relationship.",
                    "type": "string",
                    "example": "authors"
                  },
                  "field_many": {
                    "description": "Foreign key. Field that holds the primary key of the related collection.",
                    "type": "string",
                    "example": "author"
                  },
                  "field_one": {
                    "description": "Alias column that serves as the _one_ side of the relationship.",
                    "type": "string",
                    "example": "books"
                  },
                  "junction_field": {
                    "description": "Field on the junction table that holds the primary key of the related collection.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Relations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Relations"
        ]
      }
    },
    "/relations/{id}": {
      "get": {
        "summary": "Retrieve a Relation",
        "description": "Retrieve a single relation by unique identifier.",
        "operationId": "getRelation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Relations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Relations"
        ]
      },
      "patch": {
        "summary": "Update a Relation",
        "description": "Update an existing relation",
        "operationId": "updateRelation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "collection_many": {
                    "description": "Collection that has the field that holds the foreign key.",
                    "type": "string"
                  },
                  "collection_one": {
                    "description": "Collection on the _one_ side of the relationship.",
                    "type": "string"
                  },
                  "field_many": {
                    "description": "Foreign key. Field that holds the primary key of the related collection.",
                    "type": "string"
                  },
                  "field_one": {
                    "description": "Alias column that serves as the _one_ side of the relationship.",
                    "type": "string",
                    "example": "books"
                  },
                  "junction_field": {
                    "description": "Field on the junction table that holds the primary key of the related collection.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Relations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Relations"
        ]
      },
      "delete": {
        "summary": "Delete a Relation",
        "description": "Delete an existing relation.",
        "operationId": "deleteRelation",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Relations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ]
      }
    },
    "/versions": {
      "get": {
        "summary": "List Content Versions",
        "description": "Get all Content Versions.",
        "operationId": "getContentVersions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Versions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ]
      },
      "post": {
        "summary": "Create Multiple Content Versions",
        "description": "Create multiple new Content Versions.",
        "operationId": "createContentVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Versions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Versions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ]
      },
      "patch": {
        "summary": "Update Multiple Content Versions",
        "description": "Update multiple Content Versions at the same time.",
        "operationId": "updateContentVersions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/Versions"
                      }
                    ]
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Versions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "tags": [
          "Versions"
        ]
      },
      "delete": {
        "summary": "Delete Multiple Content Versions",
        "description": "Delete multiple existing Content Versions.",
        "operationId": "deleteContentVersions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "tags": [
          "Versions"
        ]
      }
    },
    "/versions/{id}": {
      "get": {
        "summary": "Retrieve a Content Version",
        "description": "Retrieve a single Content Version by unique identifier.",
        "operationId": "getContentVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Versions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ]
      },
      "patch": {
        "summary": "Update a Content Version",
        "description": "Update an existing Content Version.",
        "operationId": "updateContentVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Versions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Versions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ]
      },
      "delete": {
        "summary": "Delete a Content Version",
        "description": "Delete an existing Content Version.",
        "operationId": "deleteContentVersion",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/versions/{id}/save": {
      "post": {
        "summary": "Save to a Content Version",
        "description": "Save item changes to an existing Content Version.",
        "operationId": "saveContentVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ]
      }
    },
    "/versions/{id}/compare": {
      "get": {
        "summary": "Compare a Content Version",
        "description": "Compare an existing Content Version with the main version of the item.",
        "operationId": "compareContentVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ]
      }
    },
    "/versions/{id}/promote": {
      "post": {
        "summary": "Promote a Content Version",
        "description": "Pass the current hash of the main version of the item (obtained from the `compare` endpoint) along with an optional array of field names of which the values are to be promoted (by default, all fields are selected).",
        "operationId": "promoteContentVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mainHash": {
                    "description": "Hash of the main version of the item to be promoted.",
                    "type": "string"
                  },
                  "fields": {
                    "description": "Optional array of field names of which the values are to be promoted.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ]
      }
    },
    "/presets": {
      "get": {
        "tags": [
          "Presets"
        ],
        "operationId": "getPresets",
        "summary": "List Presets",
        "description": "List the presets.",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Presets"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "tags": [
          "Presets"
        ],
        "operationId": "createPreset",
        "summary": "Create a Preset",
        "description": "Create a new preset.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "collection"
                ],
                "properties": {
                  "collection": {
                    "type": "string",
                    "description": "What collection this collection preset is used for.",
                    "example": "articles"
                  },
                  "title": {
                    "type": "string",
                    "description": "Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.",
                    "example": "Highly rated articles"
                  },
                  "role": {
                    "type": "string",
                    "description": "The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role.",
                    "example": null
                  },
                  "search": {
                    "type": "string",
                    "description": "What the user searched for in search/filter in the header bar."
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "example": "aHKLAakdVghzD"
                        },
                        "field": {
                          "type": "string",
                          "example": "rating"
                        },
                        "operator": {
                          "type": "string",
                          "example": "gte"
                        },
                        "value": {
                          "type": "integer",
                          "example": 4.5
                        }
                      }
                    }
                  },
                  "layout": {
                    "type": "string",
                    "description": "Name of the view type that is used."
                  },
                  "layout_query": {
                    "type": "string",
                    "description": "Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters."
                  },
                  "layout_options": {
                    "type": "string",
                    "description": "Options of the views. The properties in here are controlled by the layout."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Presets"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Presets",
        "description": "Update multiple presets at the same time.",
        "tags": [
          "Presets"
        ],
        "operationId": "updatePresets",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "data": {
                    "type": "object",
                    "required": [
                      "collection"
                    ],
                    "properties": {
                      "collection": {
                        "type": "string",
                        "description": "What collection this collection preset is used for.",
                        "example": "articles"
                      },
                      "title": {
                        "type": "string",
                        "description": "Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.",
                        "example": "Highly rated articles"
                      },
                      "role": {
                        "type": "string",
                        "description": "The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role.",
                        "example": null
                      },
                      "search": {
                        "type": "string",
                        "description": "What the user searched for in search/filter in the header bar."
                      },
                      "filters": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string",
                              "example": "aHKLAakdVghzD"
                            },
                            "field": {
                              "type": "string",
                              "example": "rating"
                            },
                            "operator": {
                              "type": "string",
                              "example": "gte"
                            },
                            "value": {
                              "type": "integer",
                              "example": 4.5
                            }
                          }
                        }
                      },
                      "layout": {
                        "type": "string",
                        "description": "Name of the view type that is used."
                      },
                      "layout_query": {
                        "type": "string",
                        "description": "Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters."
                      },
                      "layout_options": {
                        "type": "string",
                        "description": "Options of the views. The properties in here are controlled by the layout."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Presets"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Presets",
        "description": "Delete multiple existing presets.",
        "tags": [
          "Presets"
        ],
        "operationId": "deletePresets",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/presets/{id}": {
      "get": {
        "tags": [
          "Presets"
        ],
        "operationId": "getPreset",
        "summary": "Retrieve a Preset",
        "description": "Retrieve a single preset by unique identifier.",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Presets"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "tags": [
          "Presets"
        ],
        "operationId": "updatePreset",
        "summary": "Update a Preset",
        "description": "Update an existing preset.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "collection"
                ],
                "properties": {
                  "collection": {
                    "type": "string",
                    "description": "What collection this collection preset is used for.",
                    "example": "articles"
                  },
                  "title": {
                    "type": "string",
                    "description": "Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.",
                    "example": "Highly rated articles"
                  },
                  "role": {
                    "type": "integer",
                    "description": "The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role."
                  },
                  "search_query": {
                    "type": "string",
                    "description": "What the user searched for in search/filter in the header bar."
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "field": {
                          "type": "string",
                          "example": "rating"
                        },
                        "operator": {
                          "type": "string",
                          "example": "gte"
                        },
                        "value": {
                          "type": "integer",
                          "example": 4.5
                        }
                      }
                    }
                  },
                  "view_type": {
                    "type": "string",
                    "description": "Name of the view type that is used. Defaults to tabular."
                  },
                  "view_query": {
                    "type": "string",
                    "description": "View query that's saved per view type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters."
                  },
                  "view_options": {
                    "type": "string",
                    "description": "Options of the views. The properties in here are controlled by the layout."
                  },
                  "translation": {
                    "type": "object",
                    "description": "Key value pair of language-translation. Can be used to translate the bookmark title in multiple languages."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Presets"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "tags": [
          "Presets"
        ],
        "operationId": "deletePreset",
        "summary": "Delete a Preset",
        "description": "Delete an existing preset.",
        "security": [
          {
            "Auth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ]
      }
    },
    "/settings": {
      "get": {
        "summary": "Retrieve Settings",
        "description": "List the settings.",
        "operationId": "getSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Settings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Settings"
        ]
      },
      "patch": {
        "summary": "Update Settings",
        "description": "Update the settings",
        "operationId": "updateSetting",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Settings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Settings"
        ]
      }
    },
    "/webhooks": {
      "get": {
        "summary": "List Webhooks",
        "description": "Get all webhooks.",
        "operationId": "getWebhooks",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Webhooks"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Webhooks"
        ]
      },
      "post": {
        "summary": "Create a Webhook",
        "description": "Create a new webhook.",
        "operationId": "createWebhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "The name of the webhook.",
                    "type": "string",
                    "example": "create articles"
                  },
                  "method": {
                    "description": "Method used in the webhook.",
                    "type": "string",
                    "example": "POST"
                  },
                  "url": {
                    "description": "The url of the webhook.",
                    "type": "string",
                    "example": null
                  },
                  "status": {
                    "description": "The status of the webhook.",
                    "type": "string",
                    "example": "active"
                  },
                  "data": {
                    "description": "If yes, send the content of what was done",
                    "type": "boolean",
                    "example": true
                  },
                  "actions": {
                    "description": "The actions that triggers this webhook.",
                    "example": null
                  },
                  "system-collections": {
                    "description": "The collections that triggers this webhook.",
                    "example": null
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Roles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Webhooks"
        ]
      },
      "patch": {
        "summary": "Update Multiple Webhooks",
        "description": "Update multiple webhooks at the same time.",
        "tags": [
          "Webhooks"
        ],
        "operationId": "updateWebhooks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "name": {
                        "description": "The name of the webhook.",
                        "type": "string",
                        "example": "create articles"
                      },
                      "method": {
                        "description": "Method used in the webhook.",
                        "type": "string",
                        "example": "POST"
                      },
                      "url": {
                        "description": "The url of the webhook.",
                        "type": "string",
                        "example": null
                      },
                      "status": {
                        "description": "The status of the webhook.",
                        "type": "string",
                        "example": "active"
                      },
                      "data": {
                        "description": "If yes, send the content of what was done",
                        "type": "boolean",
                        "example": true
                      },
                      "actions": {
                        "description": "The actions that triggers this webhook.",
                        "example": null
                      },
                      "system-collections": {
                        "description": "The collections that triggers this webhook.",
                        "example": null
                      }
                    },
                    "type": "object"
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Webhooks"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Webhooks",
        "description": "Delete multiple existing webhooks.",
        "tags": [
          "Webhooks"
        ],
        "operationId": "deleteWebhooks",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/webhooks/{id}": {
      "get": {
        "summary": "Retrieve a Webhook",
        "description": "Retrieve a single webhook by unique identifier.",
        "operationId": "getWebhook",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Webhooks"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      },
      "patch": {
        "summary": "Update a Webhook",
        "description": "Update an existing webhook",
        "operationId": "updateWebhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "The name of the webhook.",
                    "type": "string",
                    "example": "create articles"
                  },
                  "method": {
                    "description": "Method used in the webhook.",
                    "type": "string",
                    "example": "POST"
                  },
                  "url": {
                    "description": "The url of the webhook.",
                    "type": "string",
                    "example": null
                  },
                  "status": {
                    "description": "The status of the webhook.",
                    "type": "string",
                    "example": "active"
                  },
                  "data": {
                    "description": "If yes, send the content of what was done",
                    "type": "boolean",
                    "example": true
                  },
                  "actions": {
                    "description": "The actions that triggers this webhook.",
                    "example": null
                  },
                  "system-collections": {
                    "description": "The collections that triggers this webhook.",
                    "example": null
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Roles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Webhooks"
        ]
      },
      "delete": {
        "summary": "Delete a Webhook",
        "description": "Delete an existing webhook",
        "operationId": "deleteWebhook",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/items/files_shares": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new files_shares item.",
        "tags": [
          "Items",
          "ItemsFilesShares"
        ],
        "operationId": "createItemsFilesShares",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFilesShares"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFilesShares"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFilesShares"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the files_shares items.",
        "tags": [
          "Items",
          "ItemsFilesShares"
        ],
        "operationId": "readItemsFilesShares",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFilesShares"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple files_shares items at the same time.",
        "tags": [
          "Items",
          "ItemsFilesShares"
        ],
        "operationId": "updateItemsFilesShares",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFilesShares"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFilesShares"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFilesShares"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing files_shares items.",
        "tags": [
          "Items",
          "ItemsFilesShares"
        ],
        "operationId": "deleteItemsFilesShares",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/files_shares/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single files_shares item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFilesShares"
        ],
        "operationId": "readSingleItemsFilesShares",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFilesShares"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing files_shares item.",
        "tags": [
          "Items",
          "ItemsFilesShares"
        ],
        "operationId": "updateSingleItemsFilesShares",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFilesShares"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFilesShares"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing files_shares item.",
        "tags": [
          "Items",
          "ItemsFilesShares"
        ],
        "operationId": "deleteSingleItemsFilesShares",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/directus_sync_id_map": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new directus_sync_id_map item.",
        "tags": [
          "Items",
          "ItemsDirectusSyncIDMap"
        ],
        "operationId": "createItemsDirectusSyncIDMap",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsDirectusSyncIDMap"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsDirectusSyncIDMap"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsDirectusSyncIDMap"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the directus_sync_id_map items.",
        "tags": [
          "Items",
          "ItemsDirectusSyncIDMap"
        ],
        "operationId": "readItemsDirectusSyncIDMap",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsDirectusSyncIDMap"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple directus_sync_id_map items at the same time.",
        "tags": [
          "Items",
          "ItemsDirectusSyncIDMap"
        ],
        "operationId": "updateItemsDirectusSyncIDMap",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsDirectusSyncIDMap"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsDirectusSyncIDMap"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsDirectusSyncIDMap"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing directus_sync_id_map items.",
        "tags": [
          "Items",
          "ItemsDirectusSyncIDMap"
        ],
        "operationId": "deleteItemsDirectusSyncIDMap",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/directus_sync_id_map/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single directus_sync_id_map item by unique identifier.",
        "tags": [
          "Items",
          "ItemsDirectusSyncIDMap"
        ],
        "operationId": "readSingleItemsDirectusSyncIDMap",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsDirectusSyncIDMap"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing directus_sync_id_map item.",
        "tags": [
          "Items",
          "ItemsDirectusSyncIDMap"
        ],
        "operationId": "updateSingleItemsDirectusSyncIDMap",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsDirectusSyncIDMap"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsDirectusSyncIDMap"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing directus_sync_id_map item.",
        "tags": [
          "Items",
          "ItemsDirectusSyncIDMap"
        ],
        "operationId": "deleteSingleItemsDirectusSyncIDMap",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/roles": {
      "get": {
        "summary": "List Roles",
        "description": "List the roles.",
        "operationId": "getRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Roles"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "summary": "Create a Role",
        "description": "Create a new role.",
        "operationId": "createRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "Description of the role.",
                    "type": "string"
                  },
                  "enforce_tfa": {
                    "description": "Whether or not this role enforces the use of 2FA.",
                    "type": "boolean"
                  },
                  "external_id": {
                    "description": "ID used with external services in SCIM.",
                    "type": "string"
                  },
                  "ip_access": {
                    "description": "Array of IP addresses that are allowed to connect to the API as a user of this role.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "module_listing": {
                    "description": "Custom override for the admin app module bar navigation.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the role.",
                    "type": "string",
                    "example": "Interns"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Roles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Roles"
        ]
      },
      "patch": {
        "summary": "Update Multiple Roles",
        "description": "Update multiple roles at the same time.",
        "tags": [
          "Roles"
        ],
        "operationId": "updateRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "description": {
                        "description": "Description of the role.",
                        "type": "string"
                      },
                      "enforce_tfa": {
                        "description": "Whether or not this role enforces the use of 2FA.",
                        "type": "boolean"
                      },
                      "external_id": {
                        "description": "ID used with external services in SCIM.",
                        "type": "string"
                      },
                      "ip_access": {
                        "description": "Array of IP addresses that are allowed to connect to the API as a user of this role.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "module_listing": {
                        "description": "Custom override for the admin app module bar navigation.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the role.",
                        "type": "string",
                        "example": "Interns"
                      }
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Roles"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Roles",
        "description": "Delete multiple existing roles.",
        "tags": [
          "Roles"
        ],
        "operationId": "deleteRoles",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/roles/{id}": {
      "get": {
        "summary": "Retrieve a Role",
        "description": "Retrieve a single role by unique identifier.",
        "operationId": "getRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Roles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Roles"
        ]
      },
      "patch": {
        "summary": "Update a Role",
        "description": "Update an existing role",
        "operationId": "updateRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "Description of the role.",
                    "type": "string"
                  },
                  "enforce_tfa": {
                    "description": "Whether or not this role enforces the use of 2FA.",
                    "type": "boolean"
                  },
                  "external_id": {
                    "description": "ID used with external services in SCIM.",
                    "type": "string"
                  },
                  "ip_access": {
                    "description": "Array of IP addresses that are allowed to connect to the API as a user of this role.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "module_listing": {
                    "description": "Custom override for the admin app module bar navigation.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the role.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Roles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Roles"
        ]
      },
      "delete": {
        "summary": "Delete a Role",
        "description": "Delete an existing role",
        "operationId": "deleteRole",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Roles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/users": {
      "get": {
        "summary": "List Users",
        "description": "List the users.",
        "operationId": "getUsers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Users"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "post": {
        "summary": "Create a User",
        "description": "Create a new user.",
        "operationId": "createUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "summary": "Update Multiple Users",
        "description": "Update multiple users at the same time.",
        "tags": [
          "Users"
        ],
        "operationId": "updateUsers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Users"
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Users"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Users",
        "description": "Delete multiple existing users.",
        "tags": [
          "Users"
        ],
        "operationId": "deleteUsers",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Retrieve a User",
        "description": "Retrieve a single user by unique identifier.",
        "operationId": "getUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "summary": "Update a User",
        "description": "Update an existing user",
        "operationId": "updateUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "summary": "Delete a User",
        "description": "Delete an existing user",
        "operationId": "deleteUser",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/users/invite": {
      "post": {
        "summary": "Invite User(s)",
        "description": "Invites one or more users to this project. It creates a user with an invited status, and then sends an email to the user with instructions on how to activate their account.",
        "operationId": "invite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "description": "Email address or array of email addresses of the to-be-invited user(s).",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/invite/accept": {
      "post": {
        "summary": "Accept User Invite",
        "description": "Accepts and enables an invited user using a JWT invitation token.",
        "operationId": "acceptInvite",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "eyJh...KmUk",
                    "description": "Accept invite token."
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of the user.",
                    "format": "password",
                    "example": "d1r3ctu5"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/me": {
      "get": {
        "summary": "Retrieve Current User",
        "description": "Retrieve the currently authenticated user.",
        "operationId": "getMe",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "summary": "Update Current User",
        "description": "Update the currently authenticated user.",
        "operationId": "updateMe",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/me/track/page": {
      "patch": {
        "summary": "Update Last Page",
        "description": "Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Directus admin app from the last page you used.",
        "operationId": "updateLastUsedPageMe",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "last_page": {
                    "description": "Path of the page you used last.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/me/tfa/enable": {
      "post": {
        "summary": "Enable 2FA",
        "description": "Enables two-factor authentication for the currently authenticated user.",
        "operationId": "meTfaEnable",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/me/tfa/disable": {
      "post": {
        "summary": "Disable 2FA",
        "description": "Disables two-factor authentication for the currently authenticated user.",
        "operationId": "meTfaDisable",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/revisions": {
      "get": {
        "summary": "List Revisions",
        "description": "List the revisions.",
        "operationId": "getRevisions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Revisions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Revisions"
        ]
      }
    },
    "/revisions/{id}": {
      "get": {
        "summary": "Retrieve a Revision",
        "description": "Retrieve a single revision by unique identifier.",
        "operationId": "getRevision",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Revisions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Revisions"
        ]
      }
    },
    "/items/foods": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new foods item.",
        "tags": [
          "Items",
          "ItemsFoods"
        ],
        "operationId": "createItemsFoods",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoods"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoods"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoods"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the foods items.",
        "tags": [
          "Items",
          "ItemsFoods"
        ],
        "operationId": "readItemsFoods",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFoods"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple foods items at the same time.",
        "tags": [
          "Items",
          "ItemsFoods"
        ],
        "operationId": "updateItemsFoods",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoods"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoods"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoods"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing foods items.",
        "tags": [
          "Items",
          "ItemsFoods"
        ],
        "operationId": "deleteItemsFoods",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/foods/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single foods item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFoods"
        ],
        "operationId": "readSingleItemsFoods",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoods"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing foods item.",
        "tags": [
          "Items",
          "ItemsFoods"
        ],
        "operationId": "updateSingleItemsFoods",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFoods"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoods"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing foods item.",
        "tags": [
          "Items",
          "ItemsFoods"
        ],
        "operationId": "deleteSingleItemsFoods",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/foodoffers_markings": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new foodoffers_markings item.",
        "tags": [
          "Items",
          "ItemsFoodoffersMarkings"
        ],
        "operationId": "createItemsFoodoffersMarkings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodoffersMarkings"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodoffersMarkings"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodoffersMarkings"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the foodoffers_markings items.",
        "tags": [
          "Items",
          "ItemsFoodoffersMarkings"
        ],
        "operationId": "readItemsFoodoffersMarkings",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFoodoffersMarkings"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple foodoffers_markings items at the same time.",
        "tags": [
          "Items",
          "ItemsFoodoffersMarkings"
        ],
        "operationId": "updateItemsFoodoffersMarkings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodoffersMarkings"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodoffersMarkings"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodoffersMarkings"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing foodoffers_markings items.",
        "tags": [
          "Items",
          "ItemsFoodoffersMarkings"
        ],
        "operationId": "deleteItemsFoodoffersMarkings",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/foodoffers_markings/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single foodoffers_markings item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFoodoffersMarkings"
        ],
        "operationId": "readSingleItemsFoodoffersMarkings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodoffersMarkings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing foodoffers_markings item.",
        "tags": [
          "Items",
          "ItemsFoodoffersMarkings"
        ],
        "operationId": "updateSingleItemsFoodoffersMarkings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFoodoffersMarkings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodoffersMarkings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing foodoffers_markings item.",
        "tags": [
          "Items",
          "ItemsFoodoffersMarkings"
        ],
        "operationId": "deleteSingleItemsFoodoffersMarkings",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/foods_attributes_groups": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new foods_attributes_groups item.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesGroups"
        ],
        "operationId": "createItemsFoodsAttributesGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsAttributesGroups"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsAttributesGroups"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsAttributesGroups"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the foods_attributes_groups items.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesGroups"
        ],
        "operationId": "readItemsFoodsAttributesGroups",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFoodsAttributesGroups"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple foods_attributes_groups items at the same time.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesGroups"
        ],
        "operationId": "updateItemsFoodsAttributesGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsAttributesGroups"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsAttributesGroups"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsAttributesGroups"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing foods_attributes_groups items.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesGroups"
        ],
        "operationId": "deleteItemsFoodsAttributesGroups",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/foods_attributes_groups/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single foods_attributes_groups item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesGroups"
        ],
        "operationId": "readSingleItemsFoodsAttributesGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsAttributesGroups"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing foods_attributes_groups item.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesGroups"
        ],
        "operationId": "updateSingleItemsFoodsAttributesGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFoodsAttributesGroups"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsAttributesGroups"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing foods_attributes_groups item.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesGroups"
        ],
        "operationId": "deleteSingleItemsFoodsAttributesGroups",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/foods_attributes_groups_translations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new foods_attributes_groups_translations item.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesGroupsTranslations"
        ],
        "operationId": "createItemsFoodsAttributesGroupsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsAttributesGroupsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsAttributesGroupsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsAttributesGroupsTranslations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the foods_attributes_groups_translations items.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesGroupsTranslations"
        ],
        "operationId": "readItemsFoodsAttributesGroupsTranslations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFoodsAttributesGroupsTranslations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple foods_attributes_groups_translations items at the same time.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesGroupsTranslations"
        ],
        "operationId": "updateItemsFoodsAttributesGroupsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsAttributesGroupsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsAttributesGroupsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsAttributesGroupsTranslations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing foods_attributes_groups_translations items.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesGroupsTranslations"
        ],
        "operationId": "deleteItemsFoodsAttributesGroupsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/foods_attributes_groups_translations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single foods_attributes_groups_translations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesGroupsTranslations"
        ],
        "operationId": "readSingleItemsFoodsAttributesGroupsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsAttributesGroupsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing foods_attributes_groups_translations item.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesGroupsTranslations"
        ],
        "operationId": "updateSingleItemsFoodsAttributesGroupsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFoodsAttributesGroupsTranslations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsAttributesGroupsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing foods_attributes_groups_translations item.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesGroupsTranslations"
        ],
        "operationId": "deleteSingleItemsFoodsAttributesGroupsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/foods_attributes_translations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new foods_attributes_translations item.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesTranslations"
        ],
        "operationId": "createItemsFoodsAttributesTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsAttributesTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsAttributesTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsAttributesTranslations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the foods_attributes_translations items.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesTranslations"
        ],
        "operationId": "readItemsFoodsAttributesTranslations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFoodsAttributesTranslations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple foods_attributes_translations items at the same time.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesTranslations"
        ],
        "operationId": "updateItemsFoodsAttributesTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsAttributesTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsAttributesTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsAttributesTranslations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing foods_attributes_translations items.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesTranslations"
        ],
        "operationId": "deleteItemsFoodsAttributesTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/foods_attributes_translations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single foods_attributes_translations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesTranslations"
        ],
        "operationId": "readSingleItemsFoodsAttributesTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsAttributesTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing foods_attributes_translations item.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesTranslations"
        ],
        "operationId": "updateSingleItemsFoodsAttributesTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFoodsAttributesTranslations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsAttributesTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing foods_attributes_translations item.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesTranslations"
        ],
        "operationId": "deleteSingleItemsFoodsAttributesTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/foods_attributes_values": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new foods_attributes_values item.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesValues"
        ],
        "operationId": "createItemsFoodsAttributesValues",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsAttributesValues"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsAttributesValues"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsAttributesValues"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the foods_attributes_values items.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesValues"
        ],
        "operationId": "readItemsFoodsAttributesValues",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFoodsAttributesValues"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple foods_attributes_values items at the same time.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesValues"
        ],
        "operationId": "updateItemsFoodsAttributesValues",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsAttributesValues"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsAttributesValues"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsAttributesValues"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing foods_attributes_values items.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesValues"
        ],
        "operationId": "deleteItemsFoodsAttributesValues",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/foods_attributes_values/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single foods_attributes_values item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesValues"
        ],
        "operationId": "readSingleItemsFoodsAttributesValues",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsAttributesValues"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing foods_attributes_values item.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesValues"
        ],
        "operationId": "updateSingleItemsFoodsAttributesValues",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFoodsAttributesValues"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsAttributesValues"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing foods_attributes_values item.",
        "tags": [
          "Items",
          "ItemsFoodsAttributesValues"
        ],
        "operationId": "deleteSingleItemsFoodsAttributesValues",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/foods_categories": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new foods_categories item.",
        "tags": [
          "Items",
          "ItemsFoodsCategories"
        ],
        "operationId": "createItemsFoodsCategories",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsCategories"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsCategories"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsCategories"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the foods_categories items.",
        "tags": [
          "Items",
          "ItemsFoodsCategories"
        ],
        "operationId": "readItemsFoodsCategories",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFoodsCategories"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple foods_categories items at the same time.",
        "tags": [
          "Items",
          "ItemsFoodsCategories"
        ],
        "operationId": "updateItemsFoodsCategories",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsCategories"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsCategories"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsCategories"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing foods_categories items.",
        "tags": [
          "Items",
          "ItemsFoodsCategories"
        ],
        "operationId": "deleteItemsFoodsCategories",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/foods_categories/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single foods_categories item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFoodsCategories"
        ],
        "operationId": "readSingleItemsFoodsCategories",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsCategories"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing foods_categories item.",
        "tags": [
          "Items",
          "ItemsFoodsCategories"
        ],
        "operationId": "updateSingleItemsFoodsCategories",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFoodsCategories"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsCategories"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing foods_categories item.",
        "tags": [
          "Items",
          "ItemsFoodsCategories"
        ],
        "operationId": "deleteSingleItemsFoodsCategories",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/foods_categories_translations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new foods_categories_translations item.",
        "tags": [
          "Items",
          "ItemsFoodsCategoriesTranslations"
        ],
        "operationId": "createItemsFoodsCategoriesTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsCategoriesTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsCategoriesTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsCategoriesTranslations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the foods_categories_translations items.",
        "tags": [
          "Items",
          "ItemsFoodsCategoriesTranslations"
        ],
        "operationId": "readItemsFoodsCategoriesTranslations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFoodsCategoriesTranslations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple foods_categories_translations items at the same time.",
        "tags": [
          "Items",
          "ItemsFoodsCategoriesTranslations"
        ],
        "operationId": "updateItemsFoodsCategoriesTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsCategoriesTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsCategoriesTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsCategoriesTranslations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing foods_categories_translations items.",
        "tags": [
          "Items",
          "ItemsFoodsCategoriesTranslations"
        ],
        "operationId": "deleteItemsFoodsCategoriesTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/foods_categories_translations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single foods_categories_translations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFoodsCategoriesTranslations"
        ],
        "operationId": "readSingleItemsFoodsCategoriesTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsCategoriesTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing foods_categories_translations item.",
        "tags": [
          "Items",
          "ItemsFoodsCategoriesTranslations"
        ],
        "operationId": "updateSingleItemsFoodsCategoriesTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFoodsCategoriesTranslations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsCategoriesTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing foods_categories_translations item.",
        "tags": [
          "Items",
          "ItemsFoodsCategoriesTranslations"
        ],
        "operationId": "deleteSingleItemsFoodsCategoriesTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/foods_feedbacks": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new foods_feedbacks item.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacks"
        ],
        "operationId": "createItemsFoodsFeedbacks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsFeedbacks"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsFeedbacks"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsFeedbacks"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the foods_feedbacks items.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacks"
        ],
        "operationId": "readItemsFoodsFeedbacks",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFoodsFeedbacks"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple foods_feedbacks items at the same time.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacks"
        ],
        "operationId": "updateItemsFoodsFeedbacks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsFeedbacks"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsFeedbacks"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsFeedbacks"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing foods_feedbacks items.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacks"
        ],
        "operationId": "deleteItemsFoodsFeedbacks",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/foods_feedbacks/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single foods_feedbacks item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacks"
        ],
        "operationId": "readSingleItemsFoodsFeedbacks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsFeedbacks"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing foods_feedbacks item.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacks"
        ],
        "operationId": "updateSingleItemsFoodsFeedbacks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFoodsFeedbacks"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsFeedbacks"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing foods_feedbacks item.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacks"
        ],
        "operationId": "deleteSingleItemsFoodsFeedbacks",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/foods_feedbacks_foods_feedbacks_labels": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new foods_feedbacks_foods_feedbacks_labels item.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksFoodsFeedbacksLabels"
        ],
        "operationId": "createItemsFoodsFeedbacksFoodsFeedbacksLabels",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsFeedbacksFoodsFeedbacksLabels"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsFeedbacksFoodsFeedbacksLabels"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsFeedbacksFoodsFeedbacksLabels"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the foods_feedbacks_foods_feedbacks_labels items.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksFoodsFeedbacksLabels"
        ],
        "operationId": "readItemsFoodsFeedbacksFoodsFeedbacksLabels",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFoodsFeedbacksFoodsFeedbacksLabels"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple foods_feedbacks_foods_feedbacks_labels items at the same time.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksFoodsFeedbacksLabels"
        ],
        "operationId": "updateItemsFoodsFeedbacksFoodsFeedbacksLabels",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsFeedbacksFoodsFeedbacksLabels"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsFeedbacksFoodsFeedbacksLabels"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsFeedbacksFoodsFeedbacksLabels"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing foods_feedbacks_foods_feedbacks_labels items.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksFoodsFeedbacksLabels"
        ],
        "operationId": "deleteItemsFoodsFeedbacksFoodsFeedbacksLabels",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/foods_feedbacks_foods_feedbacks_labels/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single foods_feedbacks_foods_feedbacks_labels item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksFoodsFeedbacksLabels"
        ],
        "operationId": "readSingleItemsFoodsFeedbacksFoodsFeedbacksLabels",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsFeedbacksFoodsFeedbacksLabels"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing foods_feedbacks_foods_feedbacks_labels item.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksFoodsFeedbacksLabels"
        ],
        "operationId": "updateSingleItemsFoodsFeedbacksFoodsFeedbacksLabels",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFoodsFeedbacksFoodsFeedbacksLabels"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsFeedbacksFoodsFeedbacksLabels"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing foods_feedbacks_foods_feedbacks_labels item.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksFoodsFeedbacksLabels"
        ],
        "operationId": "deleteSingleItemsFoodsFeedbacksFoodsFeedbacksLabels",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/foodoffers": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new foodoffers item.",
        "tags": [
          "Items",
          "ItemsFoodoffers"
        ],
        "operationId": "createItemsFoodoffers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodoffers"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodoffers"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodoffers"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the foodoffers items.",
        "tags": [
          "Items",
          "ItemsFoodoffers"
        ],
        "operationId": "readItemsFoodoffers",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFoodoffers"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple foodoffers items at the same time.",
        "tags": [
          "Items",
          "ItemsFoodoffers"
        ],
        "operationId": "updateItemsFoodoffers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodoffers"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodoffers"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodoffers"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing foodoffers items.",
        "tags": [
          "Items",
          "ItemsFoodoffers"
        ],
        "operationId": "deleteItemsFoodoffers",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/foodoffers/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single foodoffers item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFoodoffers"
        ],
        "operationId": "readSingleItemsFoodoffers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodoffers"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing foodoffers item.",
        "tags": [
          "Items",
          "ItemsFoodoffers"
        ],
        "operationId": "updateSingleItemsFoodoffers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFoodoffers"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodoffers"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing foodoffers item.",
        "tags": [
          "Items",
          "ItemsFoodoffers"
        ],
        "operationId": "deleteSingleItemsFoodoffers",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/foodoffers_categories": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new foodoffers_categories item.",
        "tags": [
          "Items",
          "ItemsFoodoffersCategories"
        ],
        "operationId": "createItemsFoodoffersCategories",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodoffersCategories"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodoffersCategories"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodoffersCategories"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the foodoffers_categories items.",
        "tags": [
          "Items",
          "ItemsFoodoffersCategories"
        ],
        "operationId": "readItemsFoodoffersCategories",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFoodoffersCategories"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple foodoffers_categories items at the same time.",
        "tags": [
          "Items",
          "ItemsFoodoffersCategories"
        ],
        "operationId": "updateItemsFoodoffersCategories",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodoffersCategories"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodoffersCategories"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodoffersCategories"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing foodoffers_categories items.",
        "tags": [
          "Items",
          "ItemsFoodoffersCategories"
        ],
        "operationId": "deleteItemsFoodoffersCategories",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/foodoffers_categories/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single foodoffers_categories item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFoodoffersCategories"
        ],
        "operationId": "readSingleItemsFoodoffersCategories",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodoffersCategories"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing foodoffers_categories item.",
        "tags": [
          "Items",
          "ItemsFoodoffersCategories"
        ],
        "operationId": "updateSingleItemsFoodoffersCategories",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFoodoffersCategories"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodoffersCategories"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing foodoffers_categories item.",
        "tags": [
          "Items",
          "ItemsFoodoffersCategories"
        ],
        "operationId": "deleteSingleItemsFoodoffersCategories",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/foods_attributes": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new foods_attributes item.",
        "tags": [
          "Items",
          "ItemsFoodsAttributes"
        ],
        "operationId": "createItemsFoodsAttributes",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsAttributes"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsAttributes"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsAttributes"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the foods_attributes items.",
        "tags": [
          "Items",
          "ItemsFoodsAttributes"
        ],
        "operationId": "readItemsFoodsAttributes",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFoodsAttributes"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple foods_attributes items at the same time.",
        "tags": [
          "Items",
          "ItemsFoodsAttributes"
        ],
        "operationId": "updateItemsFoodsAttributes",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsAttributes"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsAttributes"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsAttributes"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing foods_attributes items.",
        "tags": [
          "Items",
          "ItemsFoodsAttributes"
        ],
        "operationId": "deleteItemsFoodsAttributes",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/foods_attributes/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single foods_attributes item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFoodsAttributes"
        ],
        "operationId": "readSingleItemsFoodsAttributes",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsAttributes"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing foods_attributes item.",
        "tags": [
          "Items",
          "ItemsFoodsAttributes"
        ],
        "operationId": "updateSingleItemsFoodsAttributes",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFoodsAttributes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsAttributes"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing foods_attributes item.",
        "tags": [
          "Items",
          "ItemsFoodsAttributes"
        ],
        "operationId": "deleteSingleItemsFoodsAttributes",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/foods_feedbacks_labels_translations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new foods_feedbacks_labels_translations item.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksLabelsTranslations"
        ],
        "operationId": "createItemsFoodsFeedbacksLabelsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabelsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabelsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabelsTranslations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the foods_feedbacks_labels_translations items.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksLabelsTranslations"
        ],
        "operationId": "readItemsFoodsFeedbacksLabelsTranslations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabelsTranslations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple foods_feedbacks_labels_translations items at the same time.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksLabelsTranslations"
        ],
        "operationId": "updateItemsFoodsFeedbacksLabelsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabelsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabelsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabelsTranslations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing foods_feedbacks_labels_translations items.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksLabelsTranslations"
        ],
        "operationId": "deleteItemsFoodsFeedbacksLabelsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/foods_feedbacks_labels_translations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single foods_feedbacks_labels_translations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksLabelsTranslations"
        ],
        "operationId": "readSingleItemsFoodsFeedbacksLabelsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabelsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing foods_feedbacks_labels_translations item.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksLabelsTranslations"
        ],
        "operationId": "updateSingleItemsFoodsFeedbacksLabelsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabelsTranslations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabelsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing foods_feedbacks_labels_translations item.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksLabelsTranslations"
        ],
        "operationId": "deleteSingleItemsFoodsFeedbacksLabelsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/foods_markings": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new foods_markings item.",
        "tags": [
          "Items",
          "ItemsFoodsMarkings"
        ],
        "operationId": "createItemsFoodsMarkings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsMarkings"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsMarkings"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsMarkings"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the foods_markings items.",
        "tags": [
          "Items",
          "ItemsFoodsMarkings"
        ],
        "operationId": "readItemsFoodsMarkings",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFoodsMarkings"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple foods_markings items at the same time.",
        "tags": [
          "Items",
          "ItemsFoodsMarkings"
        ],
        "operationId": "updateItemsFoodsMarkings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsMarkings"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsMarkings"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsMarkings"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing foods_markings items.",
        "tags": [
          "Items",
          "ItemsFoodsMarkings"
        ],
        "operationId": "deleteItemsFoodsMarkings",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/foods_markings/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single foods_markings item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFoodsMarkings"
        ],
        "operationId": "readSingleItemsFoodsMarkings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsMarkings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing foods_markings item.",
        "tags": [
          "Items",
          "ItemsFoodsMarkings"
        ],
        "operationId": "updateSingleItemsFoodsMarkings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFoodsMarkings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsMarkings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing foods_markings item.",
        "tags": [
          "Items",
          "ItemsFoodsMarkings"
        ],
        "operationId": "deleteSingleItemsFoodsMarkings",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/form_answers_files": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new form_answers_files item.",
        "tags": [
          "Items",
          "ItemsFormAnswersFiles"
        ],
        "operationId": "createItemsFormAnswersFiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormAnswersFiles"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormAnswersFiles"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormAnswersFiles"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the form_answers_files items.",
        "tags": [
          "Items",
          "ItemsFormAnswersFiles"
        ],
        "operationId": "readItemsFormAnswersFiles",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFormAnswersFiles"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple form_answers_files items at the same time.",
        "tags": [
          "Items",
          "ItemsFormAnswersFiles"
        ],
        "operationId": "updateItemsFormAnswersFiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormAnswersFiles"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormAnswersFiles"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormAnswersFiles"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing form_answers_files items.",
        "tags": [
          "Items",
          "ItemsFormAnswersFiles"
        ],
        "operationId": "deleteItemsFormAnswersFiles",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/form_answers_files/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single form_answers_files item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFormAnswersFiles"
        ],
        "operationId": "readSingleItemsFormAnswersFiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormAnswersFiles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing form_answers_files item.",
        "tags": [
          "Items",
          "ItemsFormAnswersFiles"
        ],
        "operationId": "updateSingleItemsFormAnswersFiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFormAnswersFiles"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormAnswersFiles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing form_answers_files item.",
        "tags": [
          "Items",
          "ItemsFormAnswersFiles"
        ],
        "operationId": "deleteSingleItemsFormAnswersFiles",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/form_fields": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new form_fields item.",
        "tags": [
          "Items",
          "ItemsFormFields"
        ],
        "operationId": "createItemsFormFields",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormFields"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormFields"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormFields"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the form_fields items.",
        "tags": [
          "Items",
          "ItemsFormFields"
        ],
        "operationId": "readItemsFormFields",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFormFields"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple form_fields items at the same time.",
        "tags": [
          "Items",
          "ItemsFormFields"
        ],
        "operationId": "updateItemsFormFields",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormFields"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormFields"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormFields"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing form_fields items.",
        "tags": [
          "Items",
          "ItemsFormFields"
        ],
        "operationId": "deleteItemsFormFields",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/form_fields/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single form_fields item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFormFields"
        ],
        "operationId": "readSingleItemsFormFields",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormFields"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing form_fields item.",
        "tags": [
          "Items",
          "ItemsFormFields"
        ],
        "operationId": "updateSingleItemsFormFields",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFormFields"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormFields"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing form_fields item.",
        "tags": [
          "Items",
          "ItemsFormFields"
        ],
        "operationId": "deleteSingleItemsFormFields",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/form_extracts": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new form_extracts item.",
        "tags": [
          "Items",
          "ItemsFormExtracts"
        ],
        "operationId": "createItemsFormExtracts",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormExtracts"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormExtracts"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormExtracts"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the form_extracts items.",
        "tags": [
          "Items",
          "ItemsFormExtracts"
        ],
        "operationId": "readItemsFormExtracts",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFormExtracts"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple form_extracts items at the same time.",
        "tags": [
          "Items",
          "ItemsFormExtracts"
        ],
        "operationId": "updateItemsFormExtracts",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormExtracts"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormExtracts"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormExtracts"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing form_extracts items.",
        "tags": [
          "Items",
          "ItemsFormExtracts"
        ],
        "operationId": "deleteItemsFormExtracts",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/form_extracts/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single form_extracts item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFormExtracts"
        ],
        "operationId": "readSingleItemsFormExtracts",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormExtracts"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing form_extracts item.",
        "tags": [
          "Items",
          "ItemsFormExtracts"
        ],
        "operationId": "updateSingleItemsFormExtracts",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFormExtracts"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormExtracts"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing form_extracts item.",
        "tags": [
          "Items",
          "ItemsFormExtracts"
        ],
        "operationId": "deleteSingleItemsFormExtracts",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/form_extracts_form_fields": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new form_extracts_form_fields item.",
        "tags": [
          "Items",
          "ItemsFormExtractsFormFields"
        ],
        "operationId": "createItemsFormExtractsFormFields",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormExtractsFormFields"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormExtractsFormFields"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormExtractsFormFields"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the form_extracts_form_fields items.",
        "tags": [
          "Items",
          "ItemsFormExtractsFormFields"
        ],
        "operationId": "readItemsFormExtractsFormFields",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFormExtractsFormFields"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple form_extracts_form_fields items at the same time.",
        "tags": [
          "Items",
          "ItemsFormExtractsFormFields"
        ],
        "operationId": "updateItemsFormExtractsFormFields",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormExtractsFormFields"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormExtractsFormFields"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormExtractsFormFields"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing form_extracts_form_fields items.",
        "tags": [
          "Items",
          "ItemsFormExtractsFormFields"
        ],
        "operationId": "deleteItemsFormExtractsFormFields",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/form_extracts_form_fields/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single form_extracts_form_fields item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFormExtractsFormFields"
        ],
        "operationId": "readSingleItemsFormExtractsFormFields",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormExtractsFormFields"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing form_extracts_form_fields item.",
        "tags": [
          "Items",
          "ItemsFormExtractsFormFields"
        ],
        "operationId": "updateSingleItemsFormExtractsFormFields",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFormExtractsFormFields"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormExtractsFormFields"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing form_extracts_form_fields item.",
        "tags": [
          "Items",
          "ItemsFormExtractsFormFields"
        ],
        "operationId": "deleteSingleItemsFormExtractsFormFields",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/forms": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new forms item.",
        "tags": [
          "Items",
          "ItemsForms"
        ],
        "operationId": "createItemsForms",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsForms"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsForms"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsForms"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the forms items.",
        "tags": [
          "Items",
          "ItemsForms"
        ],
        "operationId": "readItemsForms",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsForms"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple forms items at the same time.",
        "tags": [
          "Items",
          "ItemsForms"
        ],
        "operationId": "updateItemsForms",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsForms"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsForms"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsForms"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing forms items.",
        "tags": [
          "Items",
          "ItemsForms"
        ],
        "operationId": "deleteItemsForms",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/forms/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single forms item by unique identifier.",
        "tags": [
          "Items",
          "ItemsForms"
        ],
        "operationId": "readSingleItemsForms",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsForms"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing forms item.",
        "tags": [
          "Items",
          "ItemsForms"
        ],
        "operationId": "updateSingleItemsForms",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsForms"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsForms"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing forms item.",
        "tags": [
          "Items",
          "ItemsForms"
        ],
        "operationId": "deleteSingleItemsForms",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/form_submissions": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new form_submissions item.",
        "tags": [
          "Items",
          "ItemsFormSubmissions"
        ],
        "operationId": "createItemsFormSubmissions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormSubmissions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormSubmissions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormSubmissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the form_submissions items.",
        "tags": [
          "Items",
          "ItemsFormSubmissions"
        ],
        "operationId": "readItemsFormSubmissions",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFormSubmissions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple form_submissions items at the same time.",
        "tags": [
          "Items",
          "ItemsFormSubmissions"
        ],
        "operationId": "updateItemsFormSubmissions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormSubmissions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormSubmissions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormSubmissions"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing form_submissions items.",
        "tags": [
          "Items",
          "ItemsFormSubmissions"
        ],
        "operationId": "deleteItemsFormSubmissions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/form_submissions/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single form_submissions item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFormSubmissions"
        ],
        "operationId": "readSingleItemsFormSubmissions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormSubmissions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing form_submissions item.",
        "tags": [
          "Items",
          "ItemsFormSubmissions"
        ],
        "operationId": "updateSingleItemsFormSubmissions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFormSubmissions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormSubmissions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing form_submissions item.",
        "tags": [
          "Items",
          "ItemsFormSubmissions"
        ],
        "operationId": "deleteSingleItemsFormSubmissions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/form_categories": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new form_categories item.",
        "tags": [
          "Items",
          "ItemsFormCategories"
        ],
        "operationId": "createItemsFormCategories",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormCategories"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormCategories"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormCategories"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the form_categories items.",
        "tags": [
          "Items",
          "ItemsFormCategories"
        ],
        "operationId": "readItemsFormCategories",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFormCategories"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple form_categories items at the same time.",
        "tags": [
          "Items",
          "ItemsFormCategories"
        ],
        "operationId": "updateItemsFormCategories",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormCategories"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormCategories"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormCategories"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing form_categories items.",
        "tags": [
          "Items",
          "ItemsFormCategories"
        ],
        "operationId": "deleteItemsFormCategories",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/form_categories/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single form_categories item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFormCategories"
        ],
        "operationId": "readSingleItemsFormCategories",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormCategories"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing form_categories item.",
        "tags": [
          "Items",
          "ItemsFormCategories"
        ],
        "operationId": "updateSingleItemsFormCategories",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFormCategories"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormCategories"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing form_categories item.",
        "tags": [
          "Items",
          "ItemsFormCategories"
        ],
        "operationId": "deleteSingleItemsFormCategories",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/form_fields_translations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new form_fields_translations item.",
        "tags": [
          "Items",
          "ItemsFormFieldsTranslations"
        ],
        "operationId": "createItemsFormFieldsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormFieldsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormFieldsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormFieldsTranslations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the form_fields_translations items.",
        "tags": [
          "Items",
          "ItemsFormFieldsTranslations"
        ],
        "operationId": "readItemsFormFieldsTranslations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFormFieldsTranslations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple form_fields_translations items at the same time.",
        "tags": [
          "Items",
          "ItemsFormFieldsTranslations"
        ],
        "operationId": "updateItemsFormFieldsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormFieldsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormFieldsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormFieldsTranslations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing form_fields_translations items.",
        "tags": [
          "Items",
          "ItemsFormFieldsTranslations"
        ],
        "operationId": "deleteItemsFormFieldsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/form_fields_translations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single form_fields_translations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFormFieldsTranslations"
        ],
        "operationId": "readSingleItemsFormFieldsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormFieldsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing form_fields_translations item.",
        "tags": [
          "Items",
          "ItemsFormFieldsTranslations"
        ],
        "operationId": "updateSingleItemsFormFieldsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFormFieldsTranslations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormFieldsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing form_fields_translations item.",
        "tags": [
          "Items",
          "ItemsFormFieldsTranslations"
        ],
        "operationId": "deleteSingleItemsFormFieldsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/foods_feedbacks_labels": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new foods_feedbacks_labels item.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksLabels"
        ],
        "operationId": "createItemsFoodsFeedbacksLabels",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabels"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabels"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabels"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the foods_feedbacks_labels items.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksLabels"
        ],
        "operationId": "readItemsFoodsFeedbacksLabels",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabels"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple foods_feedbacks_labels items at the same time.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksLabels"
        ],
        "operationId": "updateItemsFoodsFeedbacksLabels",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabels"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabels"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabels"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing foods_feedbacks_labels items.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksLabels"
        ],
        "operationId": "deleteItemsFoodsFeedbacksLabels",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/foods_feedbacks_labels/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single foods_feedbacks_labels item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksLabels"
        ],
        "operationId": "readSingleItemsFoodsFeedbacksLabels",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabels"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing foods_feedbacks_labels item.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksLabels"
        ],
        "operationId": "updateSingleItemsFoodsFeedbacksLabels",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabels"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabels"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing foods_feedbacks_labels item.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksLabels"
        ],
        "operationId": "deleteSingleItemsFoodsFeedbacksLabels",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/foods_feedbacks_labels_entries": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new foods_feedbacks_labels_entries item.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksLabelsEntries"
        ],
        "operationId": "createItemsFoodsFeedbacksLabelsEntries",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabelsEntries"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabelsEntries"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabelsEntries"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the foods_feedbacks_labels_entries items.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksLabelsEntries"
        ],
        "operationId": "readItemsFoodsFeedbacksLabelsEntries",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabelsEntries"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple foods_feedbacks_labels_entries items at the same time.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksLabelsEntries"
        ],
        "operationId": "updateItemsFoodsFeedbacksLabelsEntries",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabelsEntries"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabelsEntries"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabelsEntries"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing foods_feedbacks_labels_entries items.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksLabelsEntries"
        ],
        "operationId": "deleteItemsFoodsFeedbacksLabelsEntries",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/foods_feedbacks_labels_entries/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single foods_feedbacks_labels_entries item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksLabelsEntries"
        ],
        "operationId": "readSingleItemsFoodsFeedbacksLabelsEntries",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabelsEntries"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing foods_feedbacks_labels_entries item.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksLabelsEntries"
        ],
        "operationId": "updateSingleItemsFoodsFeedbacksLabelsEntries",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabelsEntries"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabelsEntries"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing foods_feedbacks_labels_entries item.",
        "tags": [
          "Items",
          "ItemsFoodsFeedbacksLabelsEntries"
        ],
        "operationId": "deleteSingleItemsFoodsFeedbacksLabelsEntries",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/foods_translations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new foods_translations item.",
        "tags": [
          "Items",
          "ItemsFoodsTranslations"
        ],
        "operationId": "createItemsFoodsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsTranslations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the foods_translations items.",
        "tags": [
          "Items",
          "ItemsFoodsTranslations"
        ],
        "operationId": "readItemsFoodsTranslations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFoodsTranslations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple foods_translations items at the same time.",
        "tags": [
          "Items",
          "ItemsFoodsTranslations"
        ],
        "operationId": "updateItemsFoodsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodsTranslations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing foods_translations items.",
        "tags": [
          "Items",
          "ItemsFoodsTranslations"
        ],
        "operationId": "deleteItemsFoodsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/foods_translations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single foods_translations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFoodsTranslations"
        ],
        "operationId": "readSingleItemsFoodsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing foods_translations item.",
        "tags": [
          "Items",
          "ItemsFoodsTranslations"
        ],
        "operationId": "updateSingleItemsFoodsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFoodsTranslations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing foods_translations item.",
        "tags": [
          "Items",
          "ItemsFoodsTranslations"
        ],
        "operationId": "deleteSingleItemsFoodsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/form_answers": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new form_answers item.",
        "tags": [
          "Items",
          "ItemsFormAnswers"
        ],
        "operationId": "createItemsFormAnswers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormAnswers"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormAnswers"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormAnswers"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the form_answers items.",
        "tags": [
          "Items",
          "ItemsFormAnswers"
        ],
        "operationId": "readItemsFormAnswers",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFormAnswers"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple form_answers items at the same time.",
        "tags": [
          "Items",
          "ItemsFormAnswers"
        ],
        "operationId": "updateItemsFormAnswers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormAnswers"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormAnswers"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormAnswers"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing form_answers items.",
        "tags": [
          "Items",
          "ItemsFormAnswers"
        ],
        "operationId": "deleteItemsFormAnswers",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/form_answers/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single form_answers item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFormAnswers"
        ],
        "operationId": "readSingleItemsFormAnswers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormAnswers"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing form_answers item.",
        "tags": [
          "Items",
          "ItemsFormAnswers"
        ],
        "operationId": "updateSingleItemsFormAnswers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFormAnswers"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormAnswers"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing form_answers item.",
        "tags": [
          "Items",
          "ItemsFormAnswers"
        ],
        "operationId": "deleteSingleItemsFormAnswers",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/markings": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new markings item.",
        "tags": [
          "Items",
          "ItemsMarkings"
        ],
        "operationId": "createItemsMarkings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsMarkings"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsMarkings"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsMarkings"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the markings items.",
        "tags": [
          "Items",
          "ItemsMarkings"
        ],
        "operationId": "readItemsMarkings",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsMarkings"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple markings items at the same time.",
        "tags": [
          "Items",
          "ItemsMarkings"
        ],
        "operationId": "updateItemsMarkings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsMarkings"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsMarkings"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsMarkings"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing markings items.",
        "tags": [
          "Items",
          "ItemsMarkings"
        ],
        "operationId": "deleteItemsMarkings",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/markings/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single markings item by unique identifier.",
        "tags": [
          "Items",
          "ItemsMarkings"
        ],
        "operationId": "readSingleItemsMarkings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsMarkings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing markings item.",
        "tags": [
          "Items",
          "ItemsMarkings"
        ],
        "operationId": "updateSingleItemsMarkings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsMarkings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsMarkings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing markings item.",
        "tags": [
          "Items",
          "ItemsMarkings"
        ],
        "operationId": "deleteSingleItemsMarkings",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/markings_exclusions": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new markings_exclusions item.",
        "tags": [
          "Items",
          "ItemsMarkingsExclusions"
        ],
        "operationId": "createItemsMarkingsExclusions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsMarkingsExclusions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsMarkingsExclusions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsMarkingsExclusions"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the markings_exclusions items.",
        "tags": [
          "Items",
          "ItemsMarkingsExclusions"
        ],
        "operationId": "readItemsMarkingsExclusions",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsMarkingsExclusions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple markings_exclusions items at the same time.",
        "tags": [
          "Items",
          "ItemsMarkingsExclusions"
        ],
        "operationId": "updateItemsMarkingsExclusions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsMarkingsExclusions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsMarkingsExclusions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsMarkingsExclusions"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing markings_exclusions items.",
        "tags": [
          "Items",
          "ItemsMarkingsExclusions"
        ],
        "operationId": "deleteItemsMarkingsExclusions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/markings_exclusions/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single markings_exclusions item by unique identifier.",
        "tags": [
          "Items",
          "ItemsMarkingsExclusions"
        ],
        "operationId": "readSingleItemsMarkingsExclusions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsMarkingsExclusions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing markings_exclusions item.",
        "tags": [
          "Items",
          "ItemsMarkingsExclusions"
        ],
        "operationId": "updateSingleItemsMarkingsExclusions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsMarkingsExclusions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsMarkingsExclusions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing markings_exclusions item.",
        "tags": [
          "Items",
          "ItemsMarkingsExclusions"
        ],
        "operationId": "deleteSingleItemsMarkingsExclusions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/forms_translations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new forms_translations item.",
        "tags": [
          "Items",
          "ItemsFormsTranslations"
        ],
        "operationId": "createItemsFormsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormsTranslations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the forms_translations items.",
        "tags": [
          "Items",
          "ItemsFormsTranslations"
        ],
        "operationId": "readItemsFormsTranslations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFormsTranslations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple forms_translations items at the same time.",
        "tags": [
          "Items",
          "ItemsFormsTranslations"
        ],
        "operationId": "updateItemsFormsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormsTranslations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing forms_translations items.",
        "tags": [
          "Items",
          "ItemsFormsTranslations"
        ],
        "operationId": "deleteItemsFormsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/forms_translations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single forms_translations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFormsTranslations"
        ],
        "operationId": "readSingleItemsFormsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing forms_translations item.",
        "tags": [
          "Items",
          "ItemsFormsTranslations"
        ],
        "operationId": "updateSingleItemsFormsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFormsTranslations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing forms_translations item.",
        "tags": [
          "Items",
          "ItemsFormsTranslations"
        ],
        "operationId": "deleteSingleItemsFormsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/markings_groups_translations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new markings_groups_translations item.",
        "tags": [
          "Items",
          "ItemsMarkingsGroupsTranslations"
        ],
        "operationId": "createItemsMarkingsGroupsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsMarkingsGroupsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsMarkingsGroupsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsMarkingsGroupsTranslations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the markings_groups_translations items.",
        "tags": [
          "Items",
          "ItemsMarkingsGroupsTranslations"
        ],
        "operationId": "readItemsMarkingsGroupsTranslations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsMarkingsGroupsTranslations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple markings_groups_translations items at the same time.",
        "tags": [
          "Items",
          "ItemsMarkingsGroupsTranslations"
        ],
        "operationId": "updateItemsMarkingsGroupsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsMarkingsGroupsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsMarkingsGroupsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsMarkingsGroupsTranslations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing markings_groups_translations items.",
        "tags": [
          "Items",
          "ItemsMarkingsGroupsTranslations"
        ],
        "operationId": "deleteItemsMarkingsGroupsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/markings_groups_translations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single markings_groups_translations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsMarkingsGroupsTranslations"
        ],
        "operationId": "readSingleItemsMarkingsGroupsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsMarkingsGroupsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing markings_groups_translations item.",
        "tags": [
          "Items",
          "ItemsMarkingsGroupsTranslations"
        ],
        "operationId": "updateSingleItemsMarkingsGroupsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsMarkingsGroupsTranslations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsMarkingsGroupsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing markings_groups_translations item.",
        "tags": [
          "Items",
          "ItemsMarkingsGroupsTranslations"
        ],
        "operationId": "deleteSingleItemsMarkingsGroupsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/markings_translations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new markings_translations item.",
        "tags": [
          "Items",
          "ItemsMarkingsTranslations"
        ],
        "operationId": "createItemsMarkingsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsMarkingsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsMarkingsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsMarkingsTranslations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the markings_translations items.",
        "tags": [
          "Items",
          "ItemsMarkingsTranslations"
        ],
        "operationId": "readItemsMarkingsTranslations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsMarkingsTranslations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple markings_translations items at the same time.",
        "tags": [
          "Items",
          "ItemsMarkingsTranslations"
        ],
        "operationId": "updateItemsMarkingsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsMarkingsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsMarkingsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsMarkingsTranslations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing markings_translations items.",
        "tags": [
          "Items",
          "ItemsMarkingsTranslations"
        ],
        "operationId": "deleteItemsMarkingsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/markings_translations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single markings_translations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsMarkingsTranslations"
        ],
        "operationId": "readSingleItemsMarkingsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsMarkingsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing markings_translations item.",
        "tags": [
          "Items",
          "ItemsMarkingsTranslations"
        ],
        "operationId": "updateSingleItemsMarkingsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsMarkingsTranslations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsMarkingsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing markings_translations item.",
        "tags": [
          "Items",
          "ItemsMarkingsTranslations"
        ],
        "operationId": "deleteSingleItemsMarkingsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/news": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new news item.",
        "tags": [
          "Items",
          "ItemsNews"
        ],
        "operationId": "createItemsNews",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsNews"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsNews"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsNews"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the news items.",
        "tags": [
          "Items",
          "ItemsNews"
        ],
        "operationId": "readItemsNews",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsNews"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple news items at the same time.",
        "tags": [
          "Items",
          "ItemsNews"
        ],
        "operationId": "updateItemsNews",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsNews"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsNews"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsNews"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing news items.",
        "tags": [
          "Items",
          "ItemsNews"
        ],
        "operationId": "deleteItemsNews",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/news/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single news item by unique identifier.",
        "tags": [
          "Items",
          "ItemsNews"
        ],
        "operationId": "readSingleItemsNews",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsNews"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing news item.",
        "tags": [
          "Items",
          "ItemsNews"
        ],
        "operationId": "updateSingleItemsNews",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsNews"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsNews"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing news item.",
        "tags": [
          "Items",
          "ItemsNews"
        ],
        "operationId": "deleteSingleItemsNews",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/news_translations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new news_translations item.",
        "tags": [
          "Items",
          "ItemsNewsTranslations"
        ],
        "operationId": "createItemsNewsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsNewsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsNewsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsNewsTranslations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the news_translations items.",
        "tags": [
          "Items",
          "ItemsNewsTranslations"
        ],
        "operationId": "readItemsNewsTranslations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsNewsTranslations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple news_translations items at the same time.",
        "tags": [
          "Items",
          "ItemsNewsTranslations"
        ],
        "operationId": "updateItemsNewsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsNewsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsNewsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsNewsTranslations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing news_translations items.",
        "tags": [
          "Items",
          "ItemsNewsTranslations"
        ],
        "operationId": "deleteItemsNewsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/news_translations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single news_translations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsNewsTranslations"
        ],
        "operationId": "readSingleItemsNewsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsNewsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing news_translations item.",
        "tags": [
          "Items",
          "ItemsNewsTranslations"
        ],
        "operationId": "updateSingleItemsNewsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsNewsTranslations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsNewsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing news_translations item.",
        "tags": [
          "Items",
          "ItemsNewsTranslations"
        ],
        "operationId": "deleteSingleItemsNewsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/popup_events_canteens": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new popup_events_canteens item.",
        "tags": [
          "Items",
          "ItemsPopupEventsCanteens"
        ],
        "operationId": "createItemsPopupEventsCanteens",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPopupEventsCanteens"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPopupEventsCanteens"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsPopupEventsCanteens"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the popup_events_canteens items.",
        "tags": [
          "Items",
          "ItemsPopupEventsCanteens"
        ],
        "operationId": "readItemsPopupEventsCanteens",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPopupEventsCanteens"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple popup_events_canteens items at the same time.",
        "tags": [
          "Items",
          "ItemsPopupEventsCanteens"
        ],
        "operationId": "updateItemsPopupEventsCanteens",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPopupEventsCanteens"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPopupEventsCanteens"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsPopupEventsCanteens"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing popup_events_canteens items.",
        "tags": [
          "Items",
          "ItemsPopupEventsCanteens"
        ],
        "operationId": "deleteItemsPopupEventsCanteens",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/popup_events_canteens/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single popup_events_canteens item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPopupEventsCanteens"
        ],
        "operationId": "readSingleItemsPopupEventsCanteens",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPopupEventsCanteens"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing popup_events_canteens item.",
        "tags": [
          "Items",
          "ItemsPopupEventsCanteens"
        ],
        "operationId": "updateSingleItemsPopupEventsCanteens",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPopupEventsCanteens"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPopupEventsCanteens"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing popup_events_canteens item.",
        "tags": [
          "Items",
          "ItemsPopupEventsCanteens"
        ],
        "operationId": "deleteSingleItemsPopupEventsCanteens",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/popup_events_translations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new popup_events_translations item.",
        "tags": [
          "Items",
          "ItemsPopupEventsTranslations"
        ],
        "operationId": "createItemsPopupEventsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPopupEventsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPopupEventsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsPopupEventsTranslations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the popup_events_translations items.",
        "tags": [
          "Items",
          "ItemsPopupEventsTranslations"
        ],
        "operationId": "readItemsPopupEventsTranslations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPopupEventsTranslations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple popup_events_translations items at the same time.",
        "tags": [
          "Items",
          "ItemsPopupEventsTranslations"
        ],
        "operationId": "updateItemsPopupEventsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPopupEventsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPopupEventsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsPopupEventsTranslations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing popup_events_translations items.",
        "tags": [
          "Items",
          "ItemsPopupEventsTranslations"
        ],
        "operationId": "deleteItemsPopupEventsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/popup_events_translations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single popup_events_translations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPopupEventsTranslations"
        ],
        "operationId": "readSingleItemsPopupEventsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPopupEventsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing popup_events_translations item.",
        "tags": [
          "Items",
          "ItemsPopupEventsTranslations"
        ],
        "operationId": "updateSingleItemsPopupEventsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPopupEventsTranslations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPopupEventsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing popup_events_translations item.",
        "tags": [
          "Items",
          "ItemsPopupEventsTranslations"
        ],
        "operationId": "deleteSingleItemsPopupEventsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/languages": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new languages item.",
        "tags": [
          "Items",
          "ItemsLanguages"
        ],
        "operationId": "createItemsLanguages",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsLanguages"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsLanguages"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsLanguages"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the languages items.",
        "tags": [
          "Items",
          "ItemsLanguages"
        ],
        "operationId": "readItemsLanguages",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsLanguages"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple languages items at the same time.",
        "tags": [
          "Items",
          "ItemsLanguages"
        ],
        "operationId": "updateItemsLanguages",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsLanguages"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsLanguages"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsLanguages"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing languages items.",
        "tags": [
          "Items",
          "ItemsLanguages"
        ],
        "operationId": "deleteItemsLanguages",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/languages/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single languages item by unique identifier.",
        "tags": [
          "Items",
          "ItemsLanguages"
        ],
        "operationId": "readSingleItemsLanguages",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsLanguages"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing languages item.",
        "tags": [
          "Items",
          "ItemsLanguages"
        ],
        "operationId": "updateSingleItemsLanguages",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsLanguages"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing languages item.",
        "tags": [
          "Items",
          "ItemsLanguages"
        ],
        "operationId": "deleteSingleItemsLanguages",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/mails_files": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new mails_files item.",
        "tags": [
          "Items",
          "ItemsMailsFiles"
        ],
        "operationId": "createItemsMailsFiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsMailsFiles"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsMailsFiles"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsMailsFiles"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the mails_files items.",
        "tags": [
          "Items",
          "ItemsMailsFiles"
        ],
        "operationId": "readItemsMailsFiles",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsMailsFiles"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple mails_files items at the same time.",
        "tags": [
          "Items",
          "ItemsMailsFiles"
        ],
        "operationId": "updateItemsMailsFiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsMailsFiles"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsMailsFiles"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsMailsFiles"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing mails_files items.",
        "tags": [
          "Items",
          "ItemsMailsFiles"
        ],
        "operationId": "deleteItemsMailsFiles",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/mails_files/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single mails_files item by unique identifier.",
        "tags": [
          "Items",
          "ItemsMailsFiles"
        ],
        "operationId": "readSingleItemsMailsFiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsMailsFiles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing mails_files item.",
        "tags": [
          "Items",
          "ItemsMailsFiles"
        ],
        "operationId": "updateSingleItemsMailsFiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsMailsFiles"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsMailsFiles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing mails_files item.",
        "tags": [
          "Items",
          "ItemsMailsFiles"
        ],
        "operationId": "deleteSingleItemsMailsFiles",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/mails": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new mails item.",
        "tags": [
          "Items",
          "ItemsMails"
        ],
        "operationId": "createItemsMails",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsMails"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsMails"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsMails"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the mails items.",
        "tags": [
          "Items",
          "ItemsMails"
        ],
        "operationId": "readItemsMails",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsMails"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple mails items at the same time.",
        "tags": [
          "Items",
          "ItemsMails"
        ],
        "operationId": "updateItemsMails",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsMails"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsMails"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsMails"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing mails items.",
        "tags": [
          "Items",
          "ItemsMails"
        ],
        "operationId": "deleteItemsMails",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/mails/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single mails item by unique identifier.",
        "tags": [
          "Items",
          "ItemsMails"
        ],
        "operationId": "readSingleItemsMails",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsMails"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing mails item.",
        "tags": [
          "Items",
          "ItemsMails"
        ],
        "operationId": "updateSingleItemsMails",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsMails"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsMails"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing mails item.",
        "tags": [
          "Items",
          "ItemsMails"
        ],
        "operationId": "deleteSingleItemsMails",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/markings_groups": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new markings_groups item.",
        "tags": [
          "Items",
          "ItemsMarkingsGroups"
        ],
        "operationId": "createItemsMarkingsGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsMarkingsGroups"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsMarkingsGroups"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsMarkingsGroups"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the markings_groups items.",
        "tags": [
          "Items",
          "ItemsMarkingsGroups"
        ],
        "operationId": "readItemsMarkingsGroups",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsMarkingsGroups"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple markings_groups items at the same time.",
        "tags": [
          "Items",
          "ItemsMarkingsGroups"
        ],
        "operationId": "updateItemsMarkingsGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsMarkingsGroups"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsMarkingsGroups"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsMarkingsGroups"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing markings_groups items.",
        "tags": [
          "Items",
          "ItemsMarkingsGroups"
        ],
        "operationId": "deleteItemsMarkingsGroups",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/markings_groups/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single markings_groups item by unique identifier.",
        "tags": [
          "Items",
          "ItemsMarkingsGroups"
        ],
        "operationId": "readSingleItemsMarkingsGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsMarkingsGroups"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing markings_groups item.",
        "tags": [
          "Items",
          "ItemsMarkingsGroups"
        ],
        "operationId": "updateSingleItemsMarkingsGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsMarkingsGroups"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsMarkingsGroups"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing markings_groups item.",
        "tags": [
          "Items",
          "ItemsMarkingsGroups"
        ],
        "operationId": "deleteSingleItemsMarkingsGroups",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/popup_events": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new popup_events item.",
        "tags": [
          "Items",
          "ItemsPopupEvents"
        ],
        "operationId": "createItemsPopupEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPopupEvents"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPopupEvents"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsPopupEvents"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the popup_events items.",
        "tags": [
          "Items",
          "ItemsPopupEvents"
        ],
        "operationId": "readItemsPopupEvents",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPopupEvents"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple popup_events items at the same time.",
        "tags": [
          "Items",
          "ItemsPopupEvents"
        ],
        "operationId": "updateItemsPopupEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPopupEvents"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPopupEvents"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsPopupEvents"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing popup_events items.",
        "tags": [
          "Items",
          "ItemsPopupEvents"
        ],
        "operationId": "deleteItemsPopupEvents",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/popup_events/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single popup_events item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPopupEvents"
        ],
        "operationId": "readSingleItemsPopupEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPopupEvents"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing popup_events item.",
        "tags": [
          "Items",
          "ItemsPopupEvents"
        ],
        "operationId": "updateSingleItemsPopupEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPopupEvents"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPopupEvents"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing popup_events item.",
        "tags": [
          "Items",
          "ItemsPopupEvents"
        ],
        "operationId": "deleteSingleItemsPopupEvents",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/utilizations_entries": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new utilizations_entries item.",
        "tags": [
          "Items",
          "ItemsUtilizationsEntries"
        ],
        "operationId": "createItemsUtilizationsEntries",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsUtilizationsEntries"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsUtilizationsEntries"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsUtilizationsEntries"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the utilizations_entries items.",
        "tags": [
          "Items",
          "ItemsUtilizationsEntries"
        ],
        "operationId": "readItemsUtilizationsEntries",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsUtilizationsEntries"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple utilizations_entries items at the same time.",
        "tags": [
          "Items",
          "ItemsUtilizationsEntries"
        ],
        "operationId": "updateItemsUtilizationsEntries",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsUtilizationsEntries"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsUtilizationsEntries"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsUtilizationsEntries"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing utilizations_entries items.",
        "tags": [
          "Items",
          "ItemsUtilizationsEntries"
        ],
        "operationId": "deleteItemsUtilizationsEntries",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/utilizations_entries/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single utilizations_entries item by unique identifier.",
        "tags": [
          "Items",
          "ItemsUtilizationsEntries"
        ],
        "operationId": "readSingleItemsUtilizationsEntries",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsUtilizationsEntries"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing utilizations_entries item.",
        "tags": [
          "Items",
          "ItemsUtilizationsEntries"
        ],
        "operationId": "updateSingleItemsUtilizationsEntries",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsUtilizationsEntries"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsUtilizationsEntries"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing utilizations_entries item.",
        "tags": [
          "Items",
          "ItemsUtilizationsEntries"
        ],
        "operationId": "deleteSingleItemsUtilizationsEntries",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/utilizations_groups": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new utilizations_groups item.",
        "tags": [
          "Items",
          "ItemsUtilizationsGroups"
        ],
        "operationId": "createItemsUtilizationsGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsUtilizationsGroups"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsUtilizationsGroups"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsUtilizationsGroups"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the utilizations_groups items.",
        "tags": [
          "Items",
          "ItemsUtilizationsGroups"
        ],
        "operationId": "readItemsUtilizationsGroups",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsUtilizationsGroups"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple utilizations_groups items at the same time.",
        "tags": [
          "Items",
          "ItemsUtilizationsGroups"
        ],
        "operationId": "updateItemsUtilizationsGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsUtilizationsGroups"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsUtilizationsGroups"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsUtilizationsGroups"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing utilizations_groups items.",
        "tags": [
          "Items",
          "ItemsUtilizationsGroups"
        ],
        "operationId": "deleteItemsUtilizationsGroups",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/utilizations_groups/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single utilizations_groups item by unique identifier.",
        "tags": [
          "Items",
          "ItemsUtilizationsGroups"
        ],
        "operationId": "readSingleItemsUtilizationsGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsUtilizationsGroups"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing utilizations_groups item.",
        "tags": [
          "Items",
          "ItemsUtilizationsGroups"
        ],
        "operationId": "updateSingleItemsUtilizationsGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsUtilizationsGroups"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsUtilizationsGroups"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing utilizations_groups item.",
        "tags": [
          "Items",
          "ItemsUtilizationsGroups"
        ],
        "operationId": "deleteSingleItemsUtilizationsGroups",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/profiles_buildings_favorites": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new profiles_buildings_favorites item.",
        "tags": [
          "Items",
          "ItemsProfilesBuildingsFavorites"
        ],
        "operationId": "createItemsProfilesBuildingsFavorites",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProfilesBuildingsFavorites"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProfilesBuildingsFavorites"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsProfilesBuildingsFavorites"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the profiles_buildings_favorites items.",
        "tags": [
          "Items",
          "ItemsProfilesBuildingsFavorites"
        ],
        "operationId": "readItemsProfilesBuildingsFavorites",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsProfilesBuildingsFavorites"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple profiles_buildings_favorites items at the same time.",
        "tags": [
          "Items",
          "ItemsProfilesBuildingsFavorites"
        ],
        "operationId": "updateItemsProfilesBuildingsFavorites",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProfilesBuildingsFavorites"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProfilesBuildingsFavorites"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsProfilesBuildingsFavorites"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing profiles_buildings_favorites items.",
        "tags": [
          "Items",
          "ItemsProfilesBuildingsFavorites"
        ],
        "operationId": "deleteItemsProfilesBuildingsFavorites",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/profiles_buildings_favorites/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single profiles_buildings_favorites item by unique identifier.",
        "tags": [
          "Items",
          "ItemsProfilesBuildingsFavorites"
        ],
        "operationId": "readSingleItemsProfilesBuildingsFavorites",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProfilesBuildingsFavorites"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing profiles_buildings_favorites item.",
        "tags": [
          "Items",
          "ItemsProfilesBuildingsFavorites"
        ],
        "operationId": "updateSingleItemsProfilesBuildingsFavorites",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsProfilesBuildingsFavorites"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProfilesBuildingsFavorites"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing profiles_buildings_favorites item.",
        "tags": [
          "Items",
          "ItemsProfilesBuildingsFavorites"
        ],
        "operationId": "deleteSingleItemsProfilesBuildingsFavorites",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/washingmachines_jobs": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new washingmachines_jobs item.",
        "tags": [
          "Items",
          "ItemsWashingmachinesJobs"
        ],
        "operationId": "createItemsWashingmachinesJobs",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsWashingmachinesJobs"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsWashingmachinesJobs"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsWashingmachinesJobs"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the washingmachines_jobs items.",
        "tags": [
          "Items",
          "ItemsWashingmachinesJobs"
        ],
        "operationId": "readItemsWashingmachinesJobs",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsWashingmachinesJobs"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple washingmachines_jobs items at the same time.",
        "tags": [
          "Items",
          "ItemsWashingmachinesJobs"
        ],
        "operationId": "updateItemsWashingmachinesJobs",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsWashingmachinesJobs"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsWashingmachinesJobs"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsWashingmachinesJobs"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing washingmachines_jobs items.",
        "tags": [
          "Items",
          "ItemsWashingmachinesJobs"
        ],
        "operationId": "deleteItemsWashingmachinesJobs",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/washingmachines_jobs/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single washingmachines_jobs item by unique identifier.",
        "tags": [
          "Items",
          "ItemsWashingmachinesJobs"
        ],
        "operationId": "readSingleItemsWashingmachinesJobs",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsWashingmachinesJobs"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing washingmachines_jobs item.",
        "tags": [
          "Items",
          "ItemsWashingmachinesJobs"
        ],
        "operationId": "updateSingleItemsWashingmachinesJobs",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsWashingmachinesJobs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsWashingmachinesJobs"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing washingmachines_jobs item.",
        "tags": [
          "Items",
          "ItemsWashingmachinesJobs"
        ],
        "operationId": "deleteSingleItemsWashingmachinesJobs",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/wikis_translations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new wikis_translations item.",
        "tags": [
          "Items",
          "ItemsWikisTranslations"
        ],
        "operationId": "createItemsWikisTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsWikisTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsWikisTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsWikisTranslations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the wikis_translations items.",
        "tags": [
          "Items",
          "ItemsWikisTranslations"
        ],
        "operationId": "readItemsWikisTranslations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsWikisTranslations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple wikis_translations items at the same time.",
        "tags": [
          "Items",
          "ItemsWikisTranslations"
        ],
        "operationId": "updateItemsWikisTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsWikisTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsWikisTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsWikisTranslations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing wikis_translations items.",
        "tags": [
          "Items",
          "ItemsWikisTranslations"
        ],
        "operationId": "deleteItemsWikisTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/wikis_translations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single wikis_translations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsWikisTranslations"
        ],
        "operationId": "readSingleItemsWikisTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsWikisTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing wikis_translations item.",
        "tags": [
          "Items",
          "ItemsWikisTranslations"
        ],
        "operationId": "updateSingleItemsWikisTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsWikisTranslations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsWikisTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing wikis_translations item.",
        "tags": [
          "Items",
          "ItemsWikisTranslations"
        ],
        "operationId": "deleteSingleItemsWikisTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/workflows_runs": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new workflows_runs item.",
        "tags": [
          "Items",
          "ItemsWorkflowsRuns"
        ],
        "operationId": "createItemsWorkflowsRuns",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsWorkflowsRuns"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsWorkflowsRuns"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsWorkflowsRuns"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the workflows_runs items.",
        "tags": [
          "Items",
          "ItemsWorkflowsRuns"
        ],
        "operationId": "readItemsWorkflowsRuns",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsWorkflowsRuns"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple workflows_runs items at the same time.",
        "tags": [
          "Items",
          "ItemsWorkflowsRuns"
        ],
        "operationId": "updateItemsWorkflowsRuns",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsWorkflowsRuns"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsWorkflowsRuns"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsWorkflowsRuns"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing workflows_runs items.",
        "tags": [
          "Items",
          "ItemsWorkflowsRuns"
        ],
        "operationId": "deleteItemsWorkflowsRuns",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/workflows_runs/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single workflows_runs item by unique identifier.",
        "tags": [
          "Items",
          "ItemsWorkflowsRuns"
        ],
        "operationId": "readSingleItemsWorkflowsRuns",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsWorkflowsRuns"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing workflows_runs item.",
        "tags": [
          "Items",
          "ItemsWorkflowsRuns"
        ],
        "operationId": "updateSingleItemsWorkflowsRuns",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsWorkflowsRuns"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsWorkflowsRuns"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing workflows_runs item.",
        "tags": [
          "Items",
          "ItemsWorkflowsRuns"
        ],
        "operationId": "deleteSingleItemsWorkflowsRuns",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/workflows": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new workflows item.",
        "tags": [
          "Items",
          "ItemsWorkflows"
        ],
        "operationId": "createItemsWorkflows",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsWorkflows"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsWorkflows"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsWorkflows"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the workflows items.",
        "tags": [
          "Items",
          "ItemsWorkflows"
        ],
        "operationId": "readItemsWorkflows",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsWorkflows"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple workflows items at the same time.",
        "tags": [
          "Items",
          "ItemsWorkflows"
        ],
        "operationId": "updateItemsWorkflows",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsWorkflows"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsWorkflows"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsWorkflows"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing workflows items.",
        "tags": [
          "Items",
          "ItemsWorkflows"
        ],
        "operationId": "deleteItemsWorkflows",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/workflows/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single workflows item by unique identifier.",
        "tags": [
          "Items",
          "ItemsWorkflows"
        ],
        "operationId": "readSingleItemsWorkflows",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsWorkflows"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing workflows item.",
        "tags": [
          "Items",
          "ItemsWorkflows"
        ],
        "operationId": "updateSingleItemsWorkflows",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsWorkflows"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsWorkflows"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing workflows item.",
        "tags": [
          "Items",
          "ItemsWorkflows"
        ],
        "operationId": "deleteSingleItemsWorkflows",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/report_recipients": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new report_recipients item.",
        "tags": [
          "Items",
          "ItemsReportRecipients"
        ],
        "operationId": "createItemsReportRecipients",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsReportRecipients"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsReportRecipients"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsReportRecipients"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the report_recipients items.",
        "tags": [
          "Items",
          "ItemsReportRecipients"
        ],
        "operationId": "readItemsReportRecipients",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsReportRecipients"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple report_recipients items at the same time.",
        "tags": [
          "Items",
          "ItemsReportRecipients"
        ],
        "operationId": "updateItemsReportRecipients",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsReportRecipients"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsReportRecipients"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsReportRecipients"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing report_recipients items.",
        "tags": [
          "Items",
          "ItemsReportRecipients"
        ],
        "operationId": "deleteItemsReportRecipients",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/report_recipients/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single report_recipients item by unique identifier.",
        "tags": [
          "Items",
          "ItemsReportRecipients"
        ],
        "operationId": "readSingleItemsReportRecipients",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsReportRecipients"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing report_recipients item.",
        "tags": [
          "Items",
          "ItemsReportRecipients"
        ],
        "operationId": "updateSingleItemsReportRecipients",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsReportRecipients"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsReportRecipients"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing report_recipients item.",
        "tags": [
          "Items",
          "ItemsReportRecipients"
        ],
        "operationId": "deleteSingleItemsReportRecipients",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/profiles_buildings_last_opened": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new profiles_buildings_last_opened item.",
        "tags": [
          "Items",
          "ItemsProfilesBuildingsLastOpened"
        ],
        "operationId": "createItemsProfilesBuildingsLastOpened",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProfilesBuildingsLastOpened"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProfilesBuildingsLastOpened"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsProfilesBuildingsLastOpened"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the profiles_buildings_last_opened items.",
        "tags": [
          "Items",
          "ItemsProfilesBuildingsLastOpened"
        ],
        "operationId": "readItemsProfilesBuildingsLastOpened",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsProfilesBuildingsLastOpened"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple profiles_buildings_last_opened items at the same time.",
        "tags": [
          "Items",
          "ItemsProfilesBuildingsLastOpened"
        ],
        "operationId": "updateItemsProfilesBuildingsLastOpened",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProfilesBuildingsLastOpened"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProfilesBuildingsLastOpened"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsProfilesBuildingsLastOpened"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing profiles_buildings_last_opened items.",
        "tags": [
          "Items",
          "ItemsProfilesBuildingsLastOpened"
        ],
        "operationId": "deleteItemsProfilesBuildingsLastOpened",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/profiles_buildings_last_opened/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single profiles_buildings_last_opened item by unique identifier.",
        "tags": [
          "Items",
          "ItemsProfilesBuildingsLastOpened"
        ],
        "operationId": "readSingleItemsProfilesBuildingsLastOpened",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProfilesBuildingsLastOpened"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing profiles_buildings_last_opened item.",
        "tags": [
          "Items",
          "ItemsProfilesBuildingsLastOpened"
        ],
        "operationId": "updateSingleItemsProfilesBuildingsLastOpened",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsProfilesBuildingsLastOpened"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProfilesBuildingsLastOpened"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing profiles_buildings_last_opened item.",
        "tags": [
          "Items",
          "ItemsProfilesBuildingsLastOpened"
        ],
        "operationId": "deleteSingleItemsProfilesBuildingsLastOpened",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/profiles_markings": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new profiles_markings item.",
        "tags": [
          "Items",
          "ItemsProfilesMarkings"
        ],
        "operationId": "createItemsProfilesMarkings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProfilesMarkings"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProfilesMarkings"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsProfilesMarkings"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the profiles_markings items.",
        "tags": [
          "Items",
          "ItemsProfilesMarkings"
        ],
        "operationId": "readItemsProfilesMarkings",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsProfilesMarkings"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple profiles_markings items at the same time.",
        "tags": [
          "Items",
          "ItemsProfilesMarkings"
        ],
        "operationId": "updateItemsProfilesMarkings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProfilesMarkings"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProfilesMarkings"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsProfilesMarkings"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing profiles_markings items.",
        "tags": [
          "Items",
          "ItemsProfilesMarkings"
        ],
        "operationId": "deleteItemsProfilesMarkings",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/profiles_markings/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single profiles_markings item by unique identifier.",
        "tags": [
          "Items",
          "ItemsProfilesMarkings"
        ],
        "operationId": "readSingleItemsProfilesMarkings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProfilesMarkings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing profiles_markings item.",
        "tags": [
          "Items",
          "ItemsProfilesMarkings"
        ],
        "operationId": "updateSingleItemsProfilesMarkings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsProfilesMarkings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProfilesMarkings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing profiles_markings item.",
        "tags": [
          "Items",
          "ItemsProfilesMarkings"
        ],
        "operationId": "deleteSingleItemsProfilesMarkings",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/push_notifications": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new push_notifications item.",
        "tags": [
          "Items",
          "ItemsPushNotifications"
        ],
        "operationId": "createItemsPushNotifications",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPushNotifications"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPushNotifications"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsPushNotifications"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the push_notifications items.",
        "tags": [
          "Items",
          "ItemsPushNotifications"
        ],
        "operationId": "readItemsPushNotifications",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPushNotifications"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple push_notifications items at the same time.",
        "tags": [
          "Items",
          "ItemsPushNotifications"
        ],
        "operationId": "updateItemsPushNotifications",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPushNotifications"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPushNotifications"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsPushNotifications"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing push_notifications items.",
        "tags": [
          "Items",
          "ItemsPushNotifications"
        ],
        "operationId": "deleteItemsPushNotifications",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/push_notifications/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single push_notifications item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPushNotifications"
        ],
        "operationId": "readSingleItemsPushNotifications",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPushNotifications"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing push_notifications item.",
        "tags": [
          "Items",
          "ItemsPushNotifications"
        ],
        "operationId": "updateSingleItemsPushNotifications",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPushNotifications"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPushNotifications"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing push_notifications item.",
        "tags": [
          "Items",
          "ItemsPushNotifications"
        ],
        "operationId": "deleteSingleItemsPushNotifications",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/washingmachines": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new washingmachines item.",
        "tags": [
          "Items",
          "ItemsWashingmachines"
        ],
        "operationId": "createItemsWashingmachines",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsWashingmachines"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsWashingmachines"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsWashingmachines"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the washingmachines items.",
        "tags": [
          "Items",
          "ItemsWashingmachines"
        ],
        "operationId": "readItemsWashingmachines",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsWashingmachines"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple washingmachines items at the same time.",
        "tags": [
          "Items",
          "ItemsWashingmachines"
        ],
        "operationId": "updateItemsWashingmachines",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsWashingmachines"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsWashingmachines"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsWashingmachines"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing washingmachines items.",
        "tags": [
          "Items",
          "ItemsWashingmachines"
        ],
        "operationId": "deleteItemsWashingmachines",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/washingmachines/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single washingmachines item by unique identifier.",
        "tags": [
          "Items",
          "ItemsWashingmachines"
        ],
        "operationId": "readSingleItemsWashingmachines",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsWashingmachines"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing washingmachines item.",
        "tags": [
          "Items",
          "ItemsWashingmachines"
        ],
        "operationId": "updateSingleItemsWashingmachines",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsWashingmachines"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsWashingmachines"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing washingmachines item.",
        "tags": [
          "Items",
          "ItemsWashingmachines"
        ],
        "operationId": "deleteSingleItemsWashingmachines",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/wikis_directus_roles": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new wikis_directus_roles item.",
        "tags": [
          "Items",
          "ItemsWikisDirectusRoles"
        ],
        "operationId": "createItemsWikisDirectusRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsWikisDirectusRoles"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsWikisDirectusRoles"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsWikisDirectusRoles"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the wikis_directus_roles items.",
        "tags": [
          "Items",
          "ItemsWikisDirectusRoles"
        ],
        "operationId": "readItemsWikisDirectusRoles",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsWikisDirectusRoles"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple wikis_directus_roles items at the same time.",
        "tags": [
          "Items",
          "ItemsWikisDirectusRoles"
        ],
        "operationId": "updateItemsWikisDirectusRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsWikisDirectusRoles"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsWikisDirectusRoles"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsWikisDirectusRoles"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing wikis_directus_roles items.",
        "tags": [
          "Items",
          "ItemsWikisDirectusRoles"
        ],
        "operationId": "deleteItemsWikisDirectusRoles",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/wikis_directus_roles/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single wikis_directus_roles item by unique identifier.",
        "tags": [
          "Items",
          "ItemsWikisDirectusRoles"
        ],
        "operationId": "readSingleItemsWikisDirectusRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsWikisDirectusRoles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing wikis_directus_roles item.",
        "tags": [
          "Items",
          "ItemsWikisDirectusRoles"
        ],
        "operationId": "updateSingleItemsWikisDirectusRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsWikisDirectusRoles"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsWikisDirectusRoles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing wikis_directus_roles item.",
        "tags": [
          "Items",
          "ItemsWikisDirectusRoles"
        ],
        "operationId": "deleteSingleItemsWikisDirectusRoles",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/wikis": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new wikis item.",
        "tags": [
          "Items",
          "ItemsWikis"
        ],
        "operationId": "createItemsWikis",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsWikis"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsWikis"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsWikis"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the wikis items.",
        "tags": [
          "Items",
          "ItemsWikis"
        ],
        "operationId": "readItemsWikis",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsWikis"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple wikis items at the same time.",
        "tags": [
          "Items",
          "ItemsWikis"
        ],
        "operationId": "updateItemsWikis",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsWikis"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsWikis"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsWikis"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing wikis items.",
        "tags": [
          "Items",
          "ItemsWikis"
        ],
        "operationId": "deleteItemsWikis",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/wikis/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single wikis item by unique identifier.",
        "tags": [
          "Items",
          "ItemsWikis"
        ],
        "operationId": "readSingleItemsWikis",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsWikis"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing wikis item.",
        "tags": [
          "Items",
          "ItemsWikis"
        ],
        "operationId": "updateSingleItemsWikis",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsWikis"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsWikis"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing wikis item.",
        "tags": [
          "Items",
          "ItemsWikis"
        ],
        "operationId": "deleteSingleItemsWikis",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/buildings": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new buildings item.",
        "tags": [
          "Items",
          "ItemsBuildings"
        ],
        "operationId": "createItemsBuildings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBuildings"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBuildings"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsBuildings"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the buildings items.",
        "tags": [
          "Items",
          "ItemsBuildings"
        ],
        "operationId": "readItemsBuildings",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBuildings"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple buildings items at the same time.",
        "tags": [
          "Items",
          "ItemsBuildings"
        ],
        "operationId": "updateItemsBuildings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsBuildings"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsBuildings"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsBuildings"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing buildings items.",
        "tags": [
          "Items",
          "ItemsBuildings"
        ],
        "operationId": "deleteItemsBuildings",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/buildings/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single buildings item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBuildings"
        ],
        "operationId": "readSingleItemsBuildings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBuildings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing buildings item.",
        "tags": [
          "Items",
          "ItemsBuildings"
        ],
        "operationId": "updateSingleItemsBuildings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsBuildings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsBuildings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing buildings item.",
        "tags": [
          "Items",
          "ItemsBuildings"
        ],
        "operationId": "deleteSingleItemsBuildings",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/apartments": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new apartments item.",
        "tags": [
          "Items",
          "ItemsApartments"
        ],
        "operationId": "createItemsApartments",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsApartments"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsApartments"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsApartments"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the apartments items.",
        "tags": [
          "Items",
          "ItemsApartments"
        ],
        "operationId": "readItemsApartments",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsApartments"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple apartments items at the same time.",
        "tags": [
          "Items",
          "ItemsApartments"
        ],
        "operationId": "updateItemsApartments",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsApartments"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsApartments"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsApartments"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing apartments items.",
        "tags": [
          "Items",
          "ItemsApartments"
        ],
        "operationId": "deleteItemsApartments",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/apartments/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single apartments item by unique identifier.",
        "tags": [
          "Items",
          "ItemsApartments"
        ],
        "operationId": "readSingleItemsApartments",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsApartments"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing apartments item.",
        "tags": [
          "Items",
          "ItemsApartments"
        ],
        "operationId": "updateSingleItemsApartments",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsApartments"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsApartments"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing apartments item.",
        "tags": [
          "Items",
          "ItemsApartments"
        ],
        "operationId": "deleteSingleItemsApartments",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/app_elements_translations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new app_elements_translations item.",
        "tags": [
          "Items",
          "ItemsAppElementsTranslations"
        ],
        "operationId": "createItemsAppElementsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsAppElementsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsAppElementsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsAppElementsTranslations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the app_elements_translations items.",
        "tags": [
          "Items",
          "ItemsAppElementsTranslations"
        ],
        "operationId": "readItemsAppElementsTranslations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsAppElementsTranslations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple app_elements_translations items at the same time.",
        "tags": [
          "Items",
          "ItemsAppElementsTranslations"
        ],
        "operationId": "updateItemsAppElementsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsAppElementsTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsAppElementsTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsAppElementsTranslations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing app_elements_translations items.",
        "tags": [
          "Items",
          "ItemsAppElementsTranslations"
        ],
        "operationId": "deleteItemsAppElementsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/app_elements_translations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single app_elements_translations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsAppElementsTranslations"
        ],
        "operationId": "readSingleItemsAppElementsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsAppElementsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing app_elements_translations item.",
        "tags": [
          "Items",
          "ItemsAppElementsTranslations"
        ],
        "operationId": "updateSingleItemsAppElementsTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsAppElementsTranslations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsAppElementsTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing app_elements_translations item.",
        "tags": [
          "Items",
          "ItemsAppElementsTranslations"
        ],
        "operationId": "deleteSingleItemsAppElementsTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/profiles": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new profiles item.",
        "tags": [
          "Items",
          "ItemsProfiles"
        ],
        "operationId": "createItemsProfiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProfiles"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProfiles"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsProfiles"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the profiles items.",
        "tags": [
          "Items",
          "ItemsProfiles"
        ],
        "operationId": "readItemsProfiles",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsProfiles"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple profiles items at the same time.",
        "tags": [
          "Items",
          "ItemsProfiles"
        ],
        "operationId": "updateItemsProfiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsProfiles"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsProfiles"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsProfiles"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing profiles items.",
        "tags": [
          "Items",
          "ItemsProfiles"
        ],
        "operationId": "deleteItemsProfiles",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/profiles/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single profiles item by unique identifier.",
        "tags": [
          "Items",
          "ItemsProfiles"
        ],
        "operationId": "readSingleItemsProfiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProfiles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing profiles item.",
        "tags": [
          "Items",
          "ItemsProfiles"
        ],
        "operationId": "updateSingleItemsProfiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsProfiles"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsProfiles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing profiles item.",
        "tags": [
          "Items",
          "ItemsProfiles"
        ],
        "operationId": "deleteSingleItemsProfiles",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/app_settings_balance_translations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new app_settings_balance_translations item.",
        "tags": [
          "Items",
          "ItemsAppSettingsBalanceTranslations"
        ],
        "operationId": "createItemsAppSettingsBalanceTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsAppSettingsBalanceTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsAppSettingsBalanceTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsAppSettingsBalanceTranslations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the app_settings_balance_translations items.",
        "tags": [
          "Items",
          "ItemsAppSettingsBalanceTranslations"
        ],
        "operationId": "readItemsAppSettingsBalanceTranslations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsAppSettingsBalanceTranslations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple app_settings_balance_translations items at the same time.",
        "tags": [
          "Items",
          "ItemsAppSettingsBalanceTranslations"
        ],
        "operationId": "updateItemsAppSettingsBalanceTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsAppSettingsBalanceTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsAppSettingsBalanceTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsAppSettingsBalanceTranslations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing app_settings_balance_translations items.",
        "tags": [
          "Items",
          "ItemsAppSettingsBalanceTranslations"
        ],
        "operationId": "deleteItemsAppSettingsBalanceTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/app_settings_balance_translations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single app_settings_balance_translations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsAppSettingsBalanceTranslations"
        ],
        "operationId": "readSingleItemsAppSettingsBalanceTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsAppSettingsBalanceTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing app_settings_balance_translations item.",
        "tags": [
          "Items",
          "ItemsAppSettingsBalanceTranslations"
        ],
        "operationId": "updateSingleItemsAppSettingsBalanceTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsAppSettingsBalanceTranslations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsAppSettingsBalanceTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing app_settings_balance_translations item.",
        "tags": [
          "Items",
          "ItemsAppSettingsBalanceTranslations"
        ],
        "operationId": "deleteSingleItemsAppSettingsBalanceTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/canteens": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new canteens item.",
        "tags": [
          "Items",
          "ItemsCanteens"
        ],
        "operationId": "createItemsCanteens",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCanteens"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCanteens"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCanteens"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the canteens items.",
        "tags": [
          "Items",
          "ItemsCanteens"
        ],
        "operationId": "readItemsCanteens",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsCanteens"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple canteens items at the same time.",
        "tags": [
          "Items",
          "ItemsCanteens"
        ],
        "operationId": "updateItemsCanteens",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCanteens"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCanteens"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCanteens"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing canteens items.",
        "tags": [
          "Items",
          "ItemsCanteens"
        ],
        "operationId": "deleteItemsCanteens",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/canteens/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single canteens item by unique identifier.",
        "tags": [
          "Items",
          "ItemsCanteens"
        ],
        "operationId": "readSingleItemsCanteens",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCanteens"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing canteens item.",
        "tags": [
          "Items",
          "ItemsCanteens"
        ],
        "operationId": "updateSingleItemsCanteens",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsCanteens"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCanteens"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing canteens item.",
        "tags": [
          "Items",
          "ItemsCanteens"
        ],
        "operationId": "deleteSingleItemsCanteens",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/collectible_event_participants": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new collectible_event_participants item.",
        "tags": [
          "Items",
          "ItemsCollectibleEventParticipants"
        ],
        "operationId": "createItemsCollectibleEventParticipants",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCollectibleEventParticipants"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCollectibleEventParticipants"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCollectibleEventParticipants"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the collectible_event_participants items.",
        "tags": [
          "Items",
          "ItemsCollectibleEventParticipants"
        ],
        "operationId": "readItemsCollectibleEventParticipants",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsCollectibleEventParticipants"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple collectible_event_participants items at the same time.",
        "tags": [
          "Items",
          "ItemsCollectibleEventParticipants"
        ],
        "operationId": "updateItemsCollectibleEventParticipants",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCollectibleEventParticipants"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCollectibleEventParticipants"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsCollectibleEventParticipants"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing collectible_event_participants items.",
        "tags": [
          "Items",
          "ItemsCollectibleEventParticipants"
        ],
        "operationId": "deleteItemsCollectibleEventParticipants",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/collectible_event_participants/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single collectible_event_participants item by unique identifier.",
        "tags": [
          "Items",
          "ItemsCollectibleEventParticipants"
        ],
        "operationId": "readSingleItemsCollectibleEventParticipants",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCollectibleEventParticipants"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing collectible_event_participants item.",
        "tags": [
          "Items",
          "ItemsCollectibleEventParticipants"
        ],
        "operationId": "updateSingleItemsCollectibleEventParticipants",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsCollectibleEventParticipants"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCollectibleEventParticipants"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing collectible_event_participants item.",
        "tags": [
          "Items",
          "ItemsCollectibleEventParticipants"
        ],
        "operationId": "deleteSingleItemsCollectibleEventParticipants",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/foodoffers_categories_translations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new foodoffers_categories_translations item.",
        "tags": [
          "Items",
          "ItemsFoodoffersCategoriesTranslations"
        ],
        "operationId": "createItemsFoodoffersCategoriesTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodoffersCategoriesTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodoffersCategoriesTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodoffersCategoriesTranslations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the foodoffers_categories_translations items.",
        "tags": [
          "Items",
          "ItemsFoodoffersCategoriesTranslations"
        ],
        "operationId": "readItemsFoodoffersCategoriesTranslations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFoodoffersCategoriesTranslations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple foodoffers_categories_translations items at the same time.",
        "tags": [
          "Items",
          "ItemsFoodoffersCategoriesTranslations"
        ],
        "operationId": "updateItemsFoodoffersCategoriesTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFoodoffersCategoriesTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFoodoffersCategoriesTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFoodoffersCategoriesTranslations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing foodoffers_categories_translations items.",
        "tags": [
          "Items",
          "ItemsFoodoffersCategoriesTranslations"
        ],
        "operationId": "deleteItemsFoodoffersCategoriesTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/foodoffers_categories_translations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single foodoffers_categories_translations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFoodoffersCategoriesTranslations"
        ],
        "operationId": "readSingleItemsFoodoffersCategoriesTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodoffersCategoriesTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing foodoffers_categories_translations item.",
        "tags": [
          "Items",
          "ItemsFoodoffersCategoriesTranslations"
        ],
        "operationId": "updateSingleItemsFoodoffersCategoriesTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFoodoffersCategoriesTranslations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFoodoffersCategoriesTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing foodoffers_categories_translations item.",
        "tags": [
          "Items",
          "ItemsFoodoffersCategoriesTranslations"
        ],
        "operationId": "deleteSingleItemsFoodoffersCategoriesTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/form_categories_translations": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new form_categories_translations item.",
        "tags": [
          "Items",
          "ItemsFormCategoriesTranslations"
        ],
        "operationId": "createItemsFormCategoriesTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormCategoriesTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormCategoriesTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormCategoriesTranslations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the form_categories_translations items.",
        "tags": [
          "Items",
          "ItemsFormCategoriesTranslations"
        ],
        "operationId": "readItemsFormCategoriesTranslations",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsFormCategoriesTranslations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple form_categories_translations items at the same time.",
        "tags": [
          "Items",
          "ItemsFormCategoriesTranslations"
        ],
        "operationId": "updateItemsFormCategoriesTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsFormCategoriesTranslations"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsFormCategoriesTranslations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/ItemsFormCategoriesTranslations"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing form_categories_translations items.",
        "tags": [
          "Items",
          "ItemsFormCategoriesTranslations"
        ],
        "operationId": "deleteItemsFormCategoriesTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/form_categories_translations/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single form_categories_translations item by unique identifier.",
        "tags": [
          "Items",
          "ItemsFormCategoriesTranslations"
        ],
        "operationId": "readSingleItemsFormCategoriesTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormCategoriesTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing form_categories_translations item.",
        "tags": [
          "Items",
          "ItemsFormCategoriesTranslations"
        ],
        "operationId": "updateSingleItemsFormCategoriesTranslations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsFormCategoriesTranslations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsFormCategoriesTranslations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing form_categories_translations item.",
        "tags": [
          "Items",
          "ItemsFormCategoriesTranslations"
        ],
        "operationId": "deleteSingleItemsFormCategoriesTranslations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Assets",
      "description": "Image typed files can be dynamically resized and transformed to fit any need."
    },
    {
      "name": "Authentication",
      "description": "All data within the platform is private by default. The public role can be configured to expose data without authentication, or you can pass an access token to the API to access private data."
    },
    {
      "name": "Schema",
      "description": "Retrieve and update the schema of an instance.",
      "x-authentication": "admin",
      "x-schemas": [
        "Schema",
        "Diff"
      ]
    },
    {
      "name": "Server",
      "description": "Access to where Directus runs. Allows you to make sure your server has everything needed to run the platform, and check what kind of latency we're dealing with."
    },
    {
      "name": "Utilities",
      "description": "Directus comes with various utility endpoints you can use to simplify your development flow.",
      "x-authentication": "user",
      "x-schemas": [
        "Files",
        "Folders",
        "Users",
        "Roles"
      ]
    },
    {
      "name": "ItemsAppElements",
      "x-collection": "app_elements"
    },
    {
      "name": "ItemsAppSettings",
      "x-collection": "app_settings"
    },
    {
      "name": "ItemsAppSettingsHousingTranslations",
      "x-collection": "app_settings_housing_translations"
    },
    {
      "name": "ItemsAppSettingsLoginScreenTranslations",
      "x-collection": "app_settings_login_screen_translations"
    },
    {
      "name": "ItemsBuildingsAttributes",
      "x-collection": "buildings_attributes"
    },
    {
      "name": "ItemsBuildingsBusinesshours",
      "x-collection": "buildings_businesshours"
    },
    {
      "name": "ItemsAutoTranslationSettings",
      "x-collection": "auto_translation_settings"
    },
    {
      "name": "ItemsAppFeedbacks",
      "x-collection": "app_feedbacks"
    },
    {
      "name": "ItemsBusinesshoursGroups",
      "x-collection": "businesshours_groups"
    },
    {
      "name": "ItemsBusinesshoursGroupsTranslations",
      "x-collection": "businesshours_groups_translations"
    },
    {
      "name": "ItemsCanteenFoodFeedbackReportSchedulesCanteens",
      "x-collection": "canteen_food_feedback_report_schedules_canteens"
    },
    {
      "name": "ItemsBusinesshours",
      "x-collection": "businesshours"
    },
    {
      "name": "ItemsBuildingsTranslations",
      "x-collection": "buildings_translations"
    },
    {
      "name": "ItemsCanteenFoodFeedbackReportSchedules",
      "x-collection": "canteen_food_feedback_report_schedules"
    },
    {
      "name": "ItemsCanteenFoodFeedbackReportSchedulesReportRecipients",
      "x-collection": "canteen_food_feedback_report_schedules_report_recipients"
    },
    {
      "name": "ItemsCanteensFeedbacksLabelsTranslations",
      "x-collection": "canteens_feedbacks_labels_translations"
    },
    {
      "name": "ItemsCanteensFoodserviceHours",
      "x-collection": "canteens_foodservice_hours"
    },
    {
      "name": "ItemsCashregistersTransactions",
      "x-collection": "cashregisters_transactions"
    },
    {
      "name": "ItemsCollectibleEvents",
      "x-collection": "collectible_events"
    },
    {
      "name": "ItemsCollectibleEventsTranslations",
      "x-collection": "collectible_events_translations"
    },
    {
      "name": "ItemsCollectionsDatesLastUpdate",
      "x-collection": "collections_dates_last_update"
    },
    {
      "name": "ItemsDevices",
      "x-collection": "devices"
    },
    {
      "name": "Activity",
      "description": "All events that happen within Directus are tracked and stored in the activities collection. This gives you full accountability over everything that happens.",
      "x-collection": "directus_activity"
    },
    {
      "name": "ItemsCanteensFeedbacksLabelsEntries",
      "x-collection": "canteens_feedbacks_labels_entries"
    },
    {
      "name": "ItemsCanteensFeedbacksLabels",
      "x-collection": "canteens_feedbacks_labels"
    },
    {
      "name": "ItemsCanteensFoodserviceHoursDuringSemesterBreak",
      "x-collection": "canteens_foodservice_hours_during_semester_break"
    },
    {
      "name": "ItemsCashregisters",
      "x-collection": "cashregisters"
    },
    {
      "name": "Comments",
      "description": "Comments can be added to items.",
      "x-collection": "directus_comments"
    },
    {
      "name": "Folders",
      "description": "Group files by virtual folders.",
      "x-collection": "directus_folders"
    },
    {
      "name": "Extensions",
      "description": "Directus can easily be extended through the addition of several types of extensions, including layouts, interfaces, and modules.",
      "x-collection": "directus_extensions"
    },
    {
      "name": "Fields",
      "description": "Fields are individual pieces of content within an item. They are mapped to columns in the database.",
      "x-collection": "directus_fields"
    },
    {
      "name": "Operations",
      "description": "Operations are the building blocks within Data Flows.",
      "x-collection": "directus_operations"
    },
    {
      "name": "Permissions",
      "description": "Permissions control who has access to what and when.",
      "x-collection": "directus_permissions"
    },
    {
      "name": "Collections",
      "description": "Collections are the individual collections of items, similar to tables in a database. Changes to collections will alter the schema of the database.",
      "x-collection": "directus_collections"
    },
    {
      "name": "Files",
      "description": "Files can be saved in any given location. Directus has a powerful assets endpoint that can be used to generate thumbnails for images on the fly.",
      "x-collection": "directus_files"
    },
    {
      "name": "Flows",
      "description": "Flows enable custom, event-driven data processing and task automation.",
      "x-collection": "directus_flows"
    },
    {
      "name": "Relations",
      "description": "What data is linked to what other data. Allows you to assign authors to articles, products to sales, and whatever other structures you can think of.",
      "x-collection": "directus_relations"
    },
    {
      "name": "Versions",
      "description": "Enables users to create unpublished copies of an item, modify them independently from the main version, and promote them to become the new main version when ready.",
      "x-collection": "directus_versions"
    },
    {
      "name": "Presets",
      "description": "Presets hold the preferences of individual users of the platform. This allows Directus to show and maintain custom item listings for users of the app.",
      "x-collection": "directus_presets"
    },
    {
      "name": "Settings",
      "description": "Settings control the way the platform works and acts.",
      "x-collection": "directus_settings"
    },
    {
      "name": "Webhooks",
      "description": "Webhooks.",
      "x-collection": "directus_webhooks"
    },
    {
      "name": "ItemsFilesShares",
      "x-collection": "files_shares"
    },
    {
      "name": "ItemsDirectusSyncIDMap",
      "x-collection": "directus_sync_id_map"
    },
    {
      "name": "Roles",
      "description": "Roles are groups of users that share permissions.",
      "x-collection": "directus_roles"
    },
    {
      "name": "Users",
      "description": "Users are what gives you access to the data.",
      "x-collection": "directus_users"
    },
    {
      "name": "Revisions",
      "description": "Revisions are individual changes to items made. Directus keeps track of changes made, so you're able to revert to a previous state at will.",
      "x-collection": "directus_revisions"
    },
    {
      "name": "ItemsFoods",
      "x-collection": "foods"
    },
    {
      "name": "ItemsFoodoffersMarkings",
      "x-collection": "foodoffers_markings"
    },
    {
      "name": "ItemsFoodsAttributesGroups",
      "x-collection": "foods_attributes_groups"
    },
    {
      "name": "ItemsFoodsAttributesGroupsTranslations",
      "x-collection": "foods_attributes_groups_translations"
    },
    {
      "name": "ItemsFoodsAttributesTranslations",
      "x-collection": "foods_attributes_translations"
    },
    {
      "name": "ItemsFoodsAttributesValues",
      "x-collection": "foods_attributes_values"
    },
    {
      "name": "ItemsFoodsCategories",
      "x-collection": "foods_categories"
    },
    {
      "name": "ItemsFoodsCategoriesTranslations",
      "x-collection": "foods_categories_translations"
    },
    {
      "name": "ItemsFoodsFeedbacks",
      "x-collection": "foods_feedbacks"
    },
    {
      "name": "ItemsFoodsFeedbacksFoodsFeedbacksLabels",
      "x-collection": "foods_feedbacks_foods_feedbacks_labels"
    },
    {
      "name": "ItemsFoodoffers",
      "x-collection": "foodoffers"
    },
    {
      "name": "ItemsFoodoffersCategories",
      "x-collection": "foodoffers_categories"
    },
    {
      "name": "ItemsFoodsAttributes",
      "x-collection": "foods_attributes"
    },
    {
      "name": "ItemsFoodsFeedbacksLabelsTranslations",
      "x-collection": "foods_feedbacks_labels_translations"
    },
    {
      "name": "ItemsFoodsMarkings",
      "x-collection": "foods_markings"
    },
    {
      "name": "ItemsFormAnswersFiles",
      "x-collection": "form_answers_files"
    },
    {
      "name": "ItemsFormFields",
      "x-collection": "form_fields"
    },
    {
      "name": "ItemsFormExtracts",
      "x-collection": "form_extracts"
    },
    {
      "name": "ItemsFormExtractsFormFields",
      "x-collection": "form_extracts_form_fields"
    },
    {
      "name": "ItemsForms",
      "x-collection": "forms"
    },
    {
      "name": "ItemsFormSubmissions",
      "x-collection": "form_submissions"
    },
    {
      "name": "ItemsFormCategories",
      "x-collection": "form_categories"
    },
    {
      "name": "ItemsFormFieldsTranslations",
      "x-collection": "form_fields_translations"
    },
    {
      "name": "ItemsFoodsFeedbacksLabels",
      "x-collection": "foods_feedbacks_labels"
    },
    {
      "name": "ItemsFoodsFeedbacksLabelsEntries",
      "x-collection": "foods_feedbacks_labels_entries"
    },
    {
      "name": "ItemsFoodsTranslations",
      "x-collection": "foods_translations"
    },
    {
      "name": "ItemsFormAnswers",
      "x-collection": "form_answers"
    },
    {
      "name": "ItemsMarkings",
      "x-collection": "markings"
    },
    {
      "name": "ItemsMarkingsExclusions",
      "x-collection": "markings_exclusions"
    },
    {
      "name": "ItemsFormsTranslations",
      "x-collection": "forms_translations"
    },
    {
      "name": "ItemsMarkingsGroupsTranslations",
      "x-collection": "markings_groups_translations"
    },
    {
      "name": "ItemsMarkingsTranslations",
      "x-collection": "markings_translations"
    },
    {
      "name": "ItemsNews",
      "x-collection": "news"
    },
    {
      "name": "ItemsNewsTranslations",
      "x-collection": "news_translations"
    },
    {
      "name": "ItemsPopupEventsCanteens",
      "x-collection": "popup_events_canteens"
    },
    {
      "name": "ItemsPopupEventsTranslations",
      "x-collection": "popup_events_translations"
    },
    {
      "name": "ItemsLanguages",
      "x-collection": "languages"
    },
    {
      "name": "ItemsMailsFiles",
      "x-collection": "mails_files"
    },
    {
      "name": "ItemsMails",
      "x-collection": "mails"
    },
    {
      "name": "ItemsMarkingsGroups",
      "x-collection": "markings_groups"
    },
    {
      "name": "ItemsPopupEvents",
      "x-collection": "popup_events"
    },
    {
      "name": "ItemsUtilizationsEntries",
      "x-collection": "utilizations_entries"
    },
    {
      "name": "ItemsUtilizationsGroups",
      "x-collection": "utilizations_groups"
    },
    {
      "name": "ItemsProfilesBuildingsFavorites",
      "x-collection": "profiles_buildings_favorites"
    },
    {
      "name": "ItemsWashingmachinesJobs",
      "x-collection": "washingmachines_jobs"
    },
    {
      "name": "ItemsWikisTranslations",
      "x-collection": "wikis_translations"
    },
    {
      "name": "ItemsWorkflowsRuns",
      "x-collection": "workflows_runs"
    },
    {
      "name": "ItemsWorkflows",
      "x-collection": "workflows"
    },
    {
      "name": "ItemsReportRecipients",
      "x-collection": "report_recipients"
    },
    {
      "name": "ItemsProfilesBuildingsLastOpened",
      "x-collection": "profiles_buildings_last_opened"
    },
    {
      "name": "ItemsProfilesMarkings",
      "x-collection": "profiles_markings"
    },
    {
      "name": "ItemsPushNotifications",
      "x-collection": "push_notifications"
    },
    {
      "name": "ItemsWashingmachines",
      "x-collection": "washingmachines"
    },
    {
      "name": "ItemsWikisDirectusRoles",
      "x-collection": "wikis_directus_roles"
    },
    {
      "name": "ItemsWikis",
      "x-collection": "wikis"
    },
    {
      "name": "ItemsBuildings",
      "x-collection": "buildings"
    },
    {
      "name": "ItemsApartments",
      "x-collection": "apartments"
    },
    {
      "name": "ItemsAppElementsTranslations",
      "x-collection": "app_elements_translations"
    },
    {
      "name": "ItemsProfiles",
      "x-collection": "profiles"
    },
    {
      "name": "ItemsAppSettingsBalanceTranslations",
      "x-collection": "app_settings_balance_translations"
    },
    {
      "name": "ItemsCanteens",
      "x-collection": "canteens"
    },
    {
      "name": "ItemsCollectibleEventParticipants",
      "x-collection": "collectible_event_participants"
    },
    {
      "name": "ItemsFoodoffersCategoriesTranslations",
      "x-collection": "foodoffers_categories_translations"
    },
    {
      "name": "ItemsFormCategoriesTranslations",
      "x-collection": "form_categories_translations"
    }
  ],
  "components": {
    "schemas": {
      "Diff": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string"
          },
          "diff": {
            "type": "object",
            "properties": {
              "collections": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "collection": {
                      "type": "string"
                    },
                    "diff": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              },
              "fields": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "collection": {
                      "type": "string"
                    },
                    "field": {
                      "type": "string"
                    },
                    "diff": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              },
              "relations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "collection": {
                      "type": "string"
                    },
                    "field": {
                      "type": "string"
                    },
                    "related_collection": {
                      "type": "string"
                    },
                    "diff": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Files": {
        "type": "object",
        "properties": {
          "is_unreferenced": {
            "nullable": true,
            "type": "boolean"
          },
          "focal_point_y": {
            "nullable": true,
            "type": "integer"
          },
          "focal_point_x": {
            "nullable": true,
            "type": "integer"
          },
          "duration": {
            "description": "Duration of the file in seconds. Only applies to audio and video.",
            "example": 0,
            "type": "integer",
            "nullable": true
          },
          "height": {
            "description": "Height of the file in pixels. Only applies to images.",
            "example": 838,
            "type": "integer",
            "nullable": true
          },
          "width": {
            "description": "Width of the file in pixels. Only applies to images.",
            "example": 800,
            "type": "integer",
            "nullable": true
          },
          "filesize": {
            "description": "Size of the file in bytes.",
            "example": 137862,
            "type": "integer"
          },
          "description": {
            "description": "Description for the file.",
            "type": "string",
            "nullable": true
          },
          "location": {
            "description": "Where the file was created. Is automatically populated based on Exif data for images.",
            "type": "string",
            "nullable": true
          },
          "tags": {
            "description": "Tags for the file. Is automatically populated based on Exif data for images.",
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "description": "IPTC, Exif, and ICC metadata extracted from file",
            "type": "object",
            "nullable": true
          },
          "tus_data": {
            "nullable": true
          },
          "tus_id": {
            "nullable": true,
            "type": "string"
          },
          "embed": {
            "description": "Where the file was embedded from.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "charset": {
            "description": "Character set of the file.",
            "example": "binary",
            "type": "string",
            "nullable": true
          },
          "type": {
            "description": "MIME type of the file.",
            "example": "image/jpeg",
            "type": "string"
          },
          "title": {
            "description": "Title for the file. Is extracted from the filename on upload, but can be edited by the user.",
            "example": "User Avatar",
            "type": "string"
          },
          "filename_download": {
            "description": "How you want to the file to be named when it's being downloaded.",
            "example": "avatar.jpg",
            "type": "string"
          },
          "filename_disk": {
            "description": "Name of the file on disk. By default, Directus uses a random hash for the filename.",
            "example": "a88c3b72-ac58-5436-a4ec-b2858531333a.jpg",
            "type": "string"
          },
          "storage": {
            "description": "Where the file is stored. Either `local` for the local filesystem or the name of the storage adapter (for example `s3`).",
            "example": "local",
            "type": "string"
          },
          "created_on": {
            "description": "When the file was created.",
            "example": "2019-12-03T00:10:15+00:00",
            "type": "string",
            "format": "date-time"
          },
          "modified_on": {
            "nullable": false,
            "type": "string",
            "format": "timestamp"
          },
          "uploaded_on": {
            "description": "When the file was last uploaded/replaced.",
            "example": "2019-12-03T00:10:15+00:00",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "description": "Unique identifier for the file.",
            "example": "8cbb43fe-4cdf-4991-8352-c461779cec02",
            "type": "string"
          },
          "folder": {
            "description": "Virtual folder where this file resides in.",
            "example": null,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Folders"
              }
            ],
            "nullable": true
          },
          "uploaded_by": {
            "description": "Who uploaded the file.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "modified_by": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "directus_files"
      },
      "Folders": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the folder.",
            "example": "New York",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the folder.",
            "example": "0cf0e03d-4364-45df-b77b-ca61f61869d2",
            "type": "string"
          },
          "parent": {
            "description": "Unique identifier of the parent folder. This allows for nested folders.",
            "example": null,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Folders"
              }
            ],
            "nullable": true
          }
        },
        "x-collection": "directus_folders"
      },
      "Roles": {
        "type": "object",
        "properties": {
          "description": {
            "description": "Description of the role.",
            "example": "Admins have access to all managed data within the system by default",
            "type": "string",
            "nullable": true
          },
          "icon": {
            "description": "The role's icon.",
            "example": "verified_user",
            "type": "string"
          },
          "name": {
            "description": "Name of the role.",
            "example": "Administrator",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the role.",
            "example": "2f24211d-d928-469a-aea3-3c8f53d4e426",
            "type": "string"
          },
          "parent": {
            "nullable": true,
            "description": "$t:field_options.directus_roles.parent_note",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Roles"
              }
            ]
          },
          "children": {
            "nullable": true,
            "description": "$t:field_options.directus_roles.children_note",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/Roles"
                }
              ]
            }
          },
          "policies": {
            "nullable": true
          },
          "users": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/Users"
                }
              ]
            }
          }
        },
        "x-collection": "directus_roles"
      },
      "Schema": {
        "type": "object",
        "properties": {
          "version": {
            "type": "integer",
            "example": 1
          },
          "directus": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          },
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Collections"
            }
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Fields"
            }
          },
          "relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relations"
            }
          }
        }
      },
      "Users": {
        "type": "object",
        "properties": {
          "email_notifications": {
            "nullable": true,
            "type": "boolean"
          },
          "description": {
            "description": "The user's description.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "tags": {
            "description": "The user's tags.",
            "example": null,
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "auth_data": {
            "nullable": true
          },
          "theme_dark_overrides": {
            "nullable": true
          },
          "theme_light_overrides": {
            "nullable": true
          },
          "last_page": {
            "description": "Last page that the user was on.",
            "example": "/my-project/settings/collections/a",
            "type": "string",
            "nullable": true
          },
          "token": {
            "description": "Static token for the user.",
            "type": "string",
            "nullable": true
          },
          "status": {
            "description": "Status of the user.",
            "example": "active",
            "type": "string",
            "enum": [
              "active",
              "invited",
              "draft",
              "suspended",
              "deleted"
            ]
          },
          "tfa_secret": {
            "description": "The 2FA secret string that's used to generate one time passwords.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "language": {
            "description": "The user's language used in Directus.",
            "example": "en-US",
            "type": "string"
          },
          "title": {
            "description": "The user's title.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "location": {
            "description": "The user's location.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "password": {
            "description": "Password of the user.",
            "type": "string"
          },
          "email": {
            "description": "Unique email address for the user.",
            "example": "admin@example.com",
            "type": "string",
            "format": "email"
          },
          "last_name": {
            "description": "Last name of the user.",
            "example": "User",
            "type": "string"
          },
          "first_name": {
            "description": "First name of the user.",
            "example": "Admin",
            "type": "string"
          },
          "theme_light": {
            "nullable": true,
            "type": "string"
          },
          "theme_dark": {
            "nullable": true,
            "type": "string"
          },
          "appearance": {
            "nullable": true,
            "type": "string"
          },
          "external_identifier": {
            "nullable": true,
            "type": "string"
          },
          "provider": {
            "nullable": false,
            "type": "string"
          },
          "last_access": {
            "description": "When this user used the API last.",
            "example": "2020-05-31T14:32:37Z",
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "profile": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsProfiles"
              }
            ]
          },
          "id": {
            "description": "Unique identifier for the user.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "type": "string"
          },
          "avatar": {
            "description": "The user's avatar.",
            "example": null,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ],
            "nullable": true
          },
          "role": {
            "description": "Unique identifier of the role of this user.",
            "example": "2f24211d-d928-469a-aea3-3c8f53d4e426",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Roles"
              }
            ]
          },
          "policies": {
            "nullable": true
          }
        },
        "x-collection": "directus_users"
      },
      "Query": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Control what fields are being returned in the object.",
            "example": [
              "*",
              "*.*"
            ]
          },
          "filter": {
            "type": "object",
            "example": {
              "<field>": {
                "<operator>": "<value>"
              }
            }
          },
          "search": {
            "description": "Filter by items that contain the given search query in one of their fields.",
            "type": "string"
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "How to sort the returned items.",
            "example": [
              "-date_created"
            ]
          },
          "limit": {
            "type": "number",
            "description": "Set the maximum number of items that will be returned"
          },
          "offset": {
            "type": "number",
            "description": "How many items to skip when fetching data."
          },
          "page": {
            "type": "number",
            "description": "Cursor for use in pagination. Often used in combination with limit."
          },
          "deep": {
            "type": "object",
            "description": "Deep allows you to set any of the other query parameters on a nested relational dataset.",
            "example": {
              "related_articles": {
                "_limit": 3
              }
            }
          }
        }
      },
      "x-metadata": {
        "type": "object",
        "properties": {
          "total_count": {
            "description": "Returns the total item count of the collection you're querying.",
            "type": "integer"
          },
          "filter_count": {
            "description": "Returns the item count of the collection you're querying, taking the current filter/search parameters into account.",
            "type": "integer"
          }
        }
      },
      "ItemsAppElements": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "color": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "translations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsAppElementsTranslations"
                }
              ]
            }
          }
        },
        "x-collection": "app_elements",
        "required": [
          "id"
        ]
      },
      "ItemsAppSettings": {
        "type": "object",
        "properties": {
          "campus_enabled": {
            "nullable": true,
            "description": "Zeige in der App den Bereich Campus an",
            "type": "boolean"
          },
          "utilization_display_enabled": {
            "nullable": true,
            "description": "Zeige die Auslastungsprognose in der App",
            "type": "boolean"
          },
          "course_timetable_enabled": {
            "nullable": true,
            "type": "boolean"
          },
          "balance_enabled": {
            "nullable": true,
            "type": "boolean"
          },
          "news_enabled": {
            "nullable": true,
            "description": "Zeigt in der App den Bereich News an",
            "type": "boolean"
          },
          "map_enabled": {
            "nullable": true,
            "description": "Zeige den Lageplan in der App an",
            "type": "boolean"
          },
          "housing_enabled": {
            "nullable": true,
            "description": "Zeigt den Bereich Wohnen in der App an",
            "type": "boolean"
          },
          "foods_enabled": {
            "nullable": true,
            "description": "Bereich \"Mensa\" in der App aktivieren?",
            "type": "boolean"
          },
          "foods_ratings_average_display": {
            "nullable": true,
            "description": "Soll die durschnittliche Bewertung der Speisen angezeigt werden?",
            "type": "boolean"
          },
          "foods_ratings_amount_display": {
            "nullable": true,
            "description": "Soll die Anzahl der Bewertungen angezeigt werden?",
            "type": "boolean"
          },
          "animations_auto_start": {
            "nullable": true,
            "type": "boolean"
          },
          "notifications_ios_enabled": {
            "nullable": true,
            "type": "boolean"
          },
          "notifications_email_enabled": {
            "nullable": true,
            "type": "boolean"
          },
          "notifications_android_enabled": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "redirect_whitelist": {
            "nullable": true,
            "description": "Liste erlaubter Seiten die sich bei der App Anmelden dürfen"
          },
          "course_timetable_area_color": {
            "nullable": true,
            "type": "string"
          },
          "balance_area_color": {
            "nullable": true,
            "type": "string"
          },
          "campus_area_color": {
            "nullable": true,
            "type": "string"
          },
          "news_area_color": {
            "nullable": true,
            "type": "string"
          },
          "housing_area_color": {
            "nullable": true,
            "type": "string"
          },
          "foods_area_color": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "foods_ratings_type": {
            "nullable": true,
            "description": "Wie sollen die Bewertungen angezeigt werden? Sterne, Daumen, ...",
            "type": "string"
          },
          "foods_placeholder_image_thumb_hash": {
            "nullable": true,
            "type": "string"
          },
          "foods_placeholder_image_remote_url": {
            "nullable": true,
            "type": "string"
          },
          "foods_feedbacks_labels_type": {
            "nullable": true,
            "type": "string"
          },
          "foods_feedbacks_custom_url": {
            "nullable": true,
            "description": "URL zu einem externen Forum für Rückmeldungen und Bewertungen von Speisen",
            "type": "string"
          },
          "foods_feedbacks_comments_type": {
            "nullable": true,
            "type": "string"
          },
          "food_responsible_organization_name": {
            "nullable": true,
            "description": "Wer ist für die Inhalte der Speiseangebote verantwortlich?",
            "type": "string"
          },
          "food_responsible_organization_link": {
            "nullable": true,
            "description": "URL bzw. Link zu der verantwortlichen Stelle",
            "type": "string"
          },
          "app_stores_url_to_google": {
            "nullable": true,
            "type": "string"
          },
          "app_stores_url_to_apple": {
            "nullable": true,
            "type": "string"
          },
          "date_privacy_policy_updated": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "maintenance_start": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "maintenance_end": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "news_before_element": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsAppElements"
              }
            ]
          },
          "company_image": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "placeholder_image": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "foodoffers_list_before_element": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsAppElements"
              }
            ]
          },
          "foodoffers_list_after_element": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsAppElements"
              }
            ]
          },
          "housing_before_element": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsAppElements"
              }
            ]
          },
          "campus_before_element": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsAppElements"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "foods_placeholder_image": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "balance_translations": {
            "nullable": true,
            "description": "Dieser Text ist in der App sichtbar",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsAppSettingsBalanceTranslations"
                }
              ]
            }
          },
          "login_screen_translations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsAppSettingsLoginScreenTranslations"
                }
              ]
            }
          },
          "housing_translations": {
            "nullable": true,
            "description": "Zeigt in der App eine Beschreibung an, vor den Wohnungen, bei der Auflistung aller Wohnungen.",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsAppSettingsHousingTranslations"
                }
              ]
            }
          }
        },
        "x-collection": "app_settings"
      },
      "ItemsAppSettingsHousingTranslations": {
        "type": "object",
        "properties": {
          "let_be_translated": {
            "nullable": true,
            "type": "boolean"
          },
          "be_source_for_translations": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "app_settings_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsAppSettings"
              }
            ]
          },
          "content": {
            "nullable": true,
            "type": "string"
          },
          "languages_code": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            ]
          }
        },
        "x-collection": "app_settings_housing_translations"
      },
      "ItemsAppSettingsLoginScreenTranslations": {
        "type": "object",
        "properties": {
          "be_source_for_translations": {
            "nullable": true,
            "type": "boolean"
          },
          "let_be_translated": {
            "nullable": true,
            "type": "boolean"
          },
          "app_settings_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsAppSettings"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "detailed_description": {
            "nullable": true,
            "type": "string"
          },
          "intro_description": {
            "nullable": true,
            "type": "string"
          },
          "languages_code": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            ]
          }
        },
        "x-collection": "app_settings_login_screen_translations"
      },
      "ItemsBuildingsAttributes": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "buildings_attributes",
        "required": [
          "id"
        ]
      },
      "ItemsBuildingsBusinesshours": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "buildings_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsBuildings"
              }
            ]
          },
          "businesshours_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsBusinesshours"
              }
            ]
          }
        },
        "x-collection": "buildings_businesshours"
      },
      "ItemsAutoTranslationSettings": {
        "type": "object",
        "properties": {
          "valid_auth_key": {
            "nullable": true,
            "type": "boolean"
          },
          "active": {
            "nullable": true,
            "type": "boolean"
          },
          "used": {
            "nullable": true,
            "type": "integer"
          },
          "percentage": {
            "nullable": true,
            "type": "integer"
          },
          "limit": {
            "nullable": true,
            "type": "integer"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "informations": {
            "nullable": true,
            "description": "Informations about errors will be shown here.",
            "type": "string"
          },
          "extra": {
            "nullable": true,
            "description": "Informations about errors will be shown here.",
            "type": "string"
          },
          "auth_key": {
            "nullable": true,
            "description": "Authentication - You need an authentication key to access to the API. https://www.deepl.com/de/your-account/keys",
            "type": "string"
          }
        },
        "x-collection": "auto_translation_settings"
      },
      "ItemsAppFeedbacks": {
        "type": "object",
        "properties": {
          "feedback_read_by_support": {
            "nullable": true,
            "type": "boolean"
          },
          "response_read_by_user": {
            "nullable": true,
            "type": "boolean"
          },
          "positive": {
            "nullable": true,
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "priority": {
            "nullable": true,
            "type": "integer"
          },
          "response": {
            "nullable": true,
            "type": "string"
          },
          "content": {
            "nullable": true,
            "type": "string"
          },
          "display_width": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "display_scale": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "display_pixelratio": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "display_fontscale": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "display_height": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "device_system_version": {
            "nullable": true,
            "type": "string"
          },
          "device_platform": {
            "nullable": true,
            "type": "string"
          },
          "device_brand": {
            "nullable": true,
            "type": "string"
          },
          "contact_email": {
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "profile": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsProfiles"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "app_feedbacks",
        "required": [
          "id"
        ]
      },
      "ItemsBusinesshoursGroups": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "translations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsBusinesshoursGroupsTranslations"
                }
              ]
            }
          }
        },
        "x-collection": "businesshours_groups",
        "required": [
          "id"
        ]
      },
      "ItemsBusinesshoursGroupsTranslations": {
        "type": "object",
        "properties": {
          "let_be_translated": {
            "nullable": true,
            "type": "boolean"
          },
          "be_source_for_translations": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "languages_code": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            ]
          },
          "businesshours_groups_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsBusinesshoursGroups"
              }
            ]
          }
        },
        "x-collection": "businesshours_groups_translations"
      },
      "ItemsCanteenFoodFeedbackReportSchedulesCanteens": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "canteen_food_feedback_report_schedules_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedules"
              }
            ]
          },
          "canteens_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsCanteens"
              }
            ]
          }
        },
        "x-collection": "canteen_food_feedback_report_schedules_canteens"
      },
      "ItemsBusinesshours": {
        "type": "object",
        "properties": {
          "wednesday": {
            "nullable": true,
            "type": "boolean"
          },
          "tuesday": {
            "nullable": true,
            "type": "boolean"
          },
          "thursday": {
            "nullable": true,
            "type": "boolean"
          },
          "sunday": {
            "nullable": true,
            "type": "boolean"
          },
          "saturday": {
            "nullable": true,
            "type": "boolean"
          },
          "monday": {
            "nullable": true,
            "type": "boolean"
          },
          "friday": {
            "nullable": true,
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "time_start": {
            "nullable": true,
            "type": "string",
            "format": "time"
          },
          "time_end": {
            "nullable": true,
            "type": "string",
            "format": "time"
          },
          "date_valid_from": {
            "nullable": true,
            "description": "Leave empty to use default; overridden by other defined ranges.",
            "type": "string",
            "format": "date"
          },
          "date_valid_till": {
            "nullable": true,
            "description": "Leave empty to use default; overridden by other defined ranges.",
            "type": "string",
            "format": "date"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "group": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsBusinesshoursGroups"
              }
            ]
          }
        },
        "x-collection": "businesshours",
        "required": [
          "id"
        ]
      },
      "ItemsBuildingsTranslations": {
        "type": "object",
        "properties": {
          "let_be_translated": {
            "nullable": true,
            "type": "boolean"
          },
          "be_source_for_translations": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "content": {
            "nullable": true,
            "type": "string"
          },
          "languages_code": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            ]
          },
          "buildings_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsBuildings"
              }
            ]
          }
        },
        "x-collection": "buildings_translations"
      },
      "ItemsCanteenFoodFeedbackReportSchedules": {
        "type": "object",
        "properties": {
          "show_food_feedback_labels_for_all_time": {
            "nullable": true,
            "description": "Zeige Speise Label Rückmeldungen insgesammt",
            "type": "boolean"
          },
          "show_canteen_feedbacks_for_all_time": {
            "nullable": true,
            "description": "Zeige Mensa Rückmeldungen insgesammt",
            "type": "boolean"
          },
          "show_canteen_feedbacks_for_selected_period": {
            "nullable": true,
            "description": "Zeige Mensa Rückmeldungen für Ausgewählten Zeitraum",
            "type": "boolean"
          },
          "show_canteen_feedbacks_also_per_canteen": {
            "nullable": true,
            "description": "Zeige Rückmeldungen zu den Mensen pro Mensa: Labels",
            "type": "boolean"
          },
          "report_send_successfully": {
            "nullable": true,
            "type": "boolean"
          },
          "send_on_sundays": {
            "nullable": true,
            "type": "boolean"
          },
          "send_on_saturdays": {
            "nullable": true,
            "type": "boolean"
          },
          "send_on_fridays": {
            "nullable": true,
            "type": "boolean"
          },
          "send_on_thursdays": {
            "nullable": true,
            "type": "boolean"
          },
          "send_on_wednesdays": {
            "nullable": true,
            "type": "boolean"
          },
          "send_on_tuesdays": {
            "nullable": true,
            "type": "boolean"
          },
          "send_on_mondays": {
            "nullable": true,
            "type": "boolean"
          },
          "show_images": {
            "nullable": true,
            "description": "Zeige Bilder der Speisen",
            "type": "boolean"
          },
          "enabled": {
            "nullable": true,
            "type": "boolean"
          },
          "show_food_comments_for_all_time": {
            "nullable": true,
            "description": "Zeige Speise Kommentare insgesammt",
            "type": "boolean"
          },
          "show_food_comments_for_selected_period": {
            "nullable": true,
            "description": "Zeige Speise Kommentare für den gewählten Zeitraum",
            "type": "boolean"
          },
          "show_food_feedback_labels_for_selected_period": {
            "nullable": true,
            "description": "Zeige Speise Label Rückmeldungen für den gewählten Zeitraum",
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "period_days_offset": {
            "nullable": true,
            "description": "Anzahl der Tage, um den der Referenztag verschoben wird. Positive Werte verschieben den Referenztag in die Zukunft, negative in die Vergangenheit.",
            "type": "integer"
          },
          "period_days_amount": {
            "nullable": true,
            "description": "Anzahl der vorherigen Tage fest, die im Bericht enthalten sein sollen, einschließlich des Referenztags. Wenn 1 gesetzt ist, wird nur der Referenztag im Bericht berücksichtigt. Der Referenztag kann durch den Offset verschoben werden.",
            "type": "integer"
          },
          "report_status_log": {
            "nullable": true,
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "date_next_report_is_due": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "send_report_at_hh_mm": {
            "nullable": true,
            "type": "string",
            "format": "time"
          },
          "send_once_now_for_reference_date": {
            "nullable": true,
            "description": "Bericht einmalig senden, als wäre es Tag X",
            "type": "string",
            "format": "date"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "canteens": {
            "nullable": true,
            "description": "Keine Auswahl: Alle Mensen betrachten | Auswahl: Nur Rückmeldungen und Angebote der ausgewählten Mensen werden betrachtet.",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedulesCanteens"
                }
              ]
            }
          },
          "recipients": {
            "nullable": true,
            "description": "Report Empfänger",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedulesReportRecipients"
                }
              ]
            }
          }
        },
        "x-collection": "canteen_food_feedback_report_schedules",
        "required": [
          "id"
        ]
      },
      "ItemsCanteenFoodFeedbackReportSchedulesReportRecipients": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "canteen_food_feedback_report_schedules_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsCanteenFoodFeedbackReportSchedules"
              }
            ]
          },
          "report_recipients_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsReportRecipients"
              }
            ]
          }
        },
        "x-collection": "canteen_food_feedback_report_schedules_report_recipients"
      },
      "ItemsCanteensFeedbacksLabelsTranslations": {
        "type": "object",
        "properties": {
          "let_be_translated": {
            "nullable": true,
            "type": "boolean"
          },
          "be_source_for_translations": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "text": {
            "nullable": true,
            "type": "string"
          },
          "languages_code": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            ]
          },
          "canteens_feedbacks_labels_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabels"
              }
            ]
          }
        },
        "x-collection": "canteens_feedbacks_labels_translations"
      },
      "ItemsCanteensFoodserviceHours": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "businesshours_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsBusinesshours"
              }
            ]
          },
          "canteens_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsCanteens"
              }
            ]
          }
        },
        "x-collection": "canteens_foodservice_hours"
      },
      "ItemsCashregistersTransactions": {
        "type": "object",
        "properties": {
          "weekday_index_calculated": {
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "quantity": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": false,
            "type": "string"
          },
          "date": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "cashregister": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsCashregisters"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "cashregisters_transactions",
        "required": [
          "id"
        ]
      },
      "ItemsCollectibleEvents": {
        "type": "object",
        "properties": {
          "monitor_display_number_of_participants": {
            "nullable": true,
            "type": "boolean"
          },
          "monitor_display_number_of_collected_items": {
            "nullable": true,
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "points_maximum": {
            "nullable": true,
            "type": "string"
          },
          "points_minimum": {
            "nullable": true,
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_start": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_end": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "collectible_image": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "monitor_background_image": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "participants": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsCollectibleEventParticipants"
                }
              ]
            }
          },
          "translations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsCollectibleEventsTranslations"
                }
              ]
            }
          }
        },
        "x-collection": "collectible_events",
        "required": [
          "id"
        ]
      },
      "ItemsCollectibleEventsTranslations": {
        "type": "object",
        "properties": {
          "let_be_translated": {
            "nullable": true,
            "type": "boolean"
          },
          "be_source_for_translations": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "languages_code": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            ]
          },
          "collectible_events_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsCollectibleEvents"
              }
            ]
          }
        },
        "x-collection": "collectible_events_translations"
      },
      "ItemsCollectionsDatesLastUpdate": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": false,
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "collections_dates_last_update",
        "required": [
          "id"
        ]
      },
      "ItemsDevices": {
        "type": "object",
        "properties": {
          "is_simulator": {
            "nullable": true,
            "type": "boolean"
          },
          "is_tablet": {
            "nullable": true,
            "type": "boolean"
          },
          "is_web": {
            "nullable": true,
            "type": "boolean"
          },
          "is_android": {
            "nullable": true,
            "type": "boolean"
          },
          "is_ios": {
            "nullable": true,
            "type": "boolean"
          },
          "is_landscape": {
            "nullable": true,
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "display_scale": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "display_pixelratio": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "display_height": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "display_fontscale": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "pushTokenObj": {
            "nullable": true
          },
          "display_width": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "system_version": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "platform": {
            "nullable": true,
            "type": "string"
          },
          "brand": {
            "nullable": true,
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "profile": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsProfiles"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "devices",
        "required": [
          "id"
        ]
      },
      "Activity": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the object.",
            "example": 2,
            "type": "integer"
          },
          "user_agent": {
            "description": "User agent string of the browser the user used when the action took place.",
            "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_1) AppleWebKit/537.36 (KHTML,like Gecko) Chrome/78.0.3904.108 Safari/537.36",
            "type": "string"
          },
          "origin": {
            "description": "Origin of the request when the action took place.",
            "example": "https://directus.io",
            "type": "string"
          },
          "item": {
            "description": "Unique identifier for the item the action applied to. This is always a string, even for integer primary keys.",
            "example": "328",
            "type": "string"
          },
          "collection": {
            "description": "Collection identifier in which the item resides.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Collections"
              }
            ]
          },
          "ip": {
            "description": "The IP address of the user at the time the action took place.",
            "example": "127.0.0.1",
            "oneOf": [
              {
                "type": "string",
                "format": "ipv4"
              }
            ]
          },
          "action": {
            "description": "Action that was performed.",
            "example": "update",
            "type": "string",
            "enum": [
              "create",
              "update",
              "delete",
              "login"
            ]
          },
          "timestamp": {
            "description": "When the action happened.",
            "example": "2019-12-05T22:52:09Z",
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "description": "The user who performed this action.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ],
            "nullable": true
          },
          "revisions": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/Revisions"
                }
              ]
            }
          }
        },
        "x-collection": "directus_activity"
      },
      "ItemsCanteensFeedbacksLabelsEntries": {
        "type": "object",
        "properties": {
          "dislike": {
            "nullable": true,
            "type": "boolean"
          },
          "like": {
            "nullable": true,
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "date": {
            "nullable": true,
            "type": "string",
            "format": "date"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "profile": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsProfiles"
              }
            ]
          },
          "canteen": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsCanteens"
              }
            ]
          },
          "label": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabels"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "canteens_feedbacks_labels_entries",
        "required": [
          "id"
        ]
      },
      "ItemsCanteensFeedbacksLabels": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "image_thumb_hash": {
            "nullable": true,
            "type": "string"
          },
          "image_remote_url": {
            "nullable": true,
            "type": "string"
          },
          "icon": {
            "nullable": true,
            "description": "Icon from: https://icons.expo.fyi/Index",
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "image": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "translations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsCanteensFeedbacksLabelsTranslations"
                }
              ]
            }
          }
        },
        "x-collection": "canteens_feedbacks_labels",
        "required": [
          "id"
        ]
      },
      "ItemsCanteensFoodserviceHoursDuringSemesterBreak": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "businesshours_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsBusinesshours"
              }
            ]
          },
          "canteens_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsCanteens"
              }
            ]
          }
        },
        "x-collection": "canteens_foodservice_hours_during_semester_break"
      },
      "ItemsCashregisters": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "external_identifier": {
            "nullable": true,
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "canteen": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsCanteens"
              }
            ]
          },
          "transactions": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/ItemsCashregistersTransactions"
                }
              ]
            }
          }
        },
        "x-collection": "cashregisters",
        "required": [
          "id"
        ]
      },
      "Comments": {
        "type": "object",
        "properties": {
          "comment": {
            "description": "User comment. This will store the comments that show up in the right sidebar of the item edit page in the admin app.",
            "example": "This is a comment",
            "type": "string"
          },
          "item": {
            "description": "The item the Comment is created for.",
            "example": "123",
            "type": "string"
          },
          "collection": {
            "description": "The collection of the item the Comment is created for.",
            "example": "articles",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Collections"
              }
            ]
          },
          "date_created": {
            "description": "When the Comment was created.",
            "type": "string",
            "example": "2024-01-23T12:34:56Z",
            "format": "date-time",
            "nullable": true
          },
          "date_updated": {
            "description": "When the Comment was updated.",
            "type": "string",
            "example": "2024-01-23T12:34:56Z",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "description": "Unique identifier for this single collection preset.",
            "example": "81dfa7e0-56d2-471f-b96a-1cf8a62bdf28",
            "type": "string"
          },
          "user_created": {
            "description": "User that created the Comment.",
            "example": "81dfa7e0-56d2-471f-b96a-1cf8a62bdf28",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_updated": {
            "description": "User that updated the Comment.",
            "example": "81dfa7e0-56d2-471f-b96a-1cf8a62bdf28",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "directus_comments"
      },
      "Extensions": {
        "type": "object",
        "properties": {
          "enabled": {
            "nullable": false,
            "type": "boolean"
          },
          "source": {
            "nullable": false,
            "type": "string"
          },
          "folder": {
            "nullable": false,
            "type": "string"
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "bundle": {
            "description": "Name of the bundle the extension is in.",
            "example": "directus-extension-my-bundle",
            "type": "string",
            "nullable": true
          }
        },
        "x-collection": "directus_extensions"
      },
      "Fields": {
        "type": "object",
        "properties": {
          "hidden": {
            "nullable": false,
            "type": "boolean"
          },
          "required": {
            "nullable": true,
            "type": "boolean"
          },
          "readonly": {
            "nullable": false,
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "display_options": {
            "nullable": true
          },
          "options": {
            "nullable": true
          },
          "validation_message": {
            "nullable": true,
            "type": "string"
          },
          "note": {
            "nullable": true,
            "type": "string"
          },
          "translations": {
            "nullable": true
          },
          "validation": {
            "nullable": true
          },
          "conditions": {
            "nullable": true
          },
          "group": {
            "nullable": true,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/Fields"
              }
            ]
          },
          "width": {
            "nullable": true,
            "type": "string"
          },
          "display": {
            "nullable": true,
            "type": "string"
          },
          "interface": {
            "nullable": true,
            "type": "string"
          },
          "special": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "field": {
            "description": "Unique name of the field. Field name is unique within the collection.",
            "example": "id",
            "type": "string"
          },
          "collection": {
            "description": "Unique name of the collection this field is in.",
            "example": "about_us",
            "type": "string"
          }
        },
        "x-collection": "directus_fields"
      },
      "Operations": {
        "type": "object",
        "properties": {
          "position_y": {
            "description": "Position of the operation on the Y axis within the flow workspace.",
            "type": "integer",
            "example": 12
          },
          "position_x": {
            "description": "Position of the operation on the X axis within the flow workspace.",
            "type": "integer",
            "example": 12
          },
          "options": {
            "description": "Options depending on the type of the operation.",
            "type": "object",
            "example": null,
            "nullable": true
          },
          "type": {
            "description": "Type of operation. One of `log`, `mail`, `notification`, `create`, `read`, `request`, `sleep`, `transform`, `trigger`, `condition`, or any type of custom operation extensions.",
            "type": "string",
            "example": "log"
          },
          "key": {
            "description": "Key for the operation. Must be unique within a given flow.",
            "type": "string",
            "example": "log_console"
          },
          "name": {
            "description": "The name of the operation.",
            "type": "string",
            "example": "Log to Console"
          },
          "date_created": {
            "description": "Timestamp in ISO8601 when the operation was created.",
            "type": "string",
            "example": "2022-05-11T13:14:52Z",
            "format": "date-time",
            "nullable": true
          },
          "flow": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Flows"
              }
            ]
          },
          "user_created": {
            "description": "The user who created the operation.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "description": "Unique identifier for the operation.",
            "type": "string",
            "example": "2f24211d-d928-469a-aea3-3c8f53d4e426"
          },
          "resolve": {
            "description": "The operation triggered when the current operation succeeds (or `then` logic of a condition operation).",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Operations"
              }
            ]
          },
          "reject": {
            "description": "The operation triggered when the current operation fails (or `otherwise` logic of a condition operation).",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Operations"
              }
            ]
          }
        },
        "x-collection": "directus_operations"
      },
      "Permissions": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the permission.",
            "example": 1,
            "type": "integer"
          },
          "fields": {
            "description": "CSV of fields that the user is allowed to interact with.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "validation": {
            "description": "JSON structure containing the validation checks for this permission.",
            "type": "object",
            "nullable": true
          },
          "presets": {
            "description": "JSON structure containing the preset value for created/updated items.",
            "type": "object",
            "nullable": true
          },
          "permissions": {
            "description": "JSON structure containing the permissions checks for this permission.",
            "type": "object",
            "nullable": true
          },
          "action": {
            "description": "What action this permission applies to.",
            "example": "create",
            "type": "string",
            "enum": [
              "create",
              "read",
              "update",
              "delete"
            ]
          },
          "collection": {
            "description": "What collection this permission applies to.",
            "example": "customers",
            "type": "string"
          },
          "policy": {
            "nullable": false
          }
        },
        "x-collection": "directus_permissions"
      },
      "Collections": {
        "type": "object",
        "properties": {
          "archive_app_filter": {
            "nullable": false,
            "type": "boolean"
          },
          "versioning": {
            "nullable": false,
            "type": "boolean"
          },
          "hidden": {
            "nullable": false,
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "singleton": {
            "nullable": false,
            "type": "boolean"
          },
          "note": {
            "nullable": true,
            "type": "string"
          },
          "translations": {
            "nullable": true
          },
          "item_duplication_fields": {
            "nullable": true
          },
          "preview_url": {
            "nullable": true,
            "type": "string"
          },
          "collapse": {
            "nullable": false,
            "type": "string"
          },
          "group": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Collections"
              }
            ]
          },
          "color": {
            "nullable": true,
            "type": "string"
          },
          "accountability": {
            "nullable": true,
            "type": "string"
          },
          "sort_field": {
            "nullable": true,
            "type": "string"
          },
          "unarchive_value": {
            "nullable": true,
            "type": "string"
          },
          "archive_value": {
            "nullable": true,
            "type": "string"
          },
          "archive_field": {
            "nullable": true,
            "type": "string"
          },
          "display_template": {
            "nullable": true,
            "type": "string"
          },
          "icon": {
            "nullable": true,
            "type": "string"
          },
          "collection": {
            "description": "The collection key.",
            "example": "customers",
            "type": "string"
          }
        },
        "x-collection": "directus_collections"
      },
      "Flows": {
        "type": "object",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "options": {
            "description": "Options of the selected trigger for the flow.",
            "type": "object",
            "example": null,
            "nullable": true
          },
          "accountability": {
            "description": "The permission used during the flow. One of `$public`, `$trigger`, `$full`, or UUID of a role.",
            "type": "string",
            "example": "$trigger"
          },
          "trigger": {
            "description": "Type of trigger for the flow. One of `hook`, `webhook`, `operation`, `schedule`, `manual`.",
            "type": "string",
            "example": "manual"
          },
          "status": {
            "description": "Current status of the flow.",
            "type": "string",
            "example": "active",
            "default": "active",
            "enum": [
              "active",
              "inactive"
            ]
          },
          "color": {
            "description": "Color of the icon displayed in the Admin App for the flow.",
            "type": "string",
            "example": "#112233",
            "nullable": true
          },
          "icon": {
            "description": "Icon displayed in the Admin App for the flow.",
            "type": "string",
            "example": "bolt"
          },
          "name": {
            "description": "The name of the flow.",
            "type": "string",
            "example": "Update Articles Flow"
          },
          "date_created": {
            "description": "Timestamp in ISO8601 when the flow was created.",
            "type": "string",
            "example": "2022-05-11T13:14:52Z",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "description": "Unique identifier for the flow.",
            "type": "string",
            "example": "2f24211d-d928-469a-aea3-3c8f53d4e426"
          },
          "operation": {
            "description": "UUID of the operation connected to the trigger in the flow.",
            "example": "92e82998-e421-412f-a513-13701e83e4ce",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Operations"
              }
            ]
          },
          "user_created": {
            "description": "The user who created the flow.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "operations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/Operations"
                }
              ]
            }
          }
        },
        "x-collection": "directus_flows"
      },
      "Relations": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the relation.",
            "example": 1,
            "type": "integer"
          },
          "one_allowed_collections": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "one_deselect_action": {
            "nullable": false,
            "type": "string"
          },
          "sort_field": {
            "nullable": true,
            "type": "string"
          },
          "junction_field": {
            "description": "Field on the junction table that holds the many field of the related relation.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "one_collection_field": {
            "nullable": true,
            "type": "string"
          },
          "one_field": {
            "description": "Alias column that serves as the _one_ side of the relationship.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "one_collection": {
            "description": "Collection on the _one_ side of the relationship.",
            "example": "directus_users",
            "type": "string"
          },
          "many_field": {
            "description": "Foreign key. Field that holds the primary key of the related collection.",
            "example": "user",
            "type": "string"
          },
          "many_collection": {
            "description": "Collection that has the field that holds the foreign key.",
            "example": "directus_activity",
            "type": "string"
          }
        },
        "x-collection": "directus_relations"
      },
      "Versions": {
        "type": "object",
        "properties": {
          "delta": {
            "description": "The current changes compared to the main version of the item.",
            "example": {
              "my_field": "Updated Value"
            },
            "type": "object"
          },
          "hash": {
            "nullable": true,
            "type": "string"
          },
          "item": {
            "description": "The item the Content Version is created on.",
            "example": "168",
            "type": "string"
          },
          "collection": {
            "description": "Name of the collection the Content Version is created on.",
            "example": "articles",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Collections"
              }
            ]
          },
          "name": {
            "description": "Descriptive name of the Content Version.",
            "example": "My Draft",
            "type": "string"
          },
          "key": {
            "description": "Key of the Content Version, used as the value for the \"version\" query parameter.",
            "example": "draft",
            "type": "string"
          },
          "date_created": {
            "description": "When the Content Version was created.",
            "type": "string",
            "example": "2022-05-11T13:14:52Z",
            "format": "date-time",
            "nullable": true
          },
          "date_updated": {
            "description": "When the Content Version was last updated.",
            "type": "string",
            "example": "2022-05-11T13:14:53Z",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "description": "Primary key of the Content Version.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "type": "string"
          },
          "user_created": {
            "description": "User that created the Content Version.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_updated": {
            "description": "User that last updated the Content Version.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "directus_versions"
      },
      "Presets": {
        "type": "object",
        "properties": {
          "refresh_interval": {
            "nullable": true,
            "type": "integer"
          },
          "id": {
            "description": "Unique identifier for this single collection preset.",
            "example": 155,
            "type": "integer"
          },
          "filter": {
            "nullable": true
          },
          "layout_query": {
            "description": "Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters.",
            "example": {
              "cards": {
                "sort": "-published_on"
              }
            },
            "nullable": true
          },
          "layout_options": {
            "description": "Options of the views. The properties in here are controlled by the layout.",
            "example": {
              "cards": {
                "icon": "account_circle",
                "title": "{{ first_name }} {{ last_name }}",
                "subtitle": "{{ title }}",
                "size": 3
              }
            },
            "nullable": true
          },
          "color": {
            "nullable": true,
            "type": "string"
          },
          "icon": {
            "nullable": true,
            "type": "string"
          },
          "layout": {
            "description": "Key of the layout that is used.",
            "type": "string",
            "example": null
          },
          "search": {
            "description": "Search query.",
            "type": "string",
            "nullable": true
          },
          "collection": {
            "description": "What collection this collection preset is used for.",
            "example": "articles",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Collections"
              }
            ]
          },
          "bookmark": {
            "description": "Name for the bookmark. If this is set, the preset will be considered a bookmark.",
            "nullable": true,
            "type": "string"
          },
          "user": {
            "description": "The unique identifier of the user to whom this collection preset applies.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "role": {
            "description": "The unique identifier of a role in the platform. If `user` is null, this will be used to apply the collection preset or bookmark for all users in the role.",
            "example": "50419801-0f30-8644-2b3c-9bc2d980d0a0",
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Roles"
              }
            ]
          }
        },
        "x-collection": "directus_presets"
      },
      "Settings": {
        "type": "object",
        "properties": {
          "public_registration_verify_email": {
            "nullable": false,
            "description": "$t:fields.directus_settings.public_registration_verify_email_note",
            "type": "boolean"
          },
          "public_registration": {
            "nullable": false,
            "description": "$t:fields.directus_settings.public_registration_note",
            "type": "boolean"
          },
          "auth_login_attempts": {
            "description": "Allowed authentication login attempts before the user's status is set to blocked.",
            "type": "integer",
            "example": 25
          },
          "id": {
            "description": "Unique identifier for the setting.",
            "type": "integer",
            "example": 1
          },
          "public_note": {
            "description": "Note rendered on the public pages of the app.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "custom_css": {
            "nullable": true,
            "type": "string"
          },
          "public_registration_email_filter": {
            "nullable": true,
            "description": "$t:fields.directus_settings.public_registration_email_filter_note"
          },
          "custom_aspect_ratios": {
            "nullable": true
          },
          "storage_asset_presets": {
            "description": "Array of allowed",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "description": "Key for the asset. Used in the assets endpoint.",
                  "type": "string"
                },
                "fit": {
                  "description": "Whether to crop the thumbnail to match the size, or maintain the aspect ratio.",
                  "type": "string",
                  "enum": [
                    "cover",
                    "contain",
                    "inside",
                    "outside"
                  ]
                },
                "width": {
                  "description": "Width of the thumbnail.",
                  "type": "integer"
                },
                "height": {
                  "description": "Height of the thumbnail.",
                  "type": "integer"
                },
                "withoutEnlargement": {
                  "description": "No image upscale",
                  "type": "boolean"
                },
                "quality": {
                  "description": "Quality of the compression used.",
                  "type": "integer"
                },
                "format": {
                  "description": "Reformat output image",
                  "type": "string",
                  "enum": [
                    "",
                    "jpeg",
                    "png",
                    "webp",
                    "tiff",
                    "avif"
                  ]
                },
                "transforms": {
                  "description": "Additional transformations to apply",
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "type": "object",
                    "properties": {
                      "method": {
                        "description": "The Sharp method name",
                        "type": "string"
                      },
                      "arguments": {
                        "description": "A list of arguments to pass to the Sharp method",
                        "type": "array",
                        "nullable": true,
                        "items": {
                          "type": "object",
                          "properties": {
                            "argument": {
                              "description": "A JSON representation of the argument value",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": null,
            "nullable": true
          },
          "basemaps": {
            "nullable": true
          },
          "module_bar": {
            "nullable": true
          },
          "theme_light_overrides": {
            "nullable": true
          },
          "theme_dark_overrides": {
            "nullable": true
          },
          "report_feature_url": {
            "nullable": true,
            "type": "string"
          },
          "report_bug_url": {
            "nullable": true,
            "type": "string"
          },
          "report_error_url": {
            "nullable": true,
            "type": "string"
          },
          "default_theme_dark": {
            "nullable": true,
            "type": "string"
          },
          "default_theme_light": {
            "nullable": true,
            "type": "string"
          },
          "default_appearance": {
            "nullable": false,
            "type": "string"
          },
          "default_language": {
            "nullable": false,
            "type": "string"
          },
          "project_descriptor": {
            "nullable": true,
            "type": "string"
          },
          "mapbox_key": {
            "nullable": true,
            "type": "string"
          },
          "storage_asset_transform": {
            "description": "What transformations are allowed in the assets endpoint.",
            "type": "string",
            "enum": [
              "all",
              "none",
              "presets"
            ],
            "example": "all",
            "nullable": true
          },
          "auth_password_policy": {
            "description": "Authentication password policy.",
            "type": "string",
            "nullable": true
          },
          "project_color": {
            "description": "The brand color of the project.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "project_url": {
            "description": "The url of the project.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "project_name": {
            "description": "The name of the project.",
            "type": "string",
            "example": "Directus"
          },
          "project_logo": {
            "description": "The logo of the project.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "public_foreground": {
            "description": "The foreground of the project.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "public_background": {
            "description": "The background of the project.",
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "example": null,
            "nullable": true
          },
          "storage_default_folder": {
            "description": "Default folder to place files",
            "type": "string",
            "format": "uuid"
          },
          "public_favicon": {
            "nullable": true,
            "description": "$t:field_options.directus_settings.project_favicon_note",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "public_registration_role": {
            "nullable": true,
            "description": "$t:fields.directus_settings.public_registration_role_note",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Roles"
              }
            ]
          }
        },
        "x-collection": "directus_settings"
      },
      "Webhooks": {
        "type": "object",
        "properties": {
          "was_active_before_deprecation": {
            "nullable": false,
            "type": "boolean"
          },
          "data": {
            "description": "If yes, send the content of what was done",
            "type": "boolean",
            "example": true
          },
          "id": {
            "description": "The index of the webhook.",
            "type": "integer",
            "example": 1
          },
          "headers": {
            "nullable": true
          },
          "collections": {
            "nullable": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "actions": {
            "description": "The actions that triggers this webhook.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": null,
            "nullable": true
          },
          "status": {
            "description": "The status of the webhook.",
            "type": "string",
            "example": "inactive"
          },
          "url": {
            "description": "The url of the webhook.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "method": {
            "description": "Method used in the webhook.",
            "type": "string",
            "example": "POST"
          },
          "name": {
            "description": "The name of the webhook.",
            "type": "string",
            "example": "create articles"
          },
          "migrated_flow": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Flows"
              }
            ]
          }
        },
        "x-collection": "directus_webhooks"
      },
      "ItemsFilesShares": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_exires_at": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "file": {
            "nullable": true,
            "description": "Klicken Sie auf die Datei um diese herunterzuladen.",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "files_shares",
        "required": [
          "id"
        ]
      },
      "ItemsDirectusSyncIDMap": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "local_id": {
            "nullable": false,
            "type": "string"
          },
          "sync_id": {
            "nullable": false,
            "type": "string"
          },
          "table": {
            "nullable": false,
            "type": "string"
          },
          "created_at": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          }
        },
        "x-collection": "directus_sync_id_map",
        "required": [
          "local_id",
          "sync_id",
          "table"
        ]
      },
      "Revisions": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the revision.",
            "example": 1,
            "type": "integer"
          },
          "activity": {
            "description": "Unique identifier for the activity record.",
            "example": 2,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/Activity"
              }
            ]
          },
          "parent": {
            "description": "If the current item was updated relationally, this is the id of the parent revision record",
            "example": null,
            "type": "integer",
            "nullable": true
          },
          "delta": {
            "description": "Changes between the previous and the current revision.",
            "example": {
              "title": "Hello, World!"
            },
            "type": "object"
          },
          "data": {
            "description": "Copy of item state at time of update.",
            "example": {
              "author": 1,
              "body": "This is my first post",
              "featured_image": 15,
              "id": "168",
              "title": "Hello, World!"
            },
            "type": "object",
            "nullable": true
          },
          "item": {
            "description": "Primary key of updated item.",
            "example": "168",
            "type": "string"
          },
          "collection": {
            "description": "Collection of the updated item.",
            "example": "articles",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Collections"
              }
            ]
          },
          "version": {
            "description": "Associated version of this revision.",
            "example": "draft",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Versions"
              }
            ]
          }
        },
        "x-collection": "directus_revisions"
      },
      "ItemsFoods": {
        "type": "object",
        "properties": {
          "rating_amount": {
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "rating_amount_legacy": {
            "nullable": true,
            "type": "integer"
          },
          "rating_average_legacy": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "rating_average": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "image_thumb_hash": {
            "nullable": true,
            "type": "string"
          },
          "image_remote_url": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "nullable": false,
            "type": "string"
          },
          "extra": {
            "nullable": true,
            "type": "string"
          },
          "category": {
            "nullable": true,
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "image": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "food_category": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFoodsCategories"
              }
            ]
          },
          "feedbacks": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsFoodsFeedbacks"
                }
              ]
            }
          },
          "markings": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsFoodsMarkings"
                }
              ]
            }
          },
          "translations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsFoodsTranslations"
                }
              ]
            }
          },
          "attribute_values": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsFoodsAttributesValues"
                }
              ]
            }
          }
        },
        "x-collection": "foods",
        "required": [
          "id"
        ]
      },
      "ItemsFoodoffersMarkings": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "markings_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsMarkings"
              }
            ]
          },
          "foodoffers_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFoodoffers"
              }
            ]
          }
        },
        "x-collection": "foodoffers_markings"
      },
      "ItemsFoodsAttributesGroups": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "background_color": {
            "nullable": true,
            "type": "string"
          },
          "image_thumb_hash": {
            "nullable": true,
            "type": "string"
          },
          "image_remote_url": {
            "nullable": true,
            "type": "string"
          },
          "icon_expo": {
            "nullable": true,
            "type": "string"
          },
          "icon": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "image": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "food_attributes": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsFoodsAttributes"
                }
              ]
            }
          },
          "translations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsFoodsAttributesGroupsTranslations"
                }
              ]
            }
          }
        },
        "x-collection": "foods_attributes_groups",
        "required": [
          "id"
        ]
      },
      "ItemsFoodsAttributesGroupsTranslations": {
        "type": "object",
        "properties": {
          "be_source_for_translations": {
            "nullable": true,
            "type": "boolean"
          },
          "let_be_translated": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "languages_code": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            ]
          },
          "foods_attributes_groups_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFoodsAttributesGroups"
              }
            ]
          }
        },
        "x-collection": "foods_attributes_groups_translations"
      },
      "ItemsFoodsAttributesTranslations": {
        "type": "object",
        "properties": {
          "let_be_translated": {
            "nullable": true,
            "type": "boolean"
          },
          "be_source_for_translations": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "languages_code": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            ]
          },
          "foods_attributes_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFoodsAttributes"
              }
            ]
          }
        },
        "x-collection": "foods_attributes_translations"
      },
      "ItemsFoodsAttributesValues": {
        "type": "object",
        "properties": {
          "boolean_value": {
            "nullable": true,
            "type": "boolean"
          },
          "number_value": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "food_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsFoods"
              }
            ]
          },
          "string_value": {
            "nullable": true,
            "type": "string"
          },
          "icon_value": {
            "nullable": true,
            "type": "string"
          },
          "color_value": {
            "nullable": true,
            "type": "string"
          },
          "foodoffer_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFoodoffers"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "food_attribute": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFoodsAttributes"
              }
            ]
          }
        },
        "x-collection": "foods_attributes_values",
        "required": [
          "id"
        ]
      },
      "ItemsFoodsCategories": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "external_identifier": {
            "nullable": true,
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "translations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsFoodsCategoriesTranslations"
                }
              ]
            }
          }
        },
        "x-collection": "foods_categories",
        "required": [
          "id"
        ]
      },
      "ItemsFoodsCategoriesTranslations": {
        "type": "object",
        "properties": {
          "let_be_translated": {
            "nullable": true,
            "type": "boolean"
          },
          "be_source_for_translations": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "languages_code": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            ]
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "foods_categories_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFoodsCategories"
              }
            ]
          }
        },
        "x-collection": "foods_categories_translations"
      },
      "ItemsFoodsFeedbacks": {
        "type": "object",
        "properties": {
          "notify": {
            "nullable": true,
            "type": "boolean"
          },
          "rating": {
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "comment": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "food": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsFoods"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "profile": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsProfiles"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "foodoffer": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFoodoffers"
              }
            ]
          },
          "canteen": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsCanteens"
              }
            ]
          }
        },
        "x-collection": "foods_feedbacks",
        "required": [
          "id"
        ]
      },
      "ItemsFoodsFeedbacksFoodsFeedbacksLabels": {
        "type": "object",
        "properties": {
          "dislike": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "foods_feedbacks_labels_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabels"
              }
            ]
          },
          "foods_feedbacks_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFoodsFeedbacks"
              }
            ]
          }
        },
        "x-collection": "foods_feedbacks_foods_feedbacks_labels"
      },
      "ItemsFoodoffers": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "price_student": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "price_guest": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "price_employee": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "redirect_url": {
            "nullable": true,
            "type": "string"
          },
          "category": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "food": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsFoods"
              }
            ]
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "date": {
            "nullable": true,
            "type": "string",
            "format": "date"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "foodoffer_category": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFoodoffersCategories"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "canteen": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsCanteens"
              }
            ]
          },
          "markings": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsFoodoffersMarkings"
                }
              ]
            }
          },
          "attribute_values": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsFoodsAttributesValues"
                }
              ]
            }
          }
        },
        "x-collection": "foodoffers",
        "required": [
          "id"
        ]
      },
      "ItemsFoodoffersCategories": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "external_identifier": {
            "nullable": true,
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "translations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsFoodoffersCategoriesTranslations"
                }
              ]
            }
          }
        },
        "x-collection": "foodoffers_categories",
        "required": [
          "id"
        ]
      },
      "ItemsFoodsAttributes": {
        "type": "object",
        "properties": {
          "show_on_card": {
            "nullable": true,
            "type": "boolean"
          },
          "show_on_label_list": {
            "nullable": true,
            "type": "boolean"
          },
          "full_width": {
            "nullable": true,
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "suffix": {
            "nullable": true,
            "type": "string"
          },
          "prefix": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "image_thumb_hash": {
            "nullable": true,
            "type": "string"
          },
          "image_remote_url": {
            "nullable": true,
            "type": "string"
          },
          "icon_expo": {
            "nullable": true,
            "description": "https://icons.expo.fyi/Index",
            "type": "string"
          },
          "external_identifier": {
            "nullable": true,
            "type": "string"
          },
          "background_color": {
            "nullable": true,
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "image": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "group": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFoodsAttributesGroups"
              }
            ]
          },
          "translations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsFoodsAttributesTranslations"
                }
              ]
            }
          }
        },
        "x-collection": "foods_attributes",
        "required": [
          "id"
        ]
      },
      "ItemsFoodsFeedbacksLabelsTranslations": {
        "type": "object",
        "properties": {
          "be_source_for_translations": {
            "nullable": true,
            "type": "boolean"
          },
          "let_be_translated": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "text": {
            "nullable": true,
            "type": "string"
          },
          "languages_code": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            ]
          },
          "foods_feedbacks_labels_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabels"
              }
            ]
          }
        },
        "x-collection": "foods_feedbacks_labels_translations"
      },
      "ItemsFoodsMarkings": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "foods_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsFoods"
              }
            ]
          },
          "markings_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsMarkings"
              }
            ]
          }
        },
        "x-collection": "foods_markings"
      },
      "ItemsFormAnswersFiles": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "directus_files_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "form_answers_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFormAnswers"
              }
            ]
          }
        },
        "x-collection": "form_answers_files"
      },
      "ItemsFormFields": {
        "type": "object",
        "properties": {
          "is_required": {
            "nullable": true,
            "type": "boolean"
          },
          "is_visible_in_form": {
            "nullable": true,
            "type": "boolean"
          },
          "is_disabled": {
            "nullable": true,
            "type": "boolean"
          },
          "is_visible_in_export": {
            "nullable": true,
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "external_export_id": {
            "nullable": true,
            "type": "string"
          },
          "external_import_id": {
            "nullable": true,
            "type": "string"
          },
          "field_type": {
            "nullable": true,
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "background_color": {
            "nullable": true,
            "type": "string"
          },
          "image_thumb_hash": {
            "nullable": true,
            "type": "string"
          },
          "image_remote_url": {
            "nullable": true,
            "type": "string"
          },
          "icon_expo": {
            "nullable": true,
            "description": "https://icons.expo.fyi/Index",
            "type": "string"
          },
          "icon": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "value_suffix": {
            "nullable": true,
            "type": "string"
          },
          "value_prefix": {
            "nullable": true,
            "type": "string"
          },
          "internal_custom_id": {
            "nullable": true,
            "type": "string"
          },
          "external_export_field_name": {
            "nullable": true,
            "type": "string"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "form": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsForms"
              }
            ]
          },
          "image": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "translations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsFormFieldsTranslations"
                }
              ]
            }
          }
        },
        "x-collection": "form_fields",
        "required": [
          "id"
        ]
      },
      "ItemsFormExtracts": {
        "type": "object",
        "properties": {
          "send_attachments_as_links": {
            "nullable": true,
            "type": "boolean"
          },
          "all_fields": {
            "nullable": true,
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "recipient_email_static": {
            "nullable": true,
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "internal_custom_id": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "recipient_email_field": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFormFields"
              }
            ]
          },
          "recipient_user": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "form": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsForms"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "fields": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsFormExtractsFormFields"
                }
              ]
            }
          }
        },
        "x-collection": "form_extracts",
        "required": [
          "id"
        ]
      },
      "ItemsFormExtractsFormFields": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "form_fields_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFormFields"
              }
            ]
          },
          "form_extracts_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFormExtracts"
              }
            ]
          }
        },
        "x-collection": "form_extracts_form_fields"
      },
      "ItemsForms": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "icon_expo": {
            "nullable": true,
            "description": "https://icons.expo.fyi/Index",
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "internal_custom_id": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "category": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFormCategories"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "form_submissions": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsFormSubmissions"
                }
              ]
            }
          },
          "form_fields": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsFormFields"
                }
              ]
            }
          },
          "translations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsFormsTranslations"
                }
              ]
            }
          }
        },
        "x-collection": "forms",
        "required": [
          "id"
        ]
      },
      "ItemsFormSubmissions": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "internal_custom_id": {
            "nullable": true,
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "state": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_submitted": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_started": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_locked_until": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_locked_by": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "form": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsForms"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "form_answers": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsFormAnswers"
                }
              ]
            }
          },
          "mails": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsMails"
                }
              ]
            }
          }
        },
        "x-collection": "form_submissions",
        "required": [
          "id"
        ]
      },
      "ItemsFormCategories": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "icon_expo": {
            "nullable": true,
            "description": "https://icons.expo.fyi/Index",
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "translations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsFormCategoriesTranslations"
                }
              ]
            }
          },
          "forms": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsForms"
                }
              ]
            }
          }
        },
        "x-collection": "form_categories",
        "required": [
          "id"
        ]
      },
      "ItemsFormFieldsTranslations": {
        "type": "object",
        "properties": {
          "be_source_for_translations": {
            "nullable": true,
            "type": "boolean"
          },
          "let_be_translated": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "languages_code": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            ]
          },
          "form_fields_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFormFields"
              }
            ]
          }
        },
        "x-collection": "form_fields_translations"
      },
      "ItemsFoodsFeedbacksLabels": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "image_thumb_hash": {
            "nullable": true,
            "type": "string"
          },
          "image_remote_url": {
            "nullable": true,
            "type": "string"
          },
          "icon": {
            "nullable": true,
            "description": "Icon from: https://icons.expo.fyi/Index",
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "image": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "translations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabelsTranslations"
                }
              ]
            }
          }
        },
        "x-collection": "foods_feedbacks_labels",
        "required": [
          "id"
        ]
      },
      "ItemsFoodsFeedbacksLabelsEntries": {
        "type": "object",
        "properties": {
          "dislike": {
            "nullable": true,
            "type": "boolean"
          },
          "like": {
            "nullable": true,
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "food": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsFoods"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "foodoffer": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFoodoffers"
              }
            ]
          },
          "canteen": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsCanteens"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "profile": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsProfiles"
              }
            ]
          },
          "label": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFoodsFeedbacksLabels"
              }
            ]
          }
        },
        "x-collection": "foods_feedbacks_labels_entries",
        "required": [
          "id"
        ]
      },
      "ItemsFoodsTranslations": {
        "type": "object",
        "properties": {
          "let_be_translated": {
            "nullable": true,
            "type": "boolean"
          },
          "be_source_for_translations": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "languages_code": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            ]
          },
          "foods_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsFoods"
              }
            ]
          }
        },
        "x-collection": "foods_translations"
      },
      "ItemsFormAnswers": {
        "type": "object",
        "properties": {
          "value_boolean": {
            "nullable": true,
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "value_string": {
            "nullable": true,
            "type": "string"
          },
          "value_number": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "value_custom": {
            "nullable": true
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "value_date": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "value_image": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "form_field": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFormFields"
              }
            ]
          },
          "form_submission": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFormSubmissions"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "value_files": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsFormAnswersFiles"
                }
              ]
            }
          }
        },
        "x-collection": "form_answers",
        "required": [
          "id"
        ]
      },
      "ItemsMarkings": {
        "type": "object",
        "properties": {
          "show_on_label_list": {
            "nullable": true,
            "type": "boolean"
          },
          "invert_background_color": {
            "nullable": true,
            "description": "Invertiere die Hintergrundfarbe, wenn kein Bild vorhanden ist.",
            "type": "boolean"
          },
          "hide_border": {
            "nullable": true,
            "description": "Keinen Rand verwenden",
            "type": "boolean"
          },
          "show_on_card": {
            "nullable": true,
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "background_color": {
            "nullable": true,
            "description": "Falls das Bild transparenten Hintergrund hat, kann hier die Hintergrundfarbe gesetzt werden.",
            "type": "string"
          },
          "short_code": {
            "nullable": true,
            "description": "Kürzel, welches Nutzern angezeigt werden soll",
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "image_thumb_hash": {
            "nullable": true,
            "type": "string"
          },
          "image_remote_url": {
            "nullable": true,
            "description": "Falls kein Bild hochgeladen wurde, kann auch auf ein Bild von einer anderen Seite angezeigt werden.",
            "type": "string"
          },
          "icon": {
            "nullable": true,
            "description": "Icon from: https://icons.expo.fyi/Index",
            "type": "string"
          },
          "external_identifier": {
            "nullable": true,
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "description": "Interne Bezeichnung - Nicht sichtbar für Nutzer",
            "type": "string"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "group": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsMarkingsGroups"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "image": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "excluded_by_markings": {
            "nullable": true,
            "description": "Diese Kennzeichnung wird nicht angewendet, sollten bei einer Speise eine der folgenden Kennzeichnungen vorhanden sein",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsMarkingsExclusions"
                }
              ]
            }
          },
          "translations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsMarkingsTranslations"
                }
              ]
            }
          }
        },
        "x-collection": "markings",
        "required": [
          "id"
        ]
      },
      "ItemsMarkingsExclusions": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "restricted_markings_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsMarkings"
              }
            ]
          },
          "restricted_by_markings_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsMarkings"
              }
            ]
          }
        },
        "x-collection": "markings_exclusions"
      },
      "ItemsFormsTranslations": {
        "type": "object",
        "properties": {
          "let_be_translated": {
            "nullable": true,
            "type": "boolean"
          },
          "be_source_for_translations": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "languages_code": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            ]
          },
          "forms_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsForms"
              }
            ]
          }
        },
        "x-collection": "forms_translations"
      },
      "ItemsMarkingsGroupsTranslations": {
        "type": "object",
        "properties": {
          "let_be_translated": {
            "nullable": true,
            "type": "boolean"
          },
          "be_source_for_translations": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "languages_code": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            ]
          },
          "markings_groups_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsMarkingsGroups"
              }
            ]
          }
        },
        "x-collection": "markings_groups_translations"
      },
      "ItemsMarkingsTranslations": {
        "type": "object",
        "properties": {
          "let_be_translated": {
            "nullable": true,
            "type": "boolean"
          },
          "be_source_for_translations": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "languages_code": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            ]
          },
          "markings_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsMarkings"
              }
            ]
          }
        },
        "x-collection": "markings_translations"
      },
      "ItemsNews": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "categories": {
            "nullable": true
          },
          "url": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "image_thumb_hash": {
            "nullable": true,
            "type": "string"
          },
          "image_remote_url": {
            "nullable": true,
            "type": "string"
          },
          "external_identifier": {
            "nullable": true,
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "date": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "image": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "translations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsNewsTranslations"
                }
              ]
            }
          }
        },
        "x-collection": "news",
        "required": [
          "id"
        ]
      },
      "ItemsNewsTranslations": {
        "type": "object",
        "properties": {
          "let_be_translated": {
            "nullable": true,
            "type": "boolean"
          },
          "be_source_for_translations": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "content": {
            "nullable": true,
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "languages_code": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            ]
          },
          "news_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsNews"
              }
            ]
          }
        },
        "x-collection": "news_translations"
      },
      "ItemsPopupEventsCanteens": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "popup_events_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPopupEvents"
              }
            ]
          },
          "canteens_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsCanteens"
              }
            ]
          }
        },
        "x-collection": "popup_events_canteens"
      },
      "ItemsPopupEventsTranslations": {
        "type": "object",
        "properties": {
          "let_be_translated": {
            "nullable": true,
            "type": "boolean"
          },
          "be_source_for_translations": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "content": {
            "nullable": true,
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "languages_code": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            ]
          },
          "popup_events_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPopupEvents"
              }
            ]
          }
        },
        "x-collection": "popup_events_translations"
      },
      "ItemsLanguages": {
        "type": "object",
        "properties": {
          "status": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "direction": {
            "nullable": true,
            "type": "string"
          },
          "code": {
            "nullable": false,
            "type": "string"
          }
        },
        "x-collection": "languages",
        "required": [
          "code"
        ]
      },
      "ItemsMailsFiles": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "directus_files_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "mails_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsMails"
              }
            ]
          }
        },
        "x-collection": "mails_files"
      },
      "ItemsMails": {
        "type": "object",
        "properties": {
          "send_attachments_as_links": {
            "nullable": true,
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "log": {
            "nullable": true,
            "type": "string"
          },
          "markdown_content": {
            "nullable": true,
            "type": "string"
          },
          "template_data": {
            "nullable": true
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "send_status": {
            "nullable": false,
            "type": "string"
          },
          "template_name": {
            "nullable": true,
            "type": "string"
          },
          "subject": {
            "nullable": true,
            "type": "string"
          },
          "recipient": {
            "nullable": true,
            "type": "string"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "form_submission": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFormSubmissions"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "attachments": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsMailsFiles"
                }
              ]
            }
          }
        },
        "x-collection": "mails",
        "required": [
          "id"
        ]
      },
      "ItemsMarkingsGroups": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "external_identifier": {
            "nullable": true,
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "translations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsMarkingsGroupsTranslations"
                }
              ]
            }
          },
          "markings": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsMarkings"
                }
              ]
            }
          }
        },
        "x-collection": "markings_groups",
        "required": [
          "id"
        ]
      },
      "ItemsPopupEvents": {
        "type": "object",
        "properties": {
          "show_on_android": {
            "nullable": true,
            "type": "boolean"
          },
          "show_on_ios": {
            "nullable": true,
            "type": "boolean"
          },
          "show_on_web": {
            "nullable": true,
            "type": "boolean"
          },
          "send_notification": {
            "nullable": true,
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "image_remote_url": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "image_thumb_hash": {
            "nullable": true,
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "date_end": {
            "nullable": true,
            "description": "Falls ein Event nur bis zu einem bestimmten Zeitpunkt gültig ist.",
            "type": "string",
            "format": "date-time"
          },
          "date_start": {
            "nullable": false,
            "description": "* Muss gesetzt sein",
            "type": "string",
            "format": "date-time"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "image": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "canteens": {
            "nullable": true,
            "description": "Falls keine Mensa ausgewählt ist, wird es für alle angezeigt.",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsPopupEventsCanteens"
                }
              ]
            }
          },
          "translations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsPopupEventsTranslations"
                }
              ]
            }
          }
        },
        "x-collection": "popup_events",
        "required": [
          "date_start",
          "id"
        ]
      },
      "ItemsUtilizationsEntries": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "value_forecast_current": {
            "nullable": true,
            "type": "integer"
          },
          "value_real": {
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "date_start": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "date_end": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "utilization_group": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsUtilizationsGroups"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "utilizations_entries",
        "required": [
          "id"
        ]
      },
      "ItemsUtilizationsGroups": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "threshold_until_low": {
            "nullable": true,
            "type": "integer"
          },
          "threshold_until_medium": {
            "nullable": true,
            "type": "integer"
          },
          "threshold_until_max": {
            "nullable": true,
            "type": "integer"
          },
          "all_time_high": {
            "nullable": true,
            "type": "integer"
          },
          "threshold_until_high": {
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "utilization_entries": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsUtilizationsEntries"
                }
              ]
            }
          }
        },
        "x-collection": "utilizations_groups",
        "required": [
          "id"
        ]
      },
      "ItemsProfilesBuildingsFavorites": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "profiles_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsProfiles"
              }
            ]
          },
          "buildings_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsBuildings"
              }
            ]
          }
        },
        "x-collection": "profiles_buildings_favorites"
      },
      "ItemsWashingmachinesJobs": {
        "type": "object",
        "properties": {
          "duration_in_minutes_calculated": {
            "nullable": true,
            "type": "integer"
          },
          "duration_in_minutes_rounded_10min_calculated": {
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "date_start": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "date_end": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "duration_calculated": {
            "nullable": true,
            "type": "string",
            "format": "time"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "washingmachine": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsWashingmachines"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "apartment": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsApartments"
              }
            ]
          }
        },
        "x-collection": "washingmachines_jobs",
        "required": [
          "id"
        ]
      },
      "ItemsWikisTranslations": {
        "type": "object",
        "properties": {
          "let_be_translated": {
            "nullable": true,
            "type": "boolean"
          },
          "be_source_for_translations": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "content": {
            "nullable": true,
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "languages_code": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            ]
          },
          "wikis_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsWikis"
              }
            ]
          }
        },
        "x-collection": "wikis_translations"
      },
      "ItemsWorkflowsRuns": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "runtime_in_seconds": {
            "nullable": true,
            "type": "integer"
          },
          "log": {
            "nullable": true,
            "type": "string"
          },
          "output": {
            "nullable": true,
            "type": "string"
          },
          "input": {
            "nullable": true,
            "type": "string"
          },
          "result_hash": {
            "nullable": true,
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "state": {
            "nullable": true,
            "type": "string"
          },
          "workflow": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsWorkflows"
              }
            ]
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_finished": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_started": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "workflows_runs",
        "required": [
          "workflow",
          "id"
        ]
      },
      "ItemsWorkflows": {
        "type": "object",
        "properties": {
          "enabled": {
            "nullable": true,
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "id": {
            "nullable": false,
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "workflows_runs": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsWorkflowsRuns"
                }
              ]
            }
          }
        },
        "x-collection": "workflows",
        "required": [
          "id"
        ]
      },
      "ItemsReportRecipients": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "mail": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "report_recipients",
        "required": [
          "id"
        ]
      },
      "ItemsProfilesBuildingsLastOpened": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "profiles_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsProfiles"
              }
            ]
          },
          "buildings_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsBuildings"
              }
            ]
          }
        },
        "x-collection": "profiles_buildings_last_opened"
      },
      "ItemsProfilesMarkings": {
        "type": "object",
        "properties": {
          "dislike": {
            "nullable": true,
            "type": "boolean"
          },
          "like": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "profiles_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsProfiles"
              }
            ]
          },
          "markings_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsMarkings"
              }
            ]
          }
        },
        "x-collection": "profiles_markings"
      },
      "ItemsPushNotifications": {
        "type": "object",
        "properties": {
          "ios_play_sound": {
            "nullable": true,
            "type": "boolean"
          },
          "ios_badge_count": {
            "nullable": true,
            "type": "integer"
          },
          "message_ttl": {
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "expo_push_tokens": {
            "nullable": true,
            "description": "Format: ExponentPushToken[xxxxxxxxxxxxxxxxx] with prefix and brackets, then press enter for more"
          },
          "status_log": {
            "nullable": true,
            "type": "string"
          },
          "message_data": {
            "nullable": true
          },
          "ios_message_subtitle": {
            "nullable": true,
            "type": "string"
          },
          "expo_access_token": {
            "nullable": true,
            "type": "string"
          },
          "android_channel_id": {
            "nullable": true,
            "type": "string"
          },
          "richContent": {
            "nullable": true,
            "type": "string"
          },
          "image_url": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "message_title": {
            "nullable": true,
            "type": "string"
          },
          "message_body": {
            "nullable": true,
            "type": "string"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "push_notifications",
        "required": [
          "id"
        ]
      },
      "ItemsWashingmachines": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "external_identifier": {
            "nullable": true,
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "date_stated": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "date_finished": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "apartment": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsApartments"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "washingmachines",
        "required": [
          "id"
        ]
      },
      "ItemsWikisDirectusRoles": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "wikis_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsWikis"
              }
            ]
          },
          "directus_roles_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Roles"
              }
            ]
          }
        },
        "x-collection": "wikis_directus_roles"
      },
      "ItemsWikis": {
        "type": "object",
        "properties": {
          "public": {
            "nullable": true,
            "type": "boolean"
          },
          "show_in_drawer": {
            "nullable": true,
            "type": "boolean"
          },
          "show_in_drawer_as_bottom_item": {
            "nullable": true,
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "position": {
            "nullable": true,
            "type": "integer"
          },
          "color": {
            "nullable": true,
            "type": "string"
          },
          "url": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "icon": {
            "nullable": true,
            "description": "Icon from: https://icons.expo.fyi/Index",
            "type": "string"
          },
          "custom_id": {
            "nullable": true,
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "parent": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsWikis"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "roles_required": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsWikisDirectusRoles"
                }
              ]
            }
          },
          "children": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsWikis"
                }
              ]
            }
          },
          "translations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsWikisTranslations"
                }
              ]
            }
          }
        },
        "x-collection": "wikis",
        "required": [
          "id"
        ]
      },
      "ItemsBuildings": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "coordinates": {
            "nullable": true
          },
          "url": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "image_thumb_hash": {
            "nullable": true,
            "type": "string"
          },
          "image_remote_url": {
            "nullable": true,
            "type": "string"
          },
          "external_identifier": {
            "nullable": true,
            "type": "string"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "date_of_construction": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "image": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "translations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsBuildingsTranslations"
                }
              ]
            }
          },
          "apartments": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsApartments"
                }
              ]
            }
          },
          "businesshours": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsBuildingsBusinesshours"
                }
              ]
            }
          }
        },
        "x-collection": "buildings",
        "required": [
          "id"
        ]
      },
      "ItemsApartments": {
        "type": "object",
        "properties": {
          "handicapped_accessible": {
            "nullable": true,
            "type": "boolean"
          },
          "singleflat": {
            "nullable": true,
            "type": "boolean"
          },
          "family_friendly": {
            "nullable": true,
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "external_identifier": {
            "nullable": true,
            "type": "string"
          },
          "available_from": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "building": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsBuildings"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "washingmachines": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsWashingmachines"
                }
              ]
            }
          }
        },
        "x-collection": "apartments",
        "required": [
          "id"
        ]
      },
      "ItemsAppElementsTranslations": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "let_be_translated": {
            "nullable": true,
            "type": "boolean"
          },
          "be_source_for_translations": {
            "nullable": true,
            "type": "boolean"
          },
          "content": {
            "nullable": true,
            "type": "string"
          },
          "popup_content": {
            "nullable": true,
            "type": "string"
          },
          "popup_button_text": {
            "nullable": true,
            "type": "string"
          },
          "languages_code": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            ]
          },
          "app_elements_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsAppElements"
              }
            ]
          }
        },
        "x-collection": "app_elements_translations"
      },
      "ItemsProfiles": {
        "type": "object",
        "properties": {
          "notifiy_on_free_apartments": {
            "nullable": true,
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "credit_balance_last_transaction": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "credit_balance": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "course_timetable": {
            "nullable": true
          },
          "avatar": {
            "nullable": true
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "price_group": {
            "nullable": true,
            "type": "string"
          },
          "nickname": {
            "nullable": true,
            "type": "string"
          },
          "language": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "credit_balance_date_updated": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "date_privacy_policy_accepted": {
            "nullable": true,
            "type": "string",
            "format": "date-time"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "canteen": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsCanteens"
              }
            ]
          },
          "markings": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsProfilesMarkings"
                }
              ]
            }
          },
          "buildings_favorites": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsProfilesBuildingsFavorites"
                }
              ]
            }
          },
          "buildings_last_opened": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsProfilesBuildingsLastOpened"
                }
              ]
            }
          },
          "devices": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsDevices"
                }
              ]
            }
          },
          "foods_feedbacks": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsFoodsFeedbacks"
                }
              ]
            }
          }
        },
        "x-collection": "profiles",
        "required": [
          "id"
        ]
      },
      "ItemsAppSettingsBalanceTranslations": {
        "type": "object",
        "properties": {
          "let_be_translated": {
            "nullable": true,
            "type": "boolean"
          },
          "be_source_for_translations": {
            "nullable": true,
            "type": "boolean"
          },
          "app_settings_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsAppSettings"
              }
            ]
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "content": {
            "nullable": true,
            "type": "string"
          },
          "languages_code": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            ]
          }
        },
        "x-collection": "app_settings_balance_translations"
      },
      "ItemsCanteens": {
        "type": "object",
        "properties": {
          "foodoffers_import_delete_all_without_dates": {
            "nullable": true,
            "description": "Beim Importieren von Speiseangeboten werden alle statischen Speiseangebote gelöscht, also die ohne Datum.",
            "type": "boolean"
          },
          "foodoffers_import_without_date": {
            "nullable": true,
            "description": "Beim Importieren von Speiseangeboten sind die Angebote für alle Tage gültig und haben daher kein Datum.",
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "alias": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "external_identifier": {
            "nullable": true,
            "type": "string"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "building": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsBuildings"
              }
            ]
          },
          "utilization_group": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsUtilizationsGroups"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "canteens",
        "required": [
          "id"
        ]
      },
      "ItemsCollectibleEventParticipants": {
        "type": "object",
        "properties": {
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "points": {
            "nullable": true,
            "type": "string"
          },
          "phone_number": {
            "nullable": true,
            "type": "string"
          },
          "email": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "profile": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsProfiles"
              }
            ]
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "collectible_event": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsCollectibleEvents"
              }
            ]
          }
        },
        "x-collection": "collectible_event_participants",
        "required": [
          "id"
        ]
      },
      "ItemsFoodoffersCategoriesTranslations": {
        "type": "object",
        "properties": {
          "be_source_for_translations": {
            "nullable": true,
            "type": "boolean"
          },
          "let_be_translated": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "languages_code": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            ]
          },
          "foodoffers_categories_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFoodoffersCategories"
              }
            ]
          }
        },
        "x-collection": "foodoffers_categories_translations"
      },
      "ItemsFormCategoriesTranslations": {
        "type": "object",
        "properties": {
          "be_source_for_translations": {
            "nullable": true,
            "type": "boolean"
          },
          "let_be_translated": {
            "nullable": true,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "languages_code": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguages"
              }
            ]
          },
          "form_categories_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsFormCategories"
              }
            ]
          }
        },
        "x-collection": "form_categories_translations"
      }
    },
    "parameters": {
      "Id": {
        "description": "Index",
        "name": "id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "UUId": {
        "description": "Unique identifier for the object.",
        "name": "id",
        "in": "path",
        "required": true,
        "schema": {
          "example": "8cbb43fe-4cdf-4991-8352-c461779cec02",
          "type": "string"
        }
      },
      "Collection": {
        "description": "Collection of which you want to retrieve the items from.",
        "name": "collection",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "Search": {
        "description": "Filter by items that contain the given search query in one of their fields.",
        "in": "query",
        "name": "search",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "Page": {
        "description": "Cursor for use in pagination. Often used in combination with limit.",
        "in": "query",
        "name": "page",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "Offset": {
        "description": "How many items to skip when fetching data.",
        "in": "query",
        "name": "offset",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "Sort": {
        "description": "How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.\n",
        "in": "query",
        "name": "sort",
        "required": false,
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "Meta": {
        "description": "What metadata to return in the response.",
        "in": "query",
        "name": "meta",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "Limit": {
        "description": "A limit on the number of objects that are returned.",
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "Filter": {
        "description": "Select items in collection by given conditions.",
        "in": "query",
        "name": "filter",
        "required": false,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "example": {
                "<field>": {
                  "<operator>": "<value>"
                }
              }
            }
          }
        }
      },
      "Fields": {
        "description": "Control what fields are being returned in the object.",
        "in": "query",
        "name": "fields",
        "required": false,
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "Export": {
        "name": "export",
        "description": "Saves the API response to a file. Accepts one of \"csv\", \"json\", \"xml\", \"yaml\".",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "csv",
            "json",
            "xml",
            "yaml"
          ]
        }
      },
      "Version": {
        "name": "version",
        "description": "Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "NotFoundError": {
        "description": "Error: Not found.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Error: Unauthorized request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "KeyAuth": {
        "type": "apiKey",
        "in": "query",
        "name": "access_token"
      },
      "Auth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  }
}
