version: '3.8'

services:

  # The Directus backend
  rocket-meals-directus:
    build:
      context: ./
    #container_name: "rocket-meals-directus" # "replicas" is ignored if you name your container using container_name: myname
    restart: ${RESTART}
    deploy:
      mode: replicated
      replicas: ${DIRECTUS_REPLICAS:-1}  # Default to 1 if DIRECTUS_REPLICAS is not set
      endpoint_mode: vip # Virtual IP - https://docs.docker.com/compose/compose-file/deploy/#endpoint_mode
    networks:
      - traefik
      - directus_network
    labels:
      traefik.enable: "true"
      traefik.docker.network: traefik
      traefik.http.middlewares.https-redirect.redirectscheme.scheme: https

      traefik.http.routers.rocket-meals-backend.entrypoints: web
      traefik.http.routers.rocket-meals-backend.rule: Host(`${MYHOST}`) && PathPrefix(`/backend`)
      traefik.http.routers.rocket-meals-backend.middlewares: https-redirect

      traefik.http.routers.rocket-meals-directus-secure.entrypoints: websecure
      traefik.http.routers.rocket-meals-directus-secure.rule: Host(`${MYHOST}`) && PathPrefix(`/${ROCKET_MEALS_PATH}/${ROCKET_MEALS_BACKEND_PATH}`)
      traefik.http.routers.rocket-meals-directus-secure.middlewares: rocket-meals-directus-stripprefix
      traefik.http.routers.rocket-meals-directus-secure.tls: "true"
      traefik.http.routers.rocket-meals-directus-secure.tls.certresolver: "${RESOLVER}"
      traefik.http.services.rocket-meals-directus-secure.loadbalancer.server.port: ${DIRECTUS_PORT}
      traefik.http.middlewares.rocket-meals-directus-stripprefix.stripprefix.prefixes: /${ROCKET_MEALS_PATH}/${ROCKET_MEALS_BACKEND_PATH}

      # network: traefik
    volumes:
      # By default, uploads are stored in /directus/uploads
      # Always make sure your volumes matches the storage root when using
      # local driver
      - ./Backend/uploads:/directus/uploads
      # Make sure to also mount the volume when using SQLite
      #- ./Backend/database:/directus/database
      # If you want to load extensions from the host
      - ./Backend/directusExtensions:/directus/extensions
      # TL1 food plan
      - ${FOOD_SYNC_TL1FILE_EXPORT_CSV_FILE_PATH:-/dev/null}:/directus/tl1/foodPlan.csv
      # TL1 markings
      - ${MARKING_SYNC_TL1FILE_EXPORT_CSV_FILE_PATH:-/dev/null}:/directus/tl1/markings.csv
      # TL1 housing contracts
      - ${HOUSING_CONTRACT_SYNC_TL1FILE_EXPORT_CSV_FILE_PATH:-/dev/null}:/directus/tl1/housingContracts.csv
    environment:
      # Traefik configuration
      PUBLIC_URL: "https://${MYHOST}/${ROCKET_MEALS_PATH}/${ROCKET_MEALS_BACKEND_PATH}"
      ROOT_REDIRECT: "/${ROCKET_MEALS_PATH}/${ROCKET_MEALS_BACKEND_PATH}/admin"
      # Directus default configuration
      HOST: "0.0.0.0" # To bind to all interfaces for Docker
      PORT: "${DIRECTUS_PORT}"
      TZ: "Europe/Berlin"
      ACCESS_TOKEN_TTL: "15m" # Time to live for the access token
      REFRESH_TOKEN_TTL: "180d" # Time to live for the refresh token
      NODE_TLS_REJECT_UNAUTHORIZED: 0 # The HTTPS cert is not complete: "unable to verify the first certificate"
      MAX_PAYLOAD_SIZE: "80mb"
      CORS_ENABLED: "true" # Enable CORS - which means that the frontend does not have to be on the same domain
      CORS_ORIGIN: "true" # Allow all origins - which means that the frontend does not have to be on the same domain
      REFRESH_TOKEN_COOKIE_SAME_SITE: "lax" # "lax" means that the cookie is sent with same-site requests, and with cross-site top-level navigations
      # Directus cache configuration
      CACHE_ENABLED: "true"
      CACHE_AUTO_PURGE: 'true' # Purge when change in tables detected - https://docs.directus.io/self-hosted/config-options.html#cache
      CACHE_TTL: "5m" # Cache time to live - aka. how long the cache is valid
      CACHE_STORE: "redis"
      REDIS: "redis://rocket-meals-cache:6379" # For Cache and Synchronization of Replicas # Required for Replicas to work - Directus communicates which replica is the master
      # Directus synchronization configuration
      SYNCHRONIZATION_STORE: "redis" # Multiple instances of Directus need to communicate with each other to not trigger the same event multiple times - https://docs.directus.io/self-hosted/config-options.html#synchronization
      MARKETPLACE_TRUST: "all" # Trust all marketplace extensions - Directus Marketplace does not support extensions that require a database connection out of the box

      EMAIL_TEMPLATES_PATH: "/directus/extensions/templates" # https://docs.directus.io/self-hosted/email-templates.html

      AUTO_TRANSLATE_API_KEY: "${AUTO_TRANSLATE_API_KEY}" # Required for the auto translation plugin

      SYNC_FOR_CUSTOMER: "${SYNC_FOR_CUSTOMER}" # For which customer the sync is for

      FOOD_SYNC_MODE: "${FOOD_SYNC_MODE}"
      FOOD_SYNC_TL1FILE_EXPORT_CSV_FILE_PATH: "${FOOD_SYNC_TL1FILE_EXPORT_CSV_FILE_PATH}" # So in directus we know if the host system has a file to sync, but we will use the directus internal file path: /directus/tl1/foodPlan.csv
      FOOD_SYNC_TL1FILE_EXPORT_CSV_FILE_ENCODING: "${FOOD_SYNC_TL1FILE_EXPORT_CSV_FILE_ENCODING}"
      FOOD_SYNC_TL1WEB_EXPORT_URL: "${FOOD_SYNC_TL1WEB_EXPORT_URL}"

      # Rocket Meals configuration - Markings
      MARKING_SYNC_MODE: "${MARKING_SYNC_MODE}"
      MARKING_SYNC_TL1FILE_EXPORT_CSV_FILE_PATH: "${MARKING_SYNC_TL1FILE_EXPORT_CSV_FILE_PATH}" # So in directus we know if the host system has a file to sync, but we will use the directus internal file path: /directus/tl1/markings.csv
      MARKING_SYNC_TL1FILE_EXPORT_CSV_FILE_ENCODING: "${MARKING_SYNC_TL1FILE_EXPORT_CSV_FILE_ENCODING}"

      HOUSING_CONTRACT_SYNC_TL1FILE_EXPORT_CSV_FILE_PATH: "${HOUSING_CONTRACT_SYNC_TL1FILE_EXPORT_CSV_FILE_PATH}" # So in directus we know if the host system has a file to sync, but we will use the directus internal file path: /directus/tl1/housingContracts.csv


      # Directus Database configuration
      KEY: "${DATABASE_KEY}"
      SECRET: "${DATABASE_SECRET}"

      # Database
      # Debug database
      #DB_CLIENT: 'sqlite3' # https://docs.directus.io/configuration/config-options/
      #DB_FILENAME: './database/data.db'
      # Production database
      DB_CLIENT: "pg"
      DB_HOST: "rocket-meals-database"
      DB_PORT: "5432"
      DB_DATABASE: "directus"
      DB_USER: "directus"
      DB_PASSWORD: "directus"

      # Directus Admin user
      ADMIN_EMAIL: "${ADMIN_EMAIL}"
      ADMIN_PASSWORD: "${ADMIN_PASSWORD}"


      # Directus Email configuration
      EMAIL_VERIFY_SETUP: "${EMAIL_VERIFY_SETUP}"
      EMAIL_FROM: "${EMAIL_FROM}"
      EMAIL_TRANSPORT: "ses"
      EMAIL_SES_CREDENTIALS__ACCESS_KEY_ID: "${EMAIL_SES_CREDENTIALS__ACCESS_KEY_ID}"
      EMAIL_SES_CREDENTIALS__SECRET_ACCESS_KEY: "${EMAIL_SES_CREDENTIALS__SECRET_ACCESS_KEY}"
      EMAIL_SES_REGION: "eu-central-1"


      # Directus Auth configuration
      AUTH_PROVIDERS: "${AUTH_PROVIDERS}"

      # Directus Auth configuration - Apple predefined values
      AUTH_APPLE_DRIVER: "openid"
      AUTH_APPLE_REDIRECT_ALLOW_LIST: "${AUTH_REDIRECT_ALLOW_LIST}"
      AUTH_APPLE_MODE: "session"
      AUTH_APPLE_CLIENT_ID: "${AUTH_APPLE_CLIENT_ID}"
      AUTH_APPLE_CLIENT_SECRET: "${AUTH_APPLE_CLIENT_SECRET}"
      AUTH_APPLE_DEFAULT_ROLE_ID: "${DEFAULT_ROLE_ID}" #If you want to set a default role id
      AUTH_APPLE_ICON: "apple"
      AUTH_APPLE_LABEL: "Apple"
      AUTH_APPLE_ALLOW_PUBLIC_REGISTRATION: "true"
      AUTH_APPLE_ISSUER_URL: "https://appleid.apple.com/.well-known/openid-configuration"
      AUTH_APPLE_SCOPE: "name email" # We sadly only get the email and name on the first login - https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_js/configuring_your_webpage_for_sign_in_with_apple
      AUTH_APPLE_IDENTIFIER_KEY: "sub" # The key in the response that identifies the user
      AUTH_APPLE_PARAMS: '{"response_mode":"form_post"}'

      # Directus Auth configuration - Google predefined values
      AUTH_GOOGLE_DRIVER: "openid"
      AUTH_GOOGLE_REDIRECT_ALLOW_LIST: "${AUTH_REDIRECT_ALLOW_LIST}"
      AUTH_GOOGLE_MODE: "session"
      AUTH_GOOGLE_CLIENT_ID: "${AUTH_GOOGLE_CLIENT_ID}"
      AUTH_GOOGLE_CLIENT_SECRET: "${AUTH_GOOGLE_CLIENT_SECRET}"
      AUTH_GOOGLE_ISSUER_URL: "https://accounts.google.com/.well-known/openid-configuration"
      AUTH_GOOGLE_IDENTIFIER_KEY: "sub"
      AUTH_GOOGLE_DEFAULT_ROLE_ID: "${DEFAULT_ROLE_ID}"
      AUTH_GOOGLE_ICON: "google"
      AUTH_GOOGLE_LABEL: "Google"
      AUTH_GOOGLE_ALLOW_PUBLIC_REGISTRATION: "true"


  # The Directus database - postgres with data volume
  # https://docs.directus.io/self-hosted/docker-guide.html#example-docker-compose
  rocket-meals-database:
    image: postgis/postgis:13-master
    # Required when running on platform other than amd64, like Apple M1/M2:
    # platform: linux/amd64
    restart: ${RESTART}
    volumes:
      - ./database:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U directus" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_MAX_CONNECTIONS: "500" # Optional, adjust based on your needs
      POSTGRES_SHARED_BUFFERS: "16GB"  # Optional, adjust based on your RAM # General: 25% of the total system memory -> Default 16GB
      POSTGRES_USER: "directus"
      POSTGRES_PASSWORD: "directus"
      POSTGRES_DB: "directus"
    networks:
      - directus_network

  rocket-meals-database-backup:
    build:
      context: ./dockerDatabaseBackup
      dockerfile: Dockerfile
      args:
        POSTGIS_VERSION: 13-master # Pass the PostGIS version dynamically if needed
    environment:
      - PGUSER=directus
      - PGPASSWORD=directus
      # Every hour: 0 * * * *
      # Every minute: * * * * *
      - CRON_SCHEDULE=0 * * * *
      - PGDB=directus
      - PGHOST=rocket-meals-database
      - DELETE_OLDER_THAN=44640
    volumes:
      - ./database_backups:/dump
    command: dump-cron
    depends_on:
      - rocket-meals-database
    networks:
      - directus_network

  # Service for restoring the database from a backup
  rocket-meals-database-restore:
    build:
      context: ./dockerDatabaseBackupRestore
      dockerfile: Dockerfile
    volumes:
      - ./database_backups:/dump   # Ensure this matches the directory name
    environment:
      PGUSER: "directus"
      PGPASSWORD: "directus"
      PGDB: "directus"
      PGHOST: "rocket-meals-database"
      BACKUP_FILE: ${BACKUP_FILE}
    networks:
      - directus_network
    depends_on:
      rocket-meals-database:
        condition: service_healthy
    profiles:
      - restore  # Only run this service when the restore profile is set


  # The cache service for Directus
  rocket-meals-cache:
    restart: ${RESTART}
    image: redis:6.2.6
    networks:
      - directus_network

networks:
  directus_network: {}
  traefik:
    driver: bridge
    name: traefik
